{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/rootDirs.html","result":{"pageContext":{"title":"rootDirs","lang":"en","html":"<p>Using <code>rootDirs</code>, you can inform the compiler that there are many “virtual” directories acting as a single root.\nThis allows the compiler to resolve relative module imports within these “virtual” directories, as if they were merged in to one directory.</p>\n<p>For example:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\"> src\n └── views\n     └── view1.ts (can import \"./template1\", \"./view2`)\n     └── view2.ts (can import \"./template1\", \"./view1`)\n\n generated\n └── templates\n         └── views\n             └── template1.ts (can import \"./view1\", \"./view2\")</span></code></div></pre>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#rootDirs'><data-lsp lsp=\"Allow multiple folders to be treated as one when resolving modules.\">rootDirs</data-lsp></a>\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"src/views\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"generated/templates/views\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>This does not affect how TypeScript emits JavaScript, it only emulates the assumption that they will be able to\nwork via those relative paths at runtime.</p>\n<p><code>rootDirs</code> can be used to provide a separate “type layer” to files that are not TypeScript or JavaScript by providing a home for generated <code>.d.ts</code> files in another folder. This is technique is useful for bundled applications where you use <code>import</code> of files that aren’t necessarily code:</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #333333\"> src</span>\n<span style=\"color: #333333\"> └── index.ts</span>\n<span style=\"color: #333333\"> └── css</span>\n<span style=\"color: #333333\">     └── main.css</span>\n<span style=\"color: #333333\">     └── navigation.css</span>\n\n<span style=\"color: #333333\"> generated</span>\n<span style=\"color: #333333\"> └── css</span>\n<span style=\"color: #333333\">     └── main.css.d.ts</span>\n<span style=\"color: #333333\">     └── navigation.css.d.ts</span></code></div></pre>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#rootDirs'><data-lsp lsp=\"Allow multiple folders to be treated as one when resolving modules.\">rootDirs</data-lsp></a>\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"src\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"generated\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>This technique lets you generate types ahead of time for the non-code source files. Imports then work naturally based off the source file’s location.\nFor example <code>./src/index.ts</code> can import the file <code>./src/css/main.css</code> and TypeScript will be aware of the bundler’s behavior for that filetype via the corresponding generated declaration file.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) const appClass: &amp;quot;mainClassF3EC2&amp;quot;&amp;#13;import appClass'>appClass</data-lsp></span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./main.css\"</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKVzqIHQDGAzsfgCb4AuxAUPAB4AOA9gE5WiEuLGfJMmAYVjJSoALygARDjwixxAGIBmAKJCATNIDctEKAC0xwgFcqxw-rBQ4SNJlB5yjanWipWHUAG9QA4VFxAF9QSDYWVBl8YDkCEmJdIA'>Try</a></div></pre>","redirectHref":"/tsconfig#rootDirs"}},"staticQueryHashes":[]}