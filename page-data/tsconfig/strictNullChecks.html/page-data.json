{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/strictNullChecks.html","result":{"pageContext":{"title":"strictNullChecks","lang":"en","html":"<p>When <code>strictNullChecks</code> is <code>false</code>, <code>null</code> and <code>undefined</code> are effectively ignored by the language.\nThis can lead to unexpected errors at runtime.</p>\n<p>When <code>strictNullChecks</code> is <code>true</code>, <code>null</code> and <code>undefined</code> have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.</p>\n<p>For example with this TypeScript code, <code>users.find</code> has no guarantee that it will actually find a user, but you can\nwrite code as though it will:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span>\n<span style=\"color: #333333\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #333333\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">12</span><span style=\"color: #333333\"> },</span>\n<span style=\"color: #333333\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #333333\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">32</span><span style=\"color: #333333\"> },</span>\n<span style=\"color: #333333\">];</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>loggedInUser</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp>.<data-lsp lsp='(method) Array&amp;lt;{ name: string; age: number; }>.find(predicate: (value: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}, index: number, obj: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]) => unknown, thisArg?: any): {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} (+1 overload)'>find</data-lsp></span><span style=\"color: #333333\">((</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) name: string'>name</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #333333\">);</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>loggedInUser</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) age: number'>age</data-lsp></span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0ByBXANhgwgCwKaIDWkAXKAGYCGGk+AUCBNFbAOb7TkCiAygEwAGAIwBWegBNCGVvlCIA9gDsYoDArYcJASSUBVOrCVUAtvnIwEStgG569RSuig0hyKAC8oANr1QoAG9QYzNyACIAeQAjAE8wgBpQKg5yYX5QAF94v0Dg03NQMIAJfHxYKgSklNAAZnSs+gBdOwdlVXVNfB19Q08XNwA6CnglCQAKMbQASk8APhcBkLkPFbUNLV0DMqWpu0dIBQx8AY6xjo2esoHk-F2gA'>Try</a></div></pre>\n<p>Setting <code>strictNullChecks</code> to <code>true</code> will raise an error that you have not made a guarantee that the <code>loggedInUser</code> exists before trying to use it.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span>\n<span style=\"color: #333333\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #333333\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">12</span><span style=\"color: #333333\"> },</span>\n<span style=\"color: #333333\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #333333\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">32</span><span style=\"color: #333333\"> },</span>\n<span style=\"color: #333333\">];</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined'>loggedInUser</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp>.<data-lsp lsp='(method) Array&amp;lt;{ name: string; age: number; }>.find(predicate: (value: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}, index: number, obj: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]) => unknown, thisArg?: any): {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined (+1 overload)'>find</data-lsp></span><span style=\"color: #333333\">((</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) name: string'>name</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #333333\">);</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined'>loggedInUser</data-lsp></data-err></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) age: number'>age</data-lsp></span><span style=\"color: #333333\">);</span>\n<span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME50FYM0AoECAFwENoBzSM1AUQGU0AGNkscRM6ASwDGZAHIBXADbiAwgAtIAgNaIiAE3niqkUALgA7HqHFxqtFQEldAVUQxdFALaRUPfruoBuIkR36yoUTZIoAC8oADaRKCgAN6gdo6oAEQA8gBGAJ6JADSgFLSoAIxooAC+WZExcQ5OoIkAEpAwFNm5+aCEpeUAup7eegZGJpDmVoEh-oGIAHQAZny6KgAUi6IAlCEAfP5T8VrB+4bGphbWttWrnj6IcOKQU4OLg8ejMFN5kBdAA'>Try</a></div></pre>\n<p>The second example failed because the array’s <code>find</code> function looks a bit like this simplification:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// When strictNullChecks: true</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> Array </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  find(predicate</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> any, </span><span style=\"color: #1A1A1A\">index</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> boolean)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> S </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> undefined;</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #008000\">// When strictNullChecks: false the undefined is removed from the type system,</span>\n<span style=\"color: #008000\">// allowing you to write code which assumes it always found a result</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> Array </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  find(predicate</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> any, </span><span style=\"color: #1A1A1A\">index</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> boolean)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> S;</span>\n<span style=\"color: #333333\">};</span></code></div></pre>","redirectHref":"/tsconfig#strictNullChecks"}},"staticQueryHashes":[]}