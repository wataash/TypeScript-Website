{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/strictFunctionTypes.html","result":{"pageContext":{"title":"strictFunctionTypes","lang":"en","html":"<p>When enabled, this flag causes functions parameters to be checked more correctly.</p>\n<p>Hereâ€™s a basic example with <code>strictFunctionTypes</code> off:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function fn(x: string): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp>.<data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp></span><span style=\"color: #333333\">());</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) ns: string | number'>ns</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> void;</span>\n\n<span style=\"color: #008000\">// Unsafe assignment</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let func: StringOrNumberFunc'>func</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #333333\">;</span>\n<span style=\"color: #008000\">// Unsafe call - will crash</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let func: (ns: string | number) => void'>func</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">10</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BiBXAds+B7DAVATwAcBTSALlADMBDAG0lIChrNs8aMAKADypgIMAcwCUoAN7NQoRHkg56pAHT0cw7gCIAEqXpqANKE2gA1KF7LoOADI4A7qVgBhWk26jRAbmYBfZszQJKSgAMpw8CIA8rAAcmgAtgBGTuhYoAC8oNwYlKCCkcKgAD6gGIkpsOIZAHygAG448AAmPswgoACqubTUIW6Q8MIYCaQY0MxK0DTsVOFCwjHxyansmVw+Hd2QvSGIDPSgALSg9vD6srBuABas7NwAjAAM3kA'>Try</a></div></pre>\n<p>With <code>strictFunctionTypes</code> <em>on</em>, the error is correctly detected:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function fn(x: string): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp>.<data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp></span><span style=\"color: #333333\">());</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) ns: string | number'>ns</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> void;</span>\n\n<span style=\"color: #008000\">// Unsafe assignment is prevented</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='let func: StringOrNumberFunc'>func</data-lsp></data-err></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #333333\">;</span>\n<span class=\"error\"><span>Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNDyIAoAPVRM6CogcwEpQBvHKFAlqiOABtIAOnFxO9AEQAJSONkAaUAtABqUIylk4AGTgB3GAGEAhokj1u3ANw4AvjhxkAngAdIoAGU2Dk4AeWgAOQIAWwAjGAAxYhJQAF5QeiIUUFZ2LlAAH1AiGPjoXlSAPlAANzgKABMXHBBQAFUs6zx-W0QKTiJoyCIyUApEUB9oSBrhskgGnElRwlJUILywyNLE5LTaIicgA'>Try</a></div></pre>\n<p>During development of this feature, we discovered a large number of inherently unsafe class hierarchies, including some in the DOM.\nBecause of this, the setting only applies to functions written in <em>function</em> syntax, not to those in <em>method</em> syntax:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type Methodish = {&amp;#13;    func(x: string | number): void;&amp;#13;}'>Methodish</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string | number'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> number)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> void;</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function fn(x: string): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp>.<data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp></span><span style=\"color: #333333\">());</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #008000\">// Ultimately an unsafe assignment, but not detected</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const m: Methodish'>m</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type Methodish = {&amp;#13;    func(x: string | number): void;&amp;#13;}'>Methodish</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp>: </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const m: Methodish'>m</data-lsp>.<data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">10</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshwAsD2ATAlgZwVAvFA3gFBRQBmArgHYDGAFAB4BcUGwATmpQOZQA+UlcgFsARhDYBKZgDckaFAG5CAXyWEKNYGiSUylBs1YduEgsSjUdGJABsIAOhtIutAEQAJCDacAaKK6gAaih6e2AkABkkAHdxAGEAQwwIWgkJJWVCQgB6bKgAVRstIQTgLxAoBN0qDATSaCSMNC5KIQhKYD8RcmABJF6UeAhqMpRCS0pWKCFmOERUTGw8IhINamZSSh8VJSF7NdoARgAGdKA'>Try</a></div></pre>","redirectHref":"/tsconfig#strictFunctionTypes"}},"staticQueryHashes":[]}