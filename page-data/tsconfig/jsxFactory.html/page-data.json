{"componentChunkName":"component---src-templates-tsconfig-option-one-page-tsx","path":"/tsconfig/jsxFactory.html","result":{"pageContext":{"title":"jsxFactory","lang":"en","html":"<p>Changes the function called in <code>.js</code> files when compiling JSX Elements using the classic JSX runtime.\nThe most common change is to use <code>\"h\"</code> or <code>\"preact.h\"</code> instead of the default <code>\"React.createElement\"</code> if using <code>preact</code>.</p>\n<p>For example, this TSX file:</p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">h</span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">HelloWorld</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #333333\">Hello</span><span style=\"color: #800000\">&lt;/div&gt;</span><span style=\"color: #333333\">;</span></code></div></pre>\n<p>With <code>jsxFactory: \"h\"</code> looks like:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">Object.defineProperty(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> require(</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">HelloWorld</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #333333\">.h(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"Hello\"</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgjBKN0BTAEwDFUAbIgLlFQDsSiAPAOgCtJsxwuWyAQwDG6WACcAnnWg8IDWInHiJ3HOHSDxAcyLo6RSA1ZZ1yWCQCu1OsNjJzDLpkypkABwnpQAb1DQAGlAycUFtZCIGbwBfUAAzFWRQACJ3cSIRdGSAbhc7BkhvAAkiSkpYAHUJShJQAF5QAAoASnqAPlAAHhJUADc2krLYTuAe-uygA'>Try</a></div></pre>\n<p>This option can be used on a per-file basis too similar to <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">Babelâ€™s <code>/** @jsx h */</code> directive</a>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsx</span><span style=\"color: #008000\"> h */</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) function h(type: string, props: (JSXInternal.HTMLAttributes &amp;amp; JSXInternal.SVGAttributes &amp;amp; Record&amp;lt;string, any>) | null, ...children: ComponentChildren[]): VNode&amp;lt;any> (+1 overload)&amp;#13;(alias) namespace h&amp;#13;import h'>h</data-lsp></span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const HelloWorld: () => h.JSX.Element'>HelloWorld</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #800000\">&lt;<data-lsp lsp='(property) JSXInternal.IntrinsicElements.div: h.JSX.HTMLAttributes&amp;lt;HTMLDivElement>'>div</data-lsp>></span><span style=\"color: #333333\">Hello</span><span style=\"color: #800000\">&lt;/<data-lsp lsp='(property) JSXInternal.IntrinsicElements.div: h.JSX.HTMLAttributes&amp;lt;HTMLDivElement>'>div</data-lsp>></span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PQKhAIAECsGcA9wAtwmAKAJYFsAOB7AJwBdwBvZcAX3ADND9twAiXQgUwEMBjY5gbnTpu+AHaxSACXYAbGfgDqRGQBNwAXnAAKAJQaAfOAA8KzADd90ufiPBTF-kA'>Try</a></div></pre>\n<p>The factory chosen will also affect where the <code>JSX</code> namespace is looked up (for type checking information) before falling back to the global one.</p>\n<p>If the factory is defined as <code>React.createElement</code> (the default), the compiler will check for <code>React.JSX</code> before checking for a global <code>JSX</code>. If the factory is defined as <code>h</code>, it will check for <code>h.JSX</code> before a global <code>JSX</code>.</p>","redirectHref":"/tsconfig#jsxFactory"}},"staticQueryHashes":[]}