{"componentChunkName":"component---src-templates-tsconfig-reference-tsx","path":"/it/tsconfig","result":{"data":{"markdownRemark":{"id":"317ed108-0bcd-559c-8ebb-5d84e743dfec","html":"<h2>Introduzione alla TSConfig Reference</h2>\n<p>Un file TSConfig in una cartella indica che la cartella in questione è la root di un progetto TypeScript o JavaScript. Il file TSConfig può essere sia un <code>tsconfig.json</code> che <code>jsconfig.json</code>, entrambi hanno la stessa forma e le stesse variabili di configurazione.</p>\n<p>Questa pagina copre tutte le diverse variabili disponibili in un file TSConfig. Esso inizia con un introduzione su ogni variabile, poi si addentra negli attributi principali del file JSON, poi prosegue con il <code>compilerOptions</code> che comprende la maggior parte delle opzioni e delle conclusioni con <code>watchOptions</code>.</p>\n<div id='full-option-list' class='indent'>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Project_Files_0>File Inclusion</a></h5>\n<ul>\n<li><a href=#exclude>exclude</a></li>\n<li><a href=#extends>extends</a></li>\n<li><a href=#files>files</a></li>\n<li><a href=#include>include</a></li>\n<li><a href=#references>references</a></li>\n<li><a href=#typeAcquisition>typeAcquisition</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Basic_Options_6172>Project Options</a></h5>\n<ul>\n<li><a href=#allowJs>allowJs</a></li>\n<li><a href=#checkJs>checkJs</a></li>\n<li><a href=#composite>composite</a></li>\n<li><a href=#declaration>declaration</a></li>\n<li><a href=#declarationMap>declarationMap</a></li>\n<li><a href=#downlevelIteration>downlevelIteration</a></li>\n<li><a href=#importHelpers>importHelpers</a></li>\n<li><a href=#incremental>incremental</a></li>\n<li><a href=#isolatedModules>isolatedModules</a></li>\n<li><a href=#jsx>jsx</a></li>\n<li><a href=#lib>lib</a></li>\n<li><a href=#module>module</a></li>\n<li><a href=#noEmit>noEmit</a></li>\n<li><a href=#outDir>outDir</a></li>\n<li><a href=#outFile>outFile</a></li>\n<li><a href=#plugins>plugins</a></li>\n<li><a href=#removeComments>removeComments</a></li>\n<li><a href=#rootDir>rootDir</a></li>\n<li><a href=#sourceMap>sourceMap</a></li>\n<li><a href=#target>target</a></li>\n<li><a href=#tsBuildInfoFile>tsBuildInfoFile</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Strict_Type_Checking_Options_6173>Strict Checks</a></h5>\n<ul>\n<li><a href=#alwaysStrict>alwaysStrict</a></li>\n<li><a href=#noImplicitAny>noImplicitAny</a></li>\n<li><a href=#noImplicitThis>noImplicitThis</a></li>\n<li><a href=#strict>strict</a></li>\n<li><a href=#strictBindCallApply>strictBindCallApply</a></li>\n<li><a href=#strictFunctionTypes>strictFunctionTypes</a></li>\n<li><a href=#strictNullChecks>strictNullChecks</a></li>\n<li><a href=#strictPropertyInitialization>strictPropertyInitialization</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Module_Resolution_Options_6174>Module Resolution</a></h5>\n<ul>\n<li><a href=#allowSyntheticDefaultImports>allowSyntheticDefaultImports</a></li>\n<li><a href=#allowUmdGlobalAccess>allowUmdGlobalAccess</a></li>\n<li><a href=#baseUrl>baseUrl</a></li>\n<li><a href=#esModuleInterop>esModuleInterop</a></li>\n<li><a href=#moduleResolution>moduleResolution</a></li>\n<li><a href=#paths>paths</a></li>\n<li><a href=#preserveSymlinks>preserveSymlinks</a></li>\n<li><a href=#rootDirs>rootDirs</a></li>\n<li><a href=#typeRoots>typeRoots</a></li>\n<li><a href=#types>types</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Source_Map_Options_6175>Source Maps</a></h5>\n<ul>\n<li><a href=#inlineSourceMap>inlineSourceMap</a></li>\n<li><a href=#inlineSources>inlineSources</a></li>\n<li><a href=#mapRoot>mapRoot</a></li>\n<li><a href=#sourceRoot>sourceRoot</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Additional_Checks_6176>Linter Checks</a></h5>\n<ul>\n<li><a href=#noFallthroughCasesInSwitch>noFallthroughCasesInSwitch</a></li>\n<li><a href=#noImplicitReturns>noImplicitReturns</a></li>\n<li><a href=#noPropertyAccessFromIndexSignature>noPropertyAccessFromIndexSignature</a></li>\n<li><a href=#noUncheckedIndexedAccess>noUncheckedIndexedAccess</a></li>\n<li><a href=#noUnusedLocals>noUnusedLocals</a></li>\n<li><a href=#noUnusedParameters>noUnusedParameters</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Experimental_Options_6177>Experimental</a></h5>\n<ul>\n<li><a href=#emitDecoratorMetadata>emitDecoratorMetadata</a></li>\n<li><a href=#experimentalDecorators>experimentalDecorators</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Command_line_Options_6171>Command Line</a></h5>\n<ul>\n<li><a href=#preserveWatchOutput>preserveWatchOutput</a></li>\n<li><a href=#pretty>pretty</a></li>\n</ul></div>\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Watch_Options_999>Watch Options</a></h5>\n<ul>\n<li><a href=#fallbackPolling>fallbackPolling</a></li>\n<li><a href=#watchDirectory>watchDirectory</a></li>\n<li><a href=#watchFile>watchFile</a></li>\n</ul></div>\n<br />\n<div class=\"tsconfig-nav-top\">\n<h5><a href=#Advanced_Options_6178>Advanced</a></h5>\n<ul>\n<li><a href=#allowUnreachableCode>allowUnreachableCode</a></li>\n<li><a href=#allowUnusedLabels>allowUnusedLabels</a></li>\n<li><a href=#assumeChangesOnlyAffectDirectDependencies>assumeChangesOnlyAffectDirectDependencies</a></li>\n<li><a href=#charset>charset</a></li>\n<li><a href=#declarationDir>declarationDir</a></li>\n<li><a href=#diagnostics>diagnostics</a></li>\n<li><a href=#disableReferencedProjectLoad>disableReferencedProjectLoad</a></li>\n<li><a href=#disableSizeLimit>disableSizeLimit</a></li>\n<li><a href=#disableSolutionSearching>disableSolutionSearching</a></li>\n<li><a href=#disableSourceOfProjectReferenceRedirect>disableSourceOfProjectReferenceRedirect</a></li>\n</ul>\n</div>\n<div class=\"tsconfig-nav-top\">\n<h5>&nbsp;</h5>\n<ul>\n<li><a href=#emitBOM>emitBOM</a></li>\n<li><a href=#emitDeclarationOnly>emitDeclarationOnly</a></li>\n<li><a href=#explainFiles>explainFiles</a></li>\n<li><a href=#extendedDiagnostics>extendedDiagnostics</a></li>\n<li><a href=#forceConsistentCasingInFileNames>forceConsistentCasingInFileNames</a></li>\n<li><a href=#generateCpuProfile>generateCpuProfile</a></li>\n<li><a href=#importsNotUsedAsValues>importsNotUsedAsValues</a></li>\n<li><a href=#jsxFactory>jsxFactory</a></li>\n<li><a href=#jsxFragmentFactory>jsxFragmentFactory</a></li>\n<li><a href=#jsxImportSource>jsxImportSource</a></li>\n</ul>\n</div>\n<div class=\"tsconfig-nav-top\">\n<h5>&nbsp;</h5>\n<ul>\n<li><a href=#keyofStringsOnly>keyofStringsOnly</a></li>\n<li><a href=#listEmittedFiles>listEmittedFiles</a></li>\n<li><a href=#listFiles>listFiles</a></li>\n<li><a href=#maxNodeModuleJsDepth>maxNodeModuleJsDepth</a></li>\n<li><a href=#newLine>newLine</a></li>\n<li><a href=#noEmitHelpers>noEmitHelpers</a></li>\n<li><a href=#noEmitOnError>noEmitOnError</a></li>\n<li><a href=#noErrorTruncation>noErrorTruncation</a></li>\n<li><a href=#noImplicitUseStrict>noImplicitUseStrict</a></li>\n<li><a href=#noLib>noLib</a></li>\n</ul>\n</div>\n<div class=\"tsconfig-nav-top\">\n<h5>&nbsp;</h5>\n<ul>\n<li><a href=#noResolve>noResolve</a></li>\n<li><a href=#noStrictGenericChecks>noStrictGenericChecks</a></li>\n<li><a href=#out>out</a></li>\n<li><a href=#preserveConstEnums>preserveConstEnums</a></li>\n<li><a href=#reactNamespace>reactNamespace</a></li>\n<li><a href=#resolveJsonModule>resolveJsonModule</a></li>\n<li><a href=#skipDefaultLibCheck>skipDefaultLibCheck</a></li>\n<li><a href=#skipLibCheck>skipLibCheck</a></li>\n<li><a href=#stripInternal>stripInternal</a></li>\n<li><a href=#suppressExcessPropertyErrors>suppressExcessPropertyErrors</a></li>\n</ul>\n</div>\n<div class=\"tsconfig-nav-top\">\n<h5>&nbsp;</h5>\n<ul>\n<li><a href=#suppressImplicitAnyIndexErrors>suppressImplicitAnyIndexErrors</a></li>\n<li><a href=#traceResolution>traceResolution</a></li>\n<li><a href=#useDefineForClassFields>useDefineForClassFields</a></li>\n</ul>\n</div>\n</div>\n<article id='top_level'>\n<h3 id=\"campi-principali\" style=\"position:relative;\"><a href=\"#campi-principali\" aria-label=\"campi principali permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Campi principali</h3>\n<p>Le principali opzioni sono nel TSConfig - queste opzioni spiegano come il tuo progetto TypeScript o JavaScript è impostato.</p>\n<div class='indent'>\n<div class='category'>\n<h2 id='Project_Files_0' ><a href='#Project_Files_0' name='Project_Files_0' aria-label=\"Link to the section File Inclusion\" aria-labelledby='Project_Files_0'>#</a>File Inclusion</h2>\n<p>These settings help you ensure that TypeScript picks up the right files.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='exclude-config'><a aria-label=\"Link to the compiler option: exclude\" id='exclude' href='#exclude' name='exclude' aria-labelledby=\"exclude-config\">#</a> Exclude - <code>exclude</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an array of filenames or patterns that should be skipped when resolving <code>include</code>.</p>\n<p><strong>Important</strong>: <code>exclude</code> <em>only</em> changes which files are included as a result of the <code>include</code> setting.\nA file specified by <code>exclude</code> can still become part of your codebase due to an <code>import</code> statement in your code, a <code>types</code> inclusion, a <code>/// &#x3C;reference</code> directive, or being specified in the <code>files</code> list.</p>\n<p>It is not a mechanism that <strong>prevents</strong> a file from being included in the codebase - it simply changes what the <code>include</code> setting finds.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>[\"node_modules\", \"bower_components\", \"jspm_packages\"]</code>, plus the value of <code>outDir</code> if one is specified.</p>\n</li>\n<li><span>Related:</span><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a>, <a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extends-config'><a aria-label=\"Link to the compiler option: extends\" id='extends' href='#extends' name='extends' aria-labelledby=\"extends-config\">#</a> Extends - <code>extends</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The value of <code>extends</code> is a string which contains a path to another configuration file to inherit from.\nThe path may use Node.js style resolution.</p>\n<p>The configuration from the base file are loaded first, then overridden by those in the inheriting config file. All relative paths found in the configuration file will be resolved relative to the configuration file they originated in.</p>\n<p>It’s worth noting that <code>files</code>, <code>include</code> and <code>exclude</code> from the inheriting config file <em>overwrite</em> those from the\nbase config file, and that circularity between configuration files is not allowed.</p>\n<p>Currently, the only top-level property that is excluded from inheritance is <a href=\"#references\"><code>references</code></a>.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<p><code>configs/base.json</code>:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#noImplicitAny'><data-lsp lsp=\"Enable error reporting for expressions and declarations with an implied `any` type..\">noImplicitAny</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#strictNullChecks'><data-lsp lsp=\"When type checking, take into account `null` and `undefined`.\">strictNullChecks</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p><code>tsconfig.json</code>:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#extends'><data-lsp lsp=\"Specify one or more path or node module references to base configuration files from which settings are inherited.\">extends</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"./configs/base\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#files'><data-lsp lsp=\"Include a list of files. This does not support glob patterns, as opposed to `include`.\">files</data-lsp></a>\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"main.ts\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"supplemental.ts\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p><code>tsconfig.nostrictnull.json</code>:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#extends'><data-lsp lsp=\"Specify one or more path or node module references to base configuration files from which settings are inherited.\">extends</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"./tsconfig\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#strictNullChecks'><data-lsp lsp=\"When type checking, take into account `null` and `undefined`.\">strictNullChecks</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Properties with relative paths found in the configuration file, which aren’t excluded from inheritance, will be resolved relative to the configuration file they originated in.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='files-config'><a aria-label=\"Link to the compiler option: files\" id='files' href='#files' name='files' aria-labelledby=\"files-config\">#</a> Files - <code>files</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an allowlist of files to include in the program. An error occurs if any of the files can’t be found.</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {},</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#files'><data-lsp lsp=\"Include a list of files. This does not support glob patterns, as opposed to `include`.\">files</data-lsp></a>\"</span><span style=\"color: #333333\">: [</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"core.ts\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"sys.ts\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"types.ts\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"scanner.ts\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"parser.ts\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"utilities.ts\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"binder.ts\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"checker.ts\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"tsc.ts\"</span>\n<span style=\"color: #333333\">  ]</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>This is useful when you only have a small number of files and don’t need to use a glob to reference many files.\nIf you need that then use <a href=\"#include\"><code>include</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#include' aria-label=\"Jump to compiler option info for include\" ><code>include</code></a>, <a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='include-config'><a aria-label=\"Link to the compiler option: include\" id='include' href='#include' name='include' aria-labelledby=\"include-config\">#</a> Include - <code>include</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specifies an array of filenames or patterns to include in the program.\nThese filenames are resolved relative to the directory containing the <code>tsconfig.json</code> file.</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"src/**/*\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"tests/**/*\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Which would include:</p>\n<!-- TODO: #135\n```diff\n  .\n- ├── scripts\n- │   ├── lint.ts\n- │   ├── update_deps.ts\n- │   └── utils.ts\n+ ├── src\n+ │   ├── client\n+ │   │    ├── index.ts\n+ │   │    └── utils.ts\n+ │   ├── server\n+ │   │    └── index.ts\n+ ├── tests\n+ │   ├── app.test.ts\n+ │   ├── utils.ts\n+ │   └── tests.d.ts\n- ├── package.json\n- ├── tsconfig.json\n- └── yarn.lock\n``` -->\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">.\n├── scripts                ⨯\n│   ├── lint.ts            ⨯\n│   ├── update_deps.ts     ⨯\n│   └── utils.ts           ⨯\n├── src                    ✓\n│   ├── client             ✓\n│   │    ├── index.ts      ✓\n│   │    └── utils.ts      ✓\n│   ├── server             ✓\n│   │    └── index.ts      ✓\n├── tests                  ✓\n│   ├── app.test.ts        ✓\n│   ├── utils.ts           ✓\n│   └── tests.d.ts         ✓\n├── package.json\n├── tsconfig.json\n└── yarn.lock</span></code></div></pre>\n<p><code>include</code> and <code>exclude</code> support wildcard characters to make glob patterns:</p>\n<ul>\n<li><code>*</code> matches zero or more characters (excluding directory separators)</li>\n<li><code>?</code> matches any one character (excluding directory separators)</li>\n<li><code>**/</code> matches any directory nested to any level</li>\n</ul>\n<p>If a glob pattern doesn’t include a file extension, then only files with supported extensions are included (e.g. <code>.ts</code>, <code>.tsx</code>, and <code>.d.ts</code> by default, with <code>.js</code> and <code>.jsx</code> if <code>allowJs</code> is set to true).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> <code>[]</code> if <code>files</code> is specified, otherwise <code>[\"**/*\"]</code></p>\n</li>\n<li><span>Related:</span><p><a href='#files' aria-label=\"Jump to compiler option info for files\" ><code>files</code></a>, <a href='#exclude' aria-label=\"Jump to compiler option info for exclude\" ><code>exclude</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='references-config'><a aria-label=\"Link to the compiler option: references\" id='references' href='#references' name='references' aria-labelledby=\"references-config\">#</a> References - <code>references</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Project references are a way to structure your TypeScript programs into smaller pieces.\nUsing Project References can greatly improve build and editor interaction times, enforce logical separation between components, and organize your code in new and improved ways.</p>\n<p>You can read more about how references works in the <a href=\"/docs/handbook/project-references.html\">Project References</a> section of the handbook</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeAcquisition-config'><a aria-label=\"Link to the compiler option: typeAcquisition\" id='typeAcquisition' href='#typeAcquisition' name='typeAcquisition' aria-labelledby=\"typeAcquisition-config\">#</a> Type Acquisition - <code>typeAcquisition</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When you have a JavaScript project in your editor, TypeScript will provide types for your <code>node_modules</code> automatically using the DefinitelyTyped set of <code>@types</code> definitions.\nThis is called automatic type acquisition, and you can customize it using the <code>typeAcquisition</code> object in your configuration.</p>\n<p>If you would like to disable or customize this feature, create a <code>jsconfig.json</code> in the root of your project:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"enable\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>If you have a specific module which should be included (but isn’t in <code>node_modules</code>):</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"include\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>If a module should not be automatically acquired, for example if the library is available in your <code>node_modules</code> but your team has agreed to not use it:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"exclude\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"jquery\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>In TypeScript 4.1, we added the ability to disable the special-casing where a filename would trigger type acquisition:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"typeAcquisition\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"disableFilenameBasedTypeAcquisition\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>This means that having a file like <code>jquery.js</code> in your project would not automatically download the types for JQuery from DefinitelyTyped.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n</div>\n</article>\n<article id='compilerOptions'>\n<h3 id=\"opzioni-del-compilatore\" style=\"position:relative;\"><a href=\"#opzioni-del-compilatore\" aria-label=\"opzioni del compilatore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Opzioni del Compilatore</h3>\n<p>Queste opzioni espicitano la configurazione di TypeScript e spiegano come il linguaggio dovrebbe funzionare.</p>\n<nav id=\"sticky\"><ul>\n<li><a href=\"#Basic_Options_6172\">Project Options</a></li>\n<li><a href=\"#Strict_Type_Checking_Options_6173\">Strict Checks</a></li>\n<li><a href=\"#Module_Resolution_Options_6174\">Module Resolution</a></li>\n<li><a href=\"#Source_Map_Options_6175\">Source Maps</a></li>\n<li><a href=\"#Additional_Checks_6176\">Linter Checks</a></li>\n<li><a href=\"#Experimental_Options_6177\">Experimental</a></li>\n<li><a href=\"#Advanced_Options_6178\">Advanced</a></li>\n<li><a href=\"#Command_line_Options_6171\">Command Line</a></li>\n</ul></nav>\n<div class='indent'>\n<div class='category'>\n<h2 id='Basic_Options_6172' ><a href='#Basic_Options_6172' name='Basic_Options_6172' aria-label=\"Link to the section Project Options\" aria-labelledby='Basic_Options_6172'>#</a>Project Options</h2>\n<p>These settings are used to define the runtime expectations of your project, how and where you want the JavaScript to be emitted and the level of integration you want with existing JavaScript code.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowJs-config'><a aria-label=\"Link to the compiler option: allowJs\" id='allowJs' href='#allowJs' name='allowJs' aria-labelledby=\"allowJs-config\">#</a> Consentire JS - <code>allowJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Si può consentire ai file JavaScript di poter essere importati nel tuo progetto TypeScript. Per esempio, questo file JS:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @filename: carta.js</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const seme: &amp;quot;Cuori&amp;quot;'>seme</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Cuori\"</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgC7IB0AVgM4BQ8AHgA4D2hODi5Bo586oAvKACIAwgFcm0AQG4gA'>Try</a></div></pre>\n<p>Quando lo importi in un file TypeScript ti uscirà un errore:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) seme: string&amp;#13;import seme'>seme</data-lsp></span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./carta\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #333333\">.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) seme: string&amp;#13;import seme'>seme</data-lsp></span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAMB2AUCBAGYCWANpAHYCGAtpKgMbXQAu1AdAFaJ61wATAK4UOkAB4AHBK0QdEkeqAC8oAEQBhIQhJqA3ATABaE4yGsTRw8XJU6DUCUoCJHWXhK1pbUAG9QCkoAvqBE8LTqHMDMbNT6eHiMcJSIcKJkcADmABSBkACUekA'>Try</a></div></pre>\n<p>Ma verrà importato senza errori con <code>allowJs</code> abilitato:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) seme: string&amp;#13;import seme'>seme</data-lsp></span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./carta\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp></span><span style=\"color: #333333\">.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) seme: string&amp;#13;import seme'>seme</data-lsp></span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgC7IB0AVgM4BQqA9gCYCuCx8AHgA42HnHnzqgAvKABEAYQZdoIgNyUQoALTLsDAssXyw4ZLFg0A7gCkqCqHCRpMoaIjptiBKtFSdCoAN6g+AgL6hIPBpUUWJgXEJkWUpKbBpEchpmfQBzAAofeABKGSA'>Try</a></div></pre>\n<p>Questa opzione può essere usata come metodo per aggiungere file TypeScript in progetti JS permettendo ai file <code>.ts</code> e <code>.tsx</code> di coesistere con i file JavaScript esistenti.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#checkJs' aria-label=\"Jump to compiler option info for checkJs\" ><code>checkJs</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='checkJs-config'><a aria-label=\"Link to the compiler option: checkJs\" id='checkJs' href='#checkJs' name='checkJs' aria-labelledby=\"checkJs-config\">#</a> Controllo JS - <code>checkJs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Funziona insieme a <code>allowJs</code>. Quando <code>checkJs</code> è abilitato gli errori sono segnalati all’interno del file JavaScript. Questo sarebbe l’equivalente di includere <code>// @ts-check</code> all’inizio di ogni file JavaScript che è incluso nel tuo progetto.</p>\n<p>Per esempio, questo codice JavaScript è errato secondo la definizione del tipo <code>parseFloat</code> che è presente su TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// parseFloat riceve solo una stringa</span>\n<span style=\"color: #333333\">module.exports.</span><span style=\"color: #1A1A1A\">pi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> parseFloat(</span><span style=\"color: #09835A\">3.124</span><span style=\"color: #333333\">);</span></code></div></pre>\n<p>Quando viene importato in un modulo TypeScript:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @filename: costanti.js</span>\n<span style=\"color: #333333\"><data-lsp lsp='var module: {&amp;#13;    &amp;quot;\\&amp;quot;/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/costanti\\&amp;quot;&amp;quot;: typeof import(&amp;quot;/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/costanti&amp;quot;);&amp;#13;}'>module</data-lsp>.<data-lsp lsp='module &amp;quot;/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/costanti&amp;quot;'>exports</data-lsp>.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) pi: number'>pi</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function parseFloat(string: string): number'>parseFloat</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">3.124</span><span style=\"color: #333333\">);</span>\n\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./costanti\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEEMBtoewO4CkDOAoEEBmBLaBTAO0gFt8AuUAYzhQBdJC6cA6AK3RLgBMBXAlvgAeABzgAnOihYicoALygRkcSnwAxeJDoAKAMwsAjACYALAEoA3GgxhwuAsTKUchbsJZS0OEmMmgAbyU5AF9QLHE4ElAAIhZgGnpGZhjrGkIUOAF4AHMdWSsgA'>Try</a></div></pre>\n<p>Non verranno segnalati errori. Tuttavia, se abiliti <code>checkJs</code> riceverai un messaggio di errore dal file JavaScript.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @filename: costanti.js</span>\n<span class=\"error\"><span>Argument of type 'number' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'number' is not assignable to parameter of type 'string'.</span><span style=\"color: #333333\"><data-lsp lsp='var module: {&amp;#13;    &amp;quot;\\&amp;quot;/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/costanti\\&amp;quot;&amp;quot;: typeof import(&amp;quot;/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/costanti&amp;quot;);&amp;#13;}'>module</data-lsp>.<data-lsp lsp='module &amp;quot;/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/costanti&amp;quot;'>exports</data-lsp>.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) pi: number'>pi</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function parseFloat(string: string): number'>parseFloat</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">3.124</span><span style=\"color: #333333\">);</span>\n\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./costanti\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) (property) pi: number&amp;#13;import pi'>pi</data-lsp></span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUCBAIYA2JcA7gFYqgAu0ArpAWOAMYAWk7A1jagbNWEAGYBLEpAB2RALaRU7OIjpFpdcQDoaeOXAAmjKVsgAPAA4I6iLRfGgAvKAtEkkAGLkidABQYtAEY0LABKAG48EXAJKVkFVHFpA3MtGzxxOStoOlAAbxcHAF9QUXg5UAAiLWBlVXVNSsjlaUQ4E3IAc197CKA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#allowJs' aria-label=\"Jump to compiler option info for allowJs\" ><code>allowJs</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='composite-config'><a aria-label=\"Link to the compiler option: composite\" id='composite' href='#composite' name='composite' aria-labelledby=\"composite-config\">#</a> Componi - <code>composite</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>L’opzione <code>composite</code> applica delle regole che permettono agli strumenti di build (incluso Typescript stesso, sotto <code>--build</code> mode) di determinare velocemente se un progetto è già stato compilato.</p>\n<p>Quando esso è attivato:</p>\n<ul>\n<li>L’opzione <code>rootDir</code>, se non impostata esplicitamente, imposta in modo predefinito la cartella in cui si trova il <code>tsconfig.json</code> file.</li>\n<li>Tutti i file implementati devono corrispondere ad un <code>include</code> o devono essere indicati nell’array <code>files</code>. Se questa regola non viene rispettata, <code>tsc</code> ti informerà su quali file non sono stati specificati.</li>\n<li><code>declaration</code> è predefinito su <code>true</code></li>\n</ul>\n<p>Puoi trovare la documentazione sui progetti TypeScript nella <a href=\"https://www.typescriptlang.org/docs/handbook/project-references.html\">guida</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code></p>\n</li>\n<li><span>Related:</span><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a>, <a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.0\" href=\"/docs/handbook/release-notes/typescript-3-0.html\">3.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declaration-config'><a aria-label=\"Link to the compiler option: declaration\" id='declaration' href='#declaration' name='declaration' aria-labelledby=\"declaration-config\">#</a> Dichiarazione - <code>declaration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Si possono creare dei file <code>.d.ts</code> per ogni file TypeScript o JavaScript all’interno del tuo progetto.\nQuesti file <code>.d.ts</code> contengono delle definizioni dei file che descrivono l’API esterna al tuo modulo.\nCon i file <code>.d.ts</code>, strumenti come TypeScript possono dare intellisense e suggerimenti sui tipi per il codice senza tipo.</p>\n<p>Quando <code>declaration</code> è impostato su <code>true</code>, eseguendo il compilatore con questo codice TypeScript:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let ciaoMondo: string'>ciaoMondo</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Ciao!\"</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBAG2PAxgSwIYQLIQHYAmEcAvHAEQDCmEAhOQNxA'>Try</a></div></pre>\n<p>Esso genererà un file <code>index.js</code> come questo:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ciaoMondo </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Ciao!\"</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAFMAeAHWAJ3VABttSBjVAQ1gFlYA7AE1lAF5QAiAYTqwAhDwDcQA'>Try</a></div></pre>\n<p>Con un corrispondente <code>ciaoMondo.d.ts</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">let</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ciaoMondo</span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCi1oAHWKPShiygamGwAstJywykdKMoBzANxA'>Try</a></div></pre>\n<p>Quando si lavora con i file <code>.d.ts</code> insieme ai file JavaScript potresti voler usare <a href=\"#emitDeclarationOnly\"><code>emitDeclarationOnly</code></a> o <a href=\"#outDir\"><code>outDir</code></a> per essere sicuro che i file JavaScript non vengano sovrascritti.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#declarationDir' aria-label=\"Jump to compiler option info for declarationDir\" ><code>declarationDir</code></a>, <a href='#emitDeclarationOnly' aria-label=\"Jump to compiler option info for emitDeclarationOnly\" ><code>emitDeclarationOnly</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationMap-config'><a aria-label=\"Link to the compiler option: declarationMap\" id='declarationMap' href='#declarationMap' name='declarationMap' aria-labelledby=\"declarationMap-config\">#</a> Mappa delle dichiarazioni - <code>declarationMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Crea una source map per i file <code>.d.ts</code> che riportano al file originale <code>.ts</code>.\nQuesto permetterà agli editor come ad esempio VS Code di andare nel file <code>.ts</code> originale quando si usano funzioni tipo <em>Vai alla definizione</em>.</p>\n<p>Dovresti prendere seriamente in considerazione di abilitare questa funzione se stai usando le project references.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='downlevelIteration-config'><a aria-label=\"Link to the compiler option: downlevelIteration\" id='downlevelIteration' href='#downlevelIteration' name='downlevelIteration' aria-labelledby=\"downlevelIteration-config\">#</a> Iterazione di livello inferiore - <code>downlevelIteration</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Iterazione di livello inferiore, o Downleveling, è un termine di TypeScript utilizzato per migrare verso una versione precedente di JavaScript. Questa flag permette quindi di supportare una più accurata implementazione di come il JavaScript moderno itera i nuovi concetti in versioni precedenti di JavaScript in runtime.</p>\n<p>ECMAScript 6 aggiunge una serie di nuove iterazioni primitive: il <code>for / of</code> loop (<code>for (el of arr)</code>), spread di Array (<code>[a, ...b]</code>), spread di argomenti (<code>fn (... args)</code>) e <a href=\"https://medium.com/trainingcenter/iterators-em-javascript-880adef14495\"><code>Symbol.iterator</code></a>.<code>--downlevelIteration</code> permette a queste iterazioni primitive di essere utilizzate in modo più accurrato in un ambiente ES5 se un’implementazione di <a href=\"https://medium.com/trainingcenter/iterators-em-javascript-880adef14495\"><code>Symbol.iterator</code></a> è presente.</p>\n<h4 id=\"esempio-effetti-su-for--of\" style=\"position:relative;\"><a href=\"#esempio-effetti-su-for--of\" aria-label=\"esempio effetti su for  of permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Esempio: Effetti su <code>for / of</code></h4>\n<p>Con questo codice TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Ciao!\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">for</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">of</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\">console</span><span style=\"color: #333333\">.log(</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Senza <code>downlevelIteration</code> attivo, un loop <code>for / of</code> su un qualsiasi oggetto viene convertito in un tradizionale <code>for</code> loop:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Ciao!\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">for</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">_i </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">str_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str</span><span style=\"color: #333333\">; </span><span style=\"color: #1A1A1A\">_i</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&lt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #333333\">.length; </span><span style=\"color: #1A1A1A\">_i</span><span style=\"color: #000000\">++</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">s </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">_i</span><span style=\"color: #333333\">];</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBAM4AWA9gO7oC2AlpLgMakB2hkobsoAvKAEQBhGtFIBCPgG5cAM1JcAFE1btCoUtI6RYASlABvXKFBLCpADaIAdGdLx5hbVIC+QA'>Try</a></div></pre>\n<p>Generalmente tutti si aspettano questo, tuttavia non è compatibile al 100% con il protocollo di iterazione ECMAScript 6. Certe string, ad esempio un emoji (😜), hanno un <code>.length</code> di 2 (o anche di più!), ma dovrebbero iterare come 1 unità in un <code>for-of</code> loop. Guarda <a href=\"https://blog.jonnew.com/posts/poo-dot-length-equals-two\">questo blog post di Jonathan New</a> per una spiegazione più dettagliata.</p>\n<p>Quando <code>downlevelIteration</code> è attivo, TypeScript utilizzerà una funzione ausiliaria che andrà a controllare la presenza di un <code>Symbol.iterator</code> (che può essere di tipo nativo o polyfill). Nel caso in cui questa implementazione non ci sia, ritornerai ad un’iterazione index-based.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__values </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__values</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">s </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> Symbol </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> Symbol.</span><span style=\"color: #1A1A1A\">iterator</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">m </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #333333\">], </span><span style=\"color: #1A1A1A\">i </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">m.call</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">.length </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">        next: </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> () {</span>\n<span style=\"color: #333333\">            </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">.length) </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">            </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> { value: </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">++</span><span style=\"color: #333333\">], done: </span><span style=\"color: #000000\">!</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\"> };</span>\n<span style=\"color: #333333\">        }</span>\n<span style=\"color: #333333\">    };</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">TypeError</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Object is not iterable.\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Symbol.iterator is not defined.\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">_a</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Ciao!\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">try</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">for</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__values</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">str</span><span style=\"color: #333333\">), </span><span style=\"color: #1A1A1A\">str_1_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1.next</span><span style=\"color: #333333\">(); </span><span style=\"color: #000000\">!</span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #333333\">; </span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1.next</span><span style=\"color: #333333\">()) {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">s </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">}</span>\n<span style=\"color: #0000FF\">catch</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">e_1_1</span><span style=\"color: #333333\">) { </span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> { error: </span><span style=\"color: #1A1A1A\">e_1_1</span><span style=\"color: #333333\"> }; }</span>\n<span style=\"color: #0000FF\">finally</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">try</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">!</span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">_a</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">return</span><span style=\"color: #333333\">)) </span><span style=\"color: #1A1A1A\">_a.call</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">finally</span><span style=\"color: #333333\"> { </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">error</span><span style=\"color: #333333\">; }</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBACYD2A7gHYA2iAbopQJKSKzSQCWx5+Y4AzgAsy6ALbtIuAMZc+kULNigAvKABEAYXbRiAQlUBuXADNiigBTTys+aGJH5kWAEpQAb1yhQlvsWoA6SmJ4Mz4nQwBfIA'>Try</a></div></pre>\n<p>Puoi utilizzare <a href=\"https://www.npmjs.com/package/tslib\">tslib</a> via <a href=\"#importHelpers\">importHelpers</a> in modo da ridurre il numero di righe inline Javascript:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__values </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__values</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">s </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> Symbol </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> Symbol.</span><span style=\"color: #1A1A1A\">iterator</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">m </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #333333\">], </span><span style=\"color: #1A1A1A\">i </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">m.call</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">.length </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"number\"</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">        next: </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> () {</span>\n<span style=\"color: #333333\">            </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">.length) </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">            </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> { value: </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">++</span><span style=\"color: #333333\">], done: </span><span style=\"color: #000000\">!</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\"> };</span>\n<span style=\"color: #333333\">        }</span>\n<span style=\"color: #333333\">    };</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">TypeError</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Object is not iterable.\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Symbol.iterator is not defined.\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">_a</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Ciao!\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">try</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">for</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__values</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">str</span><span style=\"color: #333333\">), </span><span style=\"color: #1A1A1A\">str_1_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1.next</span><span style=\"color: #333333\">(); </span><span style=\"color: #000000\">!</span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #333333\">; </span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1.next</span><span style=\"color: #333333\">()) {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">s </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">s</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">}</span>\n<span style=\"color: #0000FF\">catch</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">e_1_1</span><span style=\"color: #333333\">) { </span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> { error: </span><span style=\"color: #1A1A1A\">e_1_1</span><span style=\"color: #333333\"> }; }</span>\n<span style=\"color: #0000FF\">finally</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">try</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">!</span><span style=\"color: #1A1A1A\">str_1_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">_a</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">return</span><span style=\"color: #333333\">)) </span><span style=\"color: #1A1A1A\">_a.call</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">str_1</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">finally</span><span style=\"color: #333333\"> { </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">e_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">error</span><span style=\"color: #333333\">; }</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBACYD2A7gHYA2iAbopQJKSKzSQCWx5+Y47AtgAdisSAAl6glgGceEaQAsy6fu0i4Axl2mRQO2KAC8oAEQBhdtGIBCEwG5cAMxGgAFFvI69oYo72RYAEpQAG9cUFAPaWJqADpKYnhXaUCHAF8gA'>Try</a></div></pre>\n<blockquote>\n<blockquote>\n<p><strong>Nota:</strong> attivare <code>downlevelIteration</code> non andrà a migliorare le prestazioni di compliazione se <code>Symbol.iterator</code> non è presente in runtime.</p>\n</blockquote>\n</blockquote>\n<h4 id=\"esempio-effetti-sullo-spray-di-array\" style=\"position:relative;\"><a href=\"#esempio-effetti-sullo-spray-di-array\" aria-label=\"esempio effetti sullo spray di array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Esempio: Effetti sullo spray di Array</h4>\n<p>Questo è un spread di array:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// Crea un nuovo array composto dall'elemento 1 seguito dagli elementi di arr2</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">, </span><span style=\"color: #000000\">...</span><span style=\"color: #1A1A1A\">arr2</span><span style=\"color: #333333\">];</span></code></div></pre>\n<p>Secondo la descrizione, sembra facile convertirlo in ES5:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// Stessa cosa, no?</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">].concat(</span><span style=\"color: #1A1A1A\">arr2</span><span style=\"color: #333333\">);</span></code></div></pre>\n<p>Tuttavia, questo è visibilmente diverso in certi rari casi. Ad esempio, nel caso un array abbia un “buco”, l’index mancante andrà a creare una proprietà <em>own</em> nel caso si decida di applicare uno spread, ma non se creato utilizzando <code>.concat</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// Crea un array dove manca l'elemento '1'</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">mancante</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, , </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">];</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">spread</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span><span style=\"color: #000000\">...</span><span style=\"color: #1A1A1A\">mancante</span><span style=\"color: #333333\">];</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">concatenato</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [].concat(</span><span style=\"color: #1A1A1A\">mancante</span><span style=\"color: #333333\">);</span>\n\n<span style=\"color: #008000\">// true</span>\n<span style=\"color: #A31515\">\"1\"</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">spread</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #008000\">// false</span>\n<span style=\"color: #A31515\">\"1\"</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">concatenato</span><span style=\"color: #333333\">;</span></code></div></pre>\n<p>Proprio come un <code>for / of</code>, <code>downlevelIteration</code> andrà ad usare <code>Symbol.iterator</code> (se presente) in modo da emulare in modo più preciso il comportamento di ES 6.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importHelpers-config'><a aria-label=\"Link to the compiler option: importHelpers\" id='importHelpers' href='#importHelpers' name='importHelpers' aria-labelledby=\"importHelpers-config\">#</a> Importazione di Aiuti - <code>importHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript da alcuni suggerimenti per operazioni di livello inferiore come ad esempio estendere classi, spread di array o oggetti, e operazioni asincrone. In modo predefinito, questi suggerimenti vengono dati nei file che usano le operazioni elencate in precedenza. Tuttavia, nel caso in cui lo stesso suggerimento è usato in più moduli diversi, si possono verificare alcuni casi di duplicazione del codice.</p>\n<p>Se l’opzione <code>importHelpers</code> è attiva, queste funzionalità ausiliari vengono importate dal modulo <a href=\"https://www.npmjs.com/package/tslib\">tslib</a>. Dovrai assicurarti che il modulo <code>tslib</code> è in grado di essere importato in runtime. Questo riguarda solo i moduli; I file degli script globali non proveranno ad importare i moduli.</p>\n<p>Per esempio, con questo codice TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> fn(</span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number[]) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">arr2 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">, </span><span style=\"color: #000000\">...</span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #333333\">];</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Attivando <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a>, esso rimane falso:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__read </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__read</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">m </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> Symbol </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">[Symbol.</span><span style=\"color: #1A1A1A\">iterator</span><span style=\"color: #333333\">];</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #000000\">!</span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">i </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">m.call</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">), </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">ar </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [], </span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">try</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">while</span><span style=\"color: #333333\"> ((</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #000000\">--</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">!</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">i.next</span><span style=\"color: #333333\">()).</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #333333\">) </span><span style=\"color: #1A1A1A\">ar.push</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">catch</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">error</span><span style=\"color: #333333\">) { </span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> { error: </span><span style=\"color: #1A1A1A\">error</span><span style=\"color: #333333\"> }; }</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">finally</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">try</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">            </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">!</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #333333\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #333333\">])) </span><span style=\"color: #1A1A1A\">m.call</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">        }</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">finally</span><span style=\"color: #333333\"> { </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">error</span><span style=\"color: #333333\">; }</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ar</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__spreadArray </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__spreadArray</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">to</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">from</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">for</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">i </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">il </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">from</span><span style=\"color: #333333\">.length, </span><span style=\"color: #1A1A1A\">j </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">to</span><span style=\"color: #333333\">.length; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&lt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">il</span><span style=\"color: #333333\">; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">++</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">j</span><span style=\"color: #000000\">++</span><span style=\"color: #333333\">)</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #1A1A1A\">to</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">j</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">from</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #333333\">];</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">to</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> fn(</span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">arr2 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__spreadArray</span><span style=\"color: #333333\">([</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">], </span><span style=\"color: #1A1A1A\">__read</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #333333\">));</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFaYSADwAOsAulAAzAK6sAxsNGLWACkIFKrJcgBGAgNoBdAJSgA3plChVoyPL0AmUAF5QZgIwANKAAdKF6FgDcmAC+QA'>Try</a></div></pre>\n<p>Poi attivando entrambi <a href=\"#downlevelIteration\"><code>downlevelIteration</code></a> e <code>importHelpers</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">__read</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">__spreadArray</span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"tslib\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> fn(</span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">arr2 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__spreadArray</span><span style=\"color: #333333\">([</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">], </span><span style=\"color: #1A1A1A\">__read</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">arr</span><span style=\"color: #333333\">));</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFYMIqZAAdYBdNF5SBkceFaxEBArJUkAHjLmgAZgFdWAY2GiTrABSEClVqeQAjAQG0AugEpQAN6YoKAWopDooI4ATKAAvKCeAIwANKAAdJmO3gDcmAC+QA'>Try</a></div></pre>\n<p>Puoi utilizzare <a href=\"#noEmitHelpers\"><code>noEmitHelpers</code></a> quando metti a disposizione la tua implementazione di queste funzioni.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#noEmitHelpers' aria-label=\"Jump to compiler option info for noEmitHelpers\" ><code>noEmitHelpers</code></a>, <a href='#downlevelIteration' aria-label=\"Jump to compiler option info for downlevelIteration\" ><code>downlevelIteration</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='incremental-config'><a aria-label=\"Link to the compiler option: incremental\" id='incremental' href='#incremental' name='incremental' aria-labelledby=\"incremental-config\">#</a> Incrementale - <code>incremental</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Dice a TypeScript di salvare le informazioni riguardo il grafo del progetto dall’ultima compliazione nei file salvati nel disco.\nQuesto crea una serie di file <code>.tsbuildinfo</code> nella stessa cartella del risultato della compilazione. Essi non vengono usati dal tuo JavaScript durante l’esecuzione e possono essere tranquillamente eliminati. Puoi saperne di più riguardo questa flag nelle <a href=\"/docs/handbook/release-notes/typescript-3-4.html#faster-subsequent-builds-with-the---incremental-flag\">3.4 note di rilascio</a>.</p>\n<p>Per scegliere in che cartella vuoi i tuoi file compilati, usa l’opzione di configurazione <a href=\"#tsBuildInfoFile\"><code>tsBuildInfoFile</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code> if <code>composite</code>, <code>false</code> otherwise</p>\n</li>\n<li><span>Related:</span><p><a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a>, <a href='#tsBuildInfoFile' aria-label=\"Jump to compiler option info for tsBuildInfoFile\" ><code>tsBuildInfoFile</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='isolatedModules-config'><a aria-label=\"Link to the compiler option: isolatedModules\" id='isolatedModules' href='#isolatedModules' name='isolatedModules' aria-labelledby=\"isolatedModules-config\">#</a> Moduli Isolati - <code>isolatedModules</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando usi TypeScript per produrre codice JavaScript, è usanza comune usare altri transpilers come ad esempio <a href=\"https://babeljs.io\">Babel</a>.\nTuttavia, gli altri transpilers possono operare solo su un singolo file alla volta, questo significa che non possono fare cambiamenti che dipendono dalla comprensione dell’intero progetto.\nQuesta regola si applica anche al <code>ts.transpileModule</code> API di TypeScript che è usata da alcuni strumenti di esecuzione.</p>\n<p>Queste limitazioni possono causare problemi di esecuzione con alcune funzionalità di TypeScript come <code>const enum</code> e <code>namespace</code>.\nImpostando la flag <code>isolatedModules</code> chiedi a TypeScript di avvisarti se stai scrivendo del codice che non può essere correttamente interpretato da un processo di transpilation su un singolo file.</p>\n<p>Esso non cambia la forma del tuo codice e nemmeno la forma del controllo di TypeScript e il processo di emissione.</p>\n<p>Alcuni esempi di codice che non funzionano quando <code>isolatedModules</code> è abilitato.</p>\n<h4 id=\"esportazione-di-idententificatori-senza-valore\" style=\"position:relative;\"><a href=\"#esportazione-di-idententificatori-senza-valore\" aria-label=\"esportazione di idententificatori senza valore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Esportazione di idententificatori senza valore</h4>\n<p>In TypeScript, puoi importare un <em>type</em> e di conseguenza esportarlo:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='import tipo'>tipo</data-lsp></span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='import funzione'>funzione</data-lsp></span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"modulo\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='import funzione'>funzione</data-lsp></span><span style=\"color: #333333\">();</span>\n\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='export tipo'>tipo</data-lsp></span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='export funzione'>funzione</data-lsp></span><span style=\"color: #333333\"> };</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAEsC2AHZAXUAb1HwzwBpQAzAV0gC8NpIBTUAXxqS1ACIs0ACa0ANtD4BuNGjqNmbABQBKaWlYAPPPEIkylGvSYt2HSUA'>Try</a></div></pre>\n<p>Dato che non ci sono valori per <code>tipo</code>, l’emissione <code>export</code> non proverà ad esportarlo (questo perché ci sarebbe un errore di esecuzione in JavaScript):</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">funzione</span><span style=\"color: #333333\"> };</span></code></div></pre>\n<p>I transpilers a singolo file non sanno se <code>tipo</code> produce un valore o meno, quindi c’è un errore nell’esportazione di un nome che si riferisce solo ad un tipo.</p>\n<h4 id=\"file-non-moduli\" style=\"position:relative;\"><a href=\"#file-non-moduli\" aria-label=\"file non moduli permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File Non-Moduli</h4>\n<p>Se <code>isolatedModules</code> è impostato, tutti file di implementazione devono essere <em>modules</em> (ciò significa che esso ha alcune forme di <code>import</code> / <code>export</code>). Un errore appare se nessun file è un modulo:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\"><data-err>function</data-err></span><span style=\"color: #333333\"> <data-lsp lsp='function fn(): void'>fn</data-lsp>() {}</span>\n<span class=\"error\"><span>'index.ts' cannot be compiled under '--isolatedModules' because it is considered a global script file. Add an import, export, or an empty 'export {}' statement to make it a module.</span><span class=\"code\">1208</span></span><span class=\"error-behind\">'index.ts' cannot be compiled under '--isolatedModules' because it is considered a global script file. Add an import, export, or an empty 'export {}' statement to make it a module.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwCYAMAOAUCBAJaJwA2AhgC6QAmAsnLQK5mSJ4BmzAdgMZUicHqE48AFAEpQAbwC+QA'>Try</a></div></pre>\n<p>Questa regola non viene applicata ai file <code>.d.ts</code></p>\n<h4 id=\"riferimenti-ai-membri-const-enum\" style=\"position:relative;\"><a href=\"#riferimenti-ai-membri-const-enum\" aria-label=\"riferimenti ai membri const enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Riferimenti ai membri <code>const enum</code></h4>\n<p>In TypeScript, quando ti riferisci ad un membro <code>const enum</code>, il riferimento viene rimpiazzato dal suo valore attuale nel JavaScript compilato. Cambiando questo TypeScript:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #333333\"> <data-lsp lsp='const enum Numeri'>Numeri</data-lsp> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Numeri.Zero = 0'>Zero</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Numeri.Uno = 1'>Uno</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">}</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const enum Numeri'>Numeri</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Numeri.Zero = 0'>Zero</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const enum Numeri'>Numeri</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Numeri.Uno = 1'>Uno</data-lsp></span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3iFBXAtvAHIEgwCW8A3gFDzwBaZS8AvPAAwA0d8AqihbsAjDwC+NZOiQQQAOghIA5gAoS+MuTlMYLANTFSFOQKQBKANxA'>Try</a></div></pre>\n<p>Con questo JavaScript:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqSYAm+AxgDYCGBoLsNk6ULQCuyUADlR+XKlABvTKFAAtabFABeUAAYANItABVGuq0BGfQF9MvfrDb4AdG1gBzABSTqMx6tzqAagkpH2NYAEoAbiA'>Try</a></div></pre>\n<p>Senza la conoscenza del valore di questi membri, gli altri transpilers non possono rimpiazzare il riferimento a <code>Numeri</code>, questo comporterebbe un errore di esecuzione se lasciato a se stesso (dal momento in cui non ci sono oggetti di tipo <code>Numeri</code> in esecuzione).\nA causa di questo, quando <code>isolatedModules</code> è impostato, c’è un errore nel riferire un ambiente ad un membro <code>const enum</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsx-config'><a aria-label=\"Link to the compiler option: jsx\" id='jsx' href='#jsx' name='jsx' aria-labelledby=\"jsx-config\">#</a> JSX - <code>jsx</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Controlla come i costrutti JSX vengono emessi in file Javascript. Questo influisce sull’output solo nel caso il file JS termini con <code>.tsx</code>.</p>\n<ul>\n<li><code>react</code>: Genera dei file <code>.js</code> con JSX modificato nelle chiamate <code>React.createElements</code> equivalenti.</li>\n<li><code>react-jsx</code>: Genera dei file <code>.js</code> con JSX modificato nelle chiamate <code>_jsx</code>.</li>\n<li><code>react-jsxdev</code>: Genera dei file <code>.js</code> con JSX modificato in chiamate <code>_jsx</code>.</li>\n<li><code>preserve</code>: Genera dei file <code>.jsx</code> con JSX invariato.</li>\n<li><code>react-native</code>: Genera dei file <code>.js</code> con JSX invariato.</li>\n</ul>\n<h3 id=\"per-esempio\" style=\"position:relative;\"><a href=\"#per-esempio\" aria-label=\"per esempio permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Per esempio</h3>\n<p>Questo codice esempio：</p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ciaoMondo</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #333333\">Ciao mondo</span><span style=\"color: #800000\">&lt;/h1&gt;</span><span style=\"color: #333333\">;</span></code></div></pre>\n<p>Predefinito: <code>\"react\"</code></p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ciaoMondo</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">React</span><span style=\"color: #333333\">.createElement(</span><span style=\"color: #A31515\">\"h1\"</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"Ciao mondo\"</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEBbA9sArhBApAygDXgG8AoeeASwDsAXEGAMyjAQFFNEQaiBfUimuo2bwAkjRhUAzuTBsQHGpKJ8yAbUkAueJOoTKAcwC6WqJQCeAbj69eAelvwAApIAWyAO4tE5asXtPKZBYYGGQYSWIQAA8ABzDqeDBkSh1E8ihkAFlk4GR4AF54AAoASgKAPngAHhcARnKAYXS8lEpcqts68osgA'>Try</a></div></pre>\n<p>Conservare: <code>\"preserve\"</code></p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ciaoMondo</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #333333\">Ciao mondo</span><span style=\"color: #800000\">&lt;/h1&gt;</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEBbA9sArhBApAygDXgG8AoeeASwDsAXEGAMyjAQFFNEQaiBfUimuo2bwAkjRhUAzuTBsQHGpKJ8yAbUkAueJOoTKAcwC6WqJQCeAbj69eAelvwAApIAWyAO4tE5asXtPKZBYYGGQYST8HRwArSQAPLQAHOEk6ADcQYhA4xLDqeDBkSh0C8ihkAFki4GR4AF54AAoASnqAPngAHhcARjaAYTLalEoazttetosgA'>Try</a></div></pre>\n<p>React Native: <code>\"react-native\"</code></p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ciaoMondo</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #333333\">Ciao mondo</span><span style=\"color: #800000\">&lt;/h1&gt;</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEBbA9sArhBApAygDXgG8AoeeASwDsAXEGAMyjAQFFNEQaiBfUimuo2bwAkjRhUAzuTBsQHGpKJ8yAbUkAueJOoTKAcwC6WqJQCeAbj69eAelvwAApIAWyAO4tE5asXtPKZBYYGGQYST8HRwArSQAPLTgmagBaSihqcgA3EGIQOIAHMOp4MGRKHVLyKGQAWXLgZHgAXngACgBKFoA+eAAeFwBGboBhaqaUSka+2yHuiyA'>Try</a></div></pre>\n<p>React 17 convertito: <code>\"react-jsx\"</code><sup><a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">[1]</a></sup></p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">jsx</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">_jsx</span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"react/jsx-runtime\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ciaoMondo</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> _jsx(</span><span style=\"color: #A31515\">\"h1\"</span><span style=\"color: #333333\">, { children: </span><span style=\"color: #A31515\">\"Ciao mondo\"</span><span style=\"color: #333333\"> }, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEBbA9sArhBApAygDXgG8AoeeASwDsAXEGAMyjAQFFNEQaiBfUimuo2bwAkjRhUAzuTBsQHGpKJ8yAbUkAueJOoTKAcwC6WqJQCeAbj69eAelvwAApIAWyAO4tE5asXtPKZBYYGGQYST8HRwArSQAPLTgmagBaWLjiEDiABzDqeDBkSh0C8ihkAFki4GR4AF54AAoASnqAPngAHhcARjaAYTLalEoazttetosgA'>Try</a></div></pre>\n<p>React 17 dev convertito: <code>\"react-jsxdev\"</code><sup><a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">[1]</a></sup></p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">jsxDEV</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">_jsxDEV</span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"react/jsx-dev-runtime\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">_jsxFileName</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/index.tsx\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ciaoMondo</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> _jsxDEV(</span><span style=\"color: #A31515\">\"h1\"</span><span style=\"color: #333333\">, { children: </span><span style=\"color: #A31515\">\"Ciao mondo\"</span><span style=\"color: #333333\"> }, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">false</span><span style=\"color: #333333\">, { fileName: </span><span style=\"color: #1A1A1A\">_jsxFileName</span><span style=\"color: #333333\">, lineNumber: </span><span style=\"color: #09835A\">7</span><span style=\"color: #333333\">, columnNumber: </span><span style=\"color: #09835A\">31</span><span style=\"color: #333333\"> }, </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEBbA9sArhBApAygDXgG8AoeeASwDsAXEGAMyjAQFFNEQaiBfUimuo2bwAkjRhUAzuTBsQHGpKJ8yAbUkAueJOoTKAcwC6WqJQCeAbj69eAelvwAApIAWyAO4tE5asXtPKZBYYGGQYST8HRwArSQAPLTgmagBaWLjQADdiEDiABzDqeDBkSh1i8ihkAFlS4GR4AF54AAoASiaAPngAHhcARk6AYUqGlEp6ntsBzosgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Allowed:</span><p><code>react</code>,<br/><code>react-jsx</code>,<br/><code>react-jsxdev</code>,<br/><code>react-native</code>,<br/><code>preserve</code></p>\n</li>\n<li><span>Related:</span><p><a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a>, <a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.2\" href=\"/docs/handbook/release-notes/typescript-2-2.html\">2.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='lib-config'><a aria-label=\"Link to the compiler option: lib\" id='lib' href='#lib' name='lib' aria-labelledby=\"lib-config\">#</a> Libreria - <code>lib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript include una serie di definizioni tipo per API già incorporate in JS (come <code>Math</code>), o definizioni tipo per ambienti di sviluppo web (come <code>document</code>).\nTypeScript include anche API per le nuove funzionalità JS abbinandole al <code>target</code> specificato; per esempio il termine <code>Map</code> è disponibile se il <code>target</code> è <code>ES6</code> o una versione più recente.</p>\n<p>Potresti volerli cambiare per alcuni motivi:</p>\n<ul>\n<li>Il tuo programma non gira su un browser, quindi non vuoi le definizioni di tipo <code>\"dom\"</code></li>\n<li>La tua piattaforma di esecuzione fornisce alcuni oggetti API di JavaScript (magari attraverso dei polyfill), ma non supporta la completa sintassi di una determinata versione di ECMAScript</li>\n<li>Hai una serie di polyfill o implementazioni native per alcuni, ma non tutti, per una versione ECMAScript di livello superiore</li>\n</ul>\n<h3 id=\"librerie-di-alto-livello\" style=\"position:relative;\"><a href=\"#librerie-di-alto-livello\" aria-label=\"librerie di alto livello permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Librerie di alto livello</h3>\n<table>\n<thead>\n<tr>\n<th>Nomi</th>\n<th>Contenuti</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ES5</code></td>\n<td>Definizioni di base per tutte le funzionalità ES3 e ES5</td>\n</tr>\n<tr>\n<td><code>ES2015</code></td>\n<td>APIs aggiuntive disponibili in ES2015 (conosciuto anche come ES6) - <code>array.find</code>, <code>Promise</code>, <code>Proxy</code>, <code>Symbol</code>, <code>Map</code>, <code>Set</code>, <code>Reflect</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES6</code></td>\n<td>Alias per “ES2015”</td>\n</tr>\n<tr>\n<td><code>ES2016</code></td>\n<td>APIs aggiuntive dispinibili in ES2016 - <code>array.include</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES7</code></td>\n<td>Alias per “ES2016”</td>\n</tr>\n<tr>\n<td><code>ES2017</code></td>\n<td>APIs aggiuntive disponibili in ES2017 - <code>Object.entries</code>, <code>Object.values</code>, <code>Atomics</code>, <code>SharedArrayBuffer</code>, <code>date.formatToParts</code>, array tipizzati, etc.</td>\n</tr>\n<tr>\n<td><code>ES2018</code></td>\n<td>APIs aggiuntive disponibili in ES2018 - <code>async</code> iterables, <code>promise.finally</code>, <code>Intl.PluralRules</code>, <code>rexexp.groups</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2019</code></td>\n<td>APIs aggiuntive disponibili in ES2019 - <code>array.flat</code>,<code>array.flatMap</code>, <code>Object.fromEntries</code>, <code>string.trimStart</code>, <code>string.trimEnd</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ES2020</code></td>\n<td>APIs aggiuntive disponibili in ES2020 - <code>string.matchAll</code>, etc.</td>\n</tr>\n<tr>\n<td><code>ESNext</code></td>\n<td>APIs aggiuntive disponibili in ESNext - Questo cambia con l’evoluzione delle specifiche di JavaScript</td>\n</tr>\n<tr>\n<td><code>DOM</code></td>\n<td>Definizioni <a href=\"https://developer.mozilla.org/docs/Glossary/DOM\">DOM</a> - <code>window</code>, <code>document</code>, etc.</td>\n</tr>\n<tr>\n<td><code>WebWorker</code></td>\n<td>APIs disponibili in contesti <a href=\"https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Worker</a></td>\n</tr>\n<tr>\n<td><code>ScriptHost</code></td>\n<td>APIs per il <a href=\"https://wikipedia.org/wiki/Windows_Script_Host\">Windows Script Hosting System</a></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"componenti-di-librerie-individuali\" style=\"position:relative;\"><a href=\"#componenti-di-librerie-individuali\" aria-label=\"componenti di librerie individuali permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Componenti di librerie individuali</h3>\n<table>\n<thead>\n<tr>\n<th>Nome</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>DOM.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Core</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Collection</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Generator</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Iterable</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Proxy</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Reflect</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2015.Symbol.WellKnown</code></td>\n</tr>\n<tr>\n<td><code>ES2016.Array.Include</code></td>\n</tr>\n<tr>\n<td><code>ES2017.object</code></td>\n</tr>\n<tr>\n<td><code>ES2017.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2017.SharedMemory</code></td>\n</tr>\n<tr>\n<td><code>ES2017.String</code></td>\n</tr>\n<tr>\n<td><code>ES2017.TypedArrays</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Intl</code></td>\n</tr>\n<tr>\n<td><code>ES2018.Promise</code></td>\n</tr>\n<tr>\n<td><code>ES2018.RegExp</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Array</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Object</code></td>\n</tr>\n<tr>\n<td><code>ES2019.String</code></td>\n</tr>\n<tr>\n<td><code>ES2019.Symbol</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Full</code></td>\n</tr>\n<tr>\n<td><code>ES2020.String</code></td>\n</tr>\n<tr>\n<td><code>ES2020.Symbol.wellknown</code></td>\n</tr>\n<tr>\n<td><code>ESNext.AsyncIterable</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Array</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Intl</code></td>\n</tr>\n<tr>\n<td><code>ESNext.Symbol</code></td>\n</tr>\n</tbody>\n</table>\n<p>Questa lista potrebbe non essere aggiornata, puoi vedere la lista completa nel <a href=\"https://github.com/microsoft/TypeScript/tree/master/lib\">codice sorgente di TypeScript</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>See main content</p>\n</li>\n<li><span>Related:</span><p><a href='#noLib' aria-label=\"Jump to compiler option info for noLib\" ><code>noLib</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='module-config'><a aria-label=\"Link to the compiler option: module\" id='module' href='#module' name='module' aria-labelledby=\"module-config\">#</a> Modulo - <code>module</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Definisce il sistema di moduli per il programma. Consulta la sezione <a href='/docs/handbook/modules.html#ambient-modules'> Moduli </a> per più informazioni. Per i progetti che utilizzano node è probabile che tu voglia <code>\"CommonJS\"</code>.</p>\n<p>Questo è un output di esempio:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) const valoreDiPi: 3.142&amp;#13;import valoreDiPi'>valoreDiPi</data-lsp></span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./costanti\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const doppioPi: number'>doppioPi</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) const valoreDiPi: 3.142&amp;#13;import valoreDiPi'>valoreDiPi</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxgewM4Auyih0AdIfgFDwAeADrgE6E66JGgBuysL8ACLQACtFABeUAGZyARgAsAJgDc1EKAC027AFdC2zerBQ4SNJlDREAE3qUa0VE1agA3jz4DhY0AF9QSGZcVFAAInJgPCISMjC1WkYWNjxONhtcBgZoXF8pXn5mIVFxACpQVSA'>Try</a></div></pre>\n<h4 id=\"commonjs\" style=\"position:relative;\"><a href=\"#commonjs\" aria-label=\"commonjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>CommonJS</code></h4>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">costanti_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"./costanti\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">exports.</span><span style=\"color: #1A1A1A\">doppioPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">costanti_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">valoreDiPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAGNZk8A7AK0mzHADNUz6BDZC6rEjoe9dKgB06FqQAeAB1gAndIPrDQANx7FlpACKoACqlABeUAGYJARgAsAJgDcrCJ258BqevjlSWOAC0wVSE6MGBmKjIiiqgAN5aOnqGJqAAvqDsSrSgAEQSwDTCouJ5Lphysao06qr4sPLyqLBpFtq6SgbGpgBUoM5AA'>Try</a></div></pre>\n<h4 id=\"umd\" style=\"position:relative;\"><a href=\"#umd\" aria-label=\"umd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>UMD</code></h4>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #333333\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">factory</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> module </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> module.exports </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">v </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">factory</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">, exports);</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">!==</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #333333\">) module.exports </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">else</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">define</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">define</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">amd</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #1A1A1A\">define</span><span style=\"color: #333333\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"./costanti\"</span><span style=\"color: #333333\">], </span><span style=\"color: #1A1A1A\">factory</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">})(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">exports</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">Object.defineProperty</span><span style=\"color: #333333\">(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #333333\">    exports.</span><span style=\"color: #1A1A1A\">doppioPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">costanti_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"./costanti\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    exports.</span><span style=\"color: #1A1A1A\">doppioPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">costanti_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">valoreDiPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEOX2zHADNUyA7AQ2QtAGNZJ02LdKgB06SJlIAPAA6wATuh6wW-UADc2xBaQAiqAAqpQAXlABmEQEYALACYA3HVABaN90Lo3L542al2TkpUFnxpMQlUZDlFUABvDS0dfSNQAF9QBnlYZFAAIhFgXn5BYTynSVkFJV5VJXxYGRlUWFSzTW15PUNjACpQRyA'>Try</a></div></pre>\n<h4 id=\"amd\" style=\"position:relative;\"><a href=\"#amd\" aria-label=\"amd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>AMD</code></h4>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #1A1A1A\">define</span><span style=\"color: #333333\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"./costanti\"</span><span style=\"color: #333333\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">exports</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">costanti_1</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">Object.defineProperty</span><span style=\"color: #333333\">(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #333333\">    exports.</span><span style=\"color: #1A1A1A\">doppioPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    exports.</span><span style=\"color: #1A1A1A\">doppioPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">costanti_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">valoreDiPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAENl9sxwAzVMgOxotAGNZJ0rW6VADp0kTKQAeAB1gAndN1is+oAG5Vi80gBFUABVSgAvKADMwgIwAWAEwBueqAC0rroXSvnTpi1LtkTlRWfClRcVRkWQVQAG91TW09Q1AAX1BGOVhkUAAiYWAePgEhXMcJGXlFHhVFfFhpaVRYFNMNLTldAyMAKlAHIA'>Try</a></div></pre>\n<h4 id=\"system\" style=\"position:relative;\"><a href=\"#system\" aria-label=\"system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>System</code></h4>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #1A1A1A\">System.register</span><span style=\"color: #333333\">([</span><span style=\"color: #A31515\">\"./costanti\"</span><span style=\"color: #333333\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">exports_1</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">context_1</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">costanti_1</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">doppioPi</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__moduleName </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">context_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">context_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">id</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">        setters: [</span>\n<span style=\"color: #333333\">            </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">costanti_1_1</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">                </span><span style=\"color: #1A1A1A\">costanti_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">costanti_1_1</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">            }</span>\n<span style=\"color: #333333\">        ],</span>\n<span style=\"color: #333333\">        execute: </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> () {</span>\n<span style=\"color: #333333\">            </span><span style=\"color: #1A1A1A\">exports_1</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"doppioPi\"</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">doppioPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">costanti_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">valoreDiPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">        }</span>\n<span style=\"color: #333333\">    };</span>\n<span style=\"color: #333333\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEgE9J1TlsxwAzVMgOwENkLQBjWHS4d0qAHTpImUgA8ADrABO6AbA51QANy7FlpACKoACqlABeUAGZxARgAsAJgDcTUAFpP-Quk-u3rOyk3LyUqBz4cpLSqMiKKqAA3tq6+kamoAC+oCxKsMigAETiwILCoqiFrjIKyqqCGqr4sPLyqLAZljp6SoYmZgBUoC5AA'>Try</a></div></pre>\n<h4 id=\"esnext\" style=\"position:relative;\"><a href=\"#esnext\" aria-label=\"esnext permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ESNext</code></h4>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">valoreDiPi</span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./costanti\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">doppioPi </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">valoreDiPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgDtSAPLHcAM1TJoENkLQBjWJHSca6VADp0kTAwAOsAE7p+sGkNAA3TsUWkAIqgAKqUAF5QAZnEBGACwAmANzYwAWnd9C6d65cQ2HNy8qDT4DJLSqMjySqAA3praugbGoAC+oCwKsMigAETiwAJCImJ5zjL0McoCasr4sLKyqLCp5lo6CvpGJgBUoE5AA'>Try</a></div></pre>\n<h4 id=\"es2020\" style=\"position:relative;\"><a href=\"#es2020\" aria-label=\"es2020 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>ES2020</code></h4>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">valoreDiPi</span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./costanti\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">doppioPi </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">valoreDiPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgCYAGe7McAM1TIDsBDZC0AY1iR0XDulQA6dJEykAHgAdYAJ3QDYHYaABuXYitIARVAAVUoALygAzBICMAFhoBuJqAC0n-oXSf3b1nZSbl5KVA58eSkZVGQlVVAAbx09A2MzUABfUBZlWGRQACIJYEFhUXFC11lFFTVBTTV8WAUFVFgMq119ZSNTcwAqUBcgA'>Try</a></div></pre>\n<h3 id=\"none\" style=\"position:relative;\"><a href=\"#none\" aria-label=\"none permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>None</code></h3>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\">Object.defineProperty</span><span style=\"color: #333333\">(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #333333\">exports.</span><span style=\"color: #1A1A1A\">doppioPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">costanti_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"./costanti\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">exports.</span><span style=\"color: #1A1A1A\">doppioPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">costanti_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">valoreDiPi</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlADtYrTsxwAzVMqgQ2QtAGNZJ07KulQA6dJEykAHgAdYAJ3S9aA0ADd2xRaQAiqAAqpQAXlABmUQEYALACYA3A1ABaNz0Lo3L581akOLkpUKnwZcUlUZHklUABvDS0dfSNQAF9QJgVYZFAAIlFgPgEhETynKTlFZT4qNXxYWVlUWFSzTW0FPUNjACpQRyA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p><code>CommonJS</code> (default if <code>target</code> is <code>ES3</code> or <code>ES5</code>),<br/>,<br/><code>ES6</code>/<code>ES2015</code> (synonymous, default for <code>target</code> <code>ES6</code> and higher),<br/>,<br/><code>ES2020</code>,<br/><code>None</code>,<br/><code>UMD</code>,<br/><code>AMD</code>,<br/><code>System</code>,<br/><code>ESNext</code></p>\n</li>\n<li><span>Related:</span><p><a href='#moduleResolution' aria-label=\"Jump to compiler option info for moduleResolution\" ><code>moduleResolution</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmit-config'><a aria-label=\"Link to the compiler option: noEmit\" id='noEmit' href='#noEmit' name='noEmit' aria-labelledby=\"noEmit-config\">#</a> Non genera - <code>noEmit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Il compilatore non genera file di output come ad esempio codice JavaScript, source maps o dichiarazioni.</p>\n<p>Questo fa spazio per altri strumenti come <a href=\"https://babeljs.io\">Babel</a> o <a href=\"https://github.com/swc-project/swc\">swc</a> per gestire la conversione di un file TypeScript in un file che può essere eseguito in un ambiente JavaScript</p>\n<p>Puoi usare TypeScript come uno strumento che ti offre un integrazione da parte dell’editor e un codice sorgente tipizzato.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outDir-config'><a aria-label=\"Link to the compiler option: outDir\" id='outDir' href='#outDir' name='outDir' aria-labelledby=\"outDir-config\">#</a> Out Dir - <code>outDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Se viene specificato, i file <code>.js</code> (così come <code>.d.ts</code>, <code>.js.map</code>, etc.) verrano emessi in questa directory.\nE’ preservata la struttura della directory dei file sorgente originali; controlla <a href=\"#rootDir\">rootDir</a> se\nla root elaborata non è quella che quella che intendevi.</p>\n<p>Se non specificato, i file <code>.js</code> verranno emessi nella stessa directory dei file <code>.ts</code> da cui\nsono stati generati:</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #333333\">$ tsc</span>\n\n<span style=\"color: #333333\">esempio</span>\n<span style=\"color: #333333\">├── index.js</span>\n<span style=\"color: #333333\">└── index.ts</span></code></div></pre>\n<p>Con un <code>tsconfig.json</code>così：</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"opzioniCompilatore\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#outDir'><data-lsp lsp=\"Specify an output folder for all emitted files.\">outDir</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"dist\"</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Eseguendo <code>tsc</code> con queste opzioni si andrà a spostare i file nella cartella <code>dist</code> specificata:</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #333333\">$ tsc</span>\n\n<span style=\"color: #333333\">esempio</span>\n<span style=\"color: #333333\">├── dist</span>\n<span style=\"color: #333333\">│   └── index.js</span>\n<span style=\"color: #333333\">├── index.ts</span>\n<span style=\"color: #333333\">└── tsconfig.json</span></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a>, <a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='outFile-config'><a aria-label=\"Link to the compiler option: outFile\" id='outFile' href='#outFile' name='outFile' aria-labelledby=\"outFile-config\">#</a> File di output - <code>outFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Se specificato, tutti i file <em>global</em> (non moduli) verranno concatenati in un unico file output specificato.</p>\n<p>Se <code>module</code> è <code>system</code> o <code>amd</code>, tutti i file <em>module</em> saranno concatenati in questo file dopo tutto il contenuto globale.</p>\n<p>Nota: <code>outFile</code> non può essere a meno che <code>module</code> è <code>None</code>, <code>System</code>, o <code>AMD</code>.\nQuesta opzione <em>non può</em> essere usata insieme a CommonJS o moduli ES6.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#out' aria-label=\"Jump to compiler option info for out\" ><code>out</code></a>, <a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='plugins-config'><a aria-label=\"Link to the compiler option: plugins\" id='plugins' href='#plugins' name='plugins' aria-labelledby=\"plugins-config\">#</a> Plugins - <code>plugins</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Lista dei language service plugin da eseguire all’interno dell’editor.</p>\n<p>I language service plugin sono un modo di dare più informazioni all’utente riguardo i file TypeScript esistenti. Loro possono sfruttare i messaggi di TypeScript e dell’editor per creare i loro errori.</p>\n<p>Per esempio:</p>\n<ul>\n<li><a href=\"https://github.com/xialvjun/ts-sql-plugin#readme\">ts-sql-plugin</a> — Aggiunge Linting SQL con un generatore di stringhe SQL.</li>\n<li><a href=\"https://github.com/Microsoft/typescript-styled-plugin\">typescript-styled-plugin</a> — Aggiunge Linting CSS all’interno delle stringhe di template.</li>\n<li><a href=\"https://github.com/Quramy/typescript-eslint-language-service\">typescript-eslint-language-service</a> — Da un errore di eslint e il corrispettivo fix all’interno dell’output del compilatore.</li>\n<li><a href=\"https://github.com/Quramy/ts-graphql-plugin\">ts-graphql-plugin</a> — Da validazione e autocompletamento all’interno delle stringhe con query GraphQL.</li>\n</ul>\n<p>VS Code ha l’abilità grazie alle estensioni di <a href=\"https://code.visualstudio.com/api/references/contribution-points#contributes.typescriptServerPlugins\">includere automaticamente i language service plugin</a>, quindi è probabile che ne stai già eseguendo alcuni nel tuo editor senza aver bisogno di definirli nel <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='removeComments-config'><a aria-label=\"Link to the compiler option: removeComments\" id='removeComments' href='#removeComments' name='removeComments' aria-labelledby=\"removeComments-config\">#</a> Rimuovere commenti - <code>removeComments</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Rimuove tutti i commenti dai file TypeScript quando avviene la conversione in JavaScript. Il valore predefinito è <code>false</code>.</p>\n<p>Per esempio, questo è un file TypeScript che ha un commento JSDoc:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">/** Traduzione di 'Ciao mondo' in italiano. */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ciaoMondoIT </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Ciao mondo\"</span><span style=\"color: #333333\">;</span></code></div></pre>\n<p>Quando <code>removeComments</code> è impostato su <code>true</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ciaoMondoIT </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Ciao mondo\"</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBco6uArvtgFSegAquAQwAmrAF6pYNfKCGpQAcjKoBsUERpDY80Kho70AgDbKasAHShOwTPgAeAB1i50oAMaTIL18tgBZSZoAkrygALygAERKKmoBsBEA3EA'>Try</a></div></pre>\n<p>Senza aver impostato <code>removeComments</code> o averlo impostato su <code>false</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">/** Traduzione di &apos;Ciao mondo&apos; in italiano. */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">ciaoMondoIT </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Ciao mondo\"</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBcoAZgIYA2k+2AVD6ABVcrACYBXAF6pYNfKBGpQAcjKpWsUERojYS0Khr70HNTVgA6UD2CZ8ADwAOsXOlABjGZFdu1sALIyOgCSAqAAvKAARKrqmoGwkQDcQA'>Try</a></div></pre>\n<p>Ciò significa che i tuoi commenti verranno visualizzati nel codice JavaScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDir-config'><a aria-label=\"Link to the compiler option: rootDir\" id='rootDir' href='#rootDir' name='rootDir' aria-labelledby=\"rootDir-config\">#</a> Root Dir - <code>rootDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><strong>Default</strong>: The longest common path of all non-declaration input files. If <code>composite</code> is set, the default is instead the directory containing the <code>tsconfig.json</code> file.</p>\n<p>When TypeScript compiles files, it keeps the same directory structure in the output directory as exists in the input directory.</p>\n<p>For example, let’s say you have some input files:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n│   ├── sub\n│   │   ├── c.ts\n├── types.d.ts</span></code></div></pre>\n<p>The inferred value for <code>rootDir</code> is the longest common path of all non-declaration input files, which in this case is <code>core/</code>.</p>\n<p>If your <code>outDir</code> was <code>dist</code>, TypeScript would write this tree:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">MyProj\n├── dist\n│   ├── a.js\n│   ├── b.js\n│   ├── sub\n│   │   ├── c.js</span></code></div></pre>\n<p>However, you may have intended for <code>core</code> to be part of the output directory structure.\nBy setting <code>rootDir: \".\"</code> in <code>tsconfig.json</code>, TypeScript would write this tree:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">MyProj\n├── dist\n│   ├── core\n│   │   ├── a.js\n│   │   ├── b.js\n│   │   ├── sub\n│   │   │   ├── c.js</span></code></div></pre>\n<p>Importantly, <code>rootDir</code> <strong>does not affect which files become part of the compilation</strong>.\nIt has no interaction with the <code>include</code>, <code>exclude</code>, or <code>files</code> <code>tsconfig.json</code> settings.</p>\n<p>Note that TypeScript will never write an output file to a directory outside of <code>outDir</code>, and will never skip emitting a file.\nFor this reason, <code>rootDir</code> also enforces that all files which need to be emitted are underneath the <code>rootDir</code> path.</p>\n<p>For example, let’s say you had this tree:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">MyProj\n├── tsconfig.json\n├── core\n│   ├── a.ts\n│   ├── b.ts\n├── helpers.ts</span></code></div></pre>\n<p>It would be an error to specify <code>rootDir</code> as <code>core</code> <em>and</em> <code>include</code> as <code>*</code> because it creates a file (<code>helpers.ts</code>) that would need to be emitted <em>outside</em> the <code>outDir</code> (i.e. <code>../helpers.js</code>).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Computed from the list of input files</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceMap-config'><a aria-label=\"Link to the compiler option: sourceMap\" id='sourceMap' href='#sourceMap' name='sourceMap' aria-labelledby=\"sourceMap-config\">#</a> Source Map - <code>sourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables the generation of <a href=\"https://developer.mozilla.org/docs/Tools/Debugger/How_to/Use_a_source_map\">sourcemap files</a>.\nThese files allow debuggers and other tools to display the original TypeScript source code when actually working with the emitted JavaScript files.\nSource map files are emitted as <code>.js.map</code> (or <code>.jsx.map</code>) files next to the corresponding <code>.js</code> output file.</p>\n<p>The <code>.js</code> files will in turn contain a sourcemap comment to indicate to tools where the files are to external tools, for example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// helloWorld.ts</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #333333\">;</span></code></div></pre>\n<p>Compiling with <code>sourceMap</code> set to <code>true</code> creates the following JavaScript file:</p>\n<pre class=\"shiki\"><div class=\"language-id\">js</div><div class='code-container'><code><span style=\"color: #008000\">// helloWorld.js</span>\n<span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">Object.defineProperty(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #333333\">exports.</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #008000\">//# sourceMappingURL=// helloWorld.js.map</span></code></div></pre>\n<p>And this also generates this json map:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #008000\">// helloWorld.js.map</span>\n<span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"version\"</span><span style=\"color: #333333\">: </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"file\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"ex.js\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"sourceRoot\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"sources\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"../ex.ts\"</span><span style=\"color: #333333\">],</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"names\"</span><span style=\"color: #333333\">: [],</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"mappings\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='target-config'><a aria-label=\"Link to the compiler option: target\" id='target' href='#target' name='target' aria-labelledby=\"target-config\">#</a> Target - <code>target</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Modern browsers support all ES6 features, so <code>ES6</code> is a good choice.\nYou might choose to set a lower target if your code is deployed to older environments, or a higher target if your code is guaranteed to run in newer environments.</p>\n<p>The <code>target</code> setting changes which JS features are downleveled and which are left intact.\nFor example, an arrow function <code>() => this</code> will be turned into an equivalent <code>function</code> expression if <code>target</code> is ES5 or lower.</p>\n<p>Changing <code>target</code> also changes the default value of <a href=\"#lib\"><code>lib</code></a>.\nYou may “mix and match” <code>target</code> and <code>lib</code> settings as desired, but you could just set <code>target</code> for convenience.</p>\n<p>For developer platforms like Node will have a certain baselines for the their target depending on their version. You can find a set of community organized TSConfigs at <a href=\"https://github.com/tsconfig/bases#centralized-recommendations-for-tsconfig-bases\">tsconfig/bases</a> for common platforms and their versions.</p>\n<p>The special <code>ESNext</code> value refers to the highest version your version of TypeScript supports.\nThis setting should be used with caution, since it doesn’t mean the same thing between different TypeScript versions and can make upgrades less predictable.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>ES3</code></p>\n</li>\n<li><span>Allowed:</span><p><code>ES3</code> (default),<br/><code>ES5</code>,<br/><code>ES6</code>/<code>ES2015</code> (synonymous),<br/><code>ES7</code>/<code>ES2016</code>,<br/><code>ES2017</code>,<br/><code>ES2018</code>,<br/><code>ES2019</code>,<br/><code>ES2020</code>,<br/><code>ESNext</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.0\" href=\"/docs/handbook/release-notes/typescript-1-0.html\">1.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='tsBuildInfoFile-config'><a aria-label=\"Link to the compiler option: tsBuildInfoFile\" id='tsBuildInfoFile' href='#tsBuildInfoFile' name='tsBuildInfoFile' aria-labelledby=\"tsBuildInfoFile-config\">#</a> TS Build Info File - <code>tsBuildInfoFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting lets you specify a file for storing incremental compilation information as a part of composite projects which enables faster\nbuilding of larger TypeScript codebases. You can read more about composite projects <a href=\"/docs/handbook/project-references.html\">in the handbook</a>.</p>\n<p>This option offers a way to configure the place where TypeScript keeps track of the files it stores on the disk to\nindicate a project’s build state — by default, they are in the same folder as your emitted JavaScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>.tsbuildinfo</code></p>\n</li>\n<li><span>Related:</span><p><a href='#incremental' aria-label=\"Jump to compiler option info for incremental\" ><code>incremental</code></a>, <a href='#composite' aria-label=\"Jump to compiler option info for composite\" ><code>composite</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.4\" href=\"/docs/handbook/release-notes/typescript-3-4.html\">3.4</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Strict_Type_Checking_Options_6173' ><a href='#Strict_Type_Checking_Options_6173' name='Strict_Type_Checking_Options_6173' aria-label=\"Link to the section Strict Checks\" aria-labelledby='Strict_Type_Checking_Options_6173'>#</a>Strict Checks</h2>\n<p>We recommend using the <a href=\"#strict\">compiler option <code>strict</code></a> to opt-in to every possible improvement as they are built.</p>\n<p>TypeScript supports a wide spectrum of JavaScript patterns and defaults to allowing for quite a lot of flexibility in accommodating these styles.\nOften the safety and potential scalability of a codebase can be at odds with some of these techniques.</p>\n<p>Because of the variety of supported JavaScript, upgrading to a new version of TypeScript can uncover two types of errors:</p>\n<ul>\n<li>Errors which already exist in your codebase, which TypeScript has uncovered because the language has refined its understanding of JavaScript.</li>\n<li>A new suite of errors which tackle a new problem domain.</li>\n</ul>\n<p>TypeScript will usually add a compiler flag for the latter set of errors, and by default these are not enabled.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='alwaysStrict-config'><a aria-label=\"Link to the compiler option: alwaysStrict\" id='alwaysStrict' href='#alwaysStrict' name='alwaysStrict' aria-labelledby=\"alwaysStrict-config\">#</a> Sempre Rigoroso - <code>alwaysStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Assicura che i tuoi file sono analizzati con la modalità ECMAScript rigoroso, ed emette <code>use strict</code> per ogni file sorgente.</p>\n<p>La modalità <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode\">ECMAScript rigoroso</a> è stata introdotta in ES5 e fornisce modifiche al comportamento runtime del JavaScript engine per migliorare le prestazioni e generare una serie di errori invece di ignorarli silenziosamente.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.1\" href=\"/docs/handbook/release-notes/typescript-2-1.html\">2.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitAny-config'><a aria-label=\"Link to the compiler option: noImplicitAny\" id='noImplicitAny' href='#noImplicitAny' name='noImplicitAny' aria-labelledby=\"noImplicitAny-config\">#</a> No Implicit Any - <code>noImplicitAny</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In some cases where no type annotations are present, TypeScript will fall back to a type of <code>any</code> for a variable when it cannot infer the type.</p>\n<p>This can cause some errors to be missed, for example:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function fn(s: any): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: any'>s</data-lsp></span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #008000\">// No error?</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: any'>s</data-lsp>.<data-lsp lsp='any'>subtr</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\">));</span>\n<span style=\"color: #333333\">}</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(s: any): void'>fn</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">42</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0kpkAFJQJSgBvWqFAhQAOWihqAJxnQZAfmGh07StGTUAdMmgBzHtsoMARlhlcAzL14BuWgF963ACwAme0A'>Try</a></div></pre>\n<p>Turning on <code>noImplicitAny</code> however TypeScript will issue an error whenever it would have inferred <code>any</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function fn(s: any): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(parameter) s: any'>s</data-lsp></data-err></span><span style=\"color: #333333\">) {</span>\n<span class=\"error\"><span>Parameter 's' implicitly has an 'any' type.</span><span class=\"code\">7006</span></span><span class=\"error-behind\">Parameter 's' implicitly has an 'any' type.</span><span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) s: any'>s</data-lsp>.<data-lsp lsp='any'>subtr</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\">));</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYMDYBQAzAVwDsBjAFwEs5jR9iAKRASlAG9dRRSbE4AbSADp+cAOZMhiQgCNy0BgGZmzANy4AvkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitThis-config'><a aria-label=\"Link to the compiler option: noImplicitThis\" id='noImplicitThis' href='#noImplicitThis' name='noImplicitThis' aria-labelledby=\"noImplicitThis-config\">#</a> No Implicit This - <code>noImplicitThis</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Raise error on ‘this’ expressions with an implied ‘any’ type.</p>\n<p>For example, the class below returns a function which tries to access <code>this.width</code> and <code>this.height</code> – but the context\nfor <code>this</code> inside the function inside <code>getAreaFunction</code> is not the instance of the Rectangle.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #333333\"> <data-lsp lsp='class Rectangle'>Rectangle</data-lsp> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Rectangle.width: number'>width</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number;</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Rectangle.height: number'>height</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number;</span>\n\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) width: number'>width</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) height: number'>height</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Rectangle.width: number'>width</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) width: number'>width</data-lsp></span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Rectangle.height: number'>height</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) height: number'>height</data-lsp></span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">  }</span>\n\n<span style=\"color: #333333\">  <data-lsp lsp='(method) Rectangle.getAreaFunction(): () => number'>getAreaFunction</data-lsp>() {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> () {</span>\n<span style=\"color: #333333\">      </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='any'>width</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\"><data-err>this</data-err></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='any'>height</data-lsp></span><span style=\"color: #333333\">;</span>\n<span class=\"error\"><span>'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><span class=\"code\">2683<br/>2683</span></span><span class=\"error-behind\">'this' implicitly has type 'any' because it does not have a type annotation.</br>'this' implicitly has type 'any' because it does not have a type annotation.</span><span style=\"color: #333333\">    };</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcBmAUAMYA2AhooqAEqQEAuJAdgOZGSgDeeooA7gJYATWgAtUDAK4BbAEYwA3F1DDIfJsNpips6AsUE4DRLWji6CABT8ho0BJkwANEpVqNtrTACUHRdxF9EADorEVAAXl5BEQVuP2EAwOVVdXDnZNoY0ABfPEUmSFoAQWhIEgAxcQY6PgNzb05Y0BLacWgGUAAzSuqDUDqfRu5m1vb-IJDhUAAqUDHEl3VM7izMnKygA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strict-config'><a aria-label=\"Link to the compiler option: strict\" id='strict' href='#strict' name='strict' aria-labelledby=\"strict-config\">#</a> Strict - <code>strict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The <code>strict</code> flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.\nTurning this on is equivalent to enabling all of the <em>strict mode family</em> options, which are outlined below.\nYou can then turn off individual strict mode family checks as needed.</p>\n<p>Future versions of TypeScript may introduce additional stricter checking under this flag, so upgrades of TypeScript might result in new type errors in your program.\nWhen appropriate and possible, a corresponding flag will be added to disable that behavior.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#alwaysStrict' aria-label=\"Jump to compiler option info for alwaysStrict\" ><code>alwaysStrict</code></a>, <a href='#strictNullChecks' aria-label=\"Jump to compiler option info for strictNullChecks\" ><code>strictNullChecks</code></a>, <a href='#strictBindCallApply' aria-label=\"Jump to compiler option info for strictBindCallApply\" ><code>strictBindCallApply</code></a>, <a href='#strictFunctionTypes' aria-label=\"Jump to compiler option info for strictFunctionTypes\" ><code>strictFunctionTypes</code></a>, <a href='#strictPropertyInitialization' aria-label=\"Jump to compiler option info for strictPropertyInitialization\" ><code>strictPropertyInitialization</code></a>, <a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a>, <a href='#noImplicitThis' aria-label=\"Jump to compiler option info for noImplicitThis\" ><code>noImplicitThis</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.3\" href=\"/docs/handbook/release-notes/typescript-2-3.html\">2.3</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictBindCallApply-config'><a aria-label=\"Link to the compiler option: strictBindCallApply\" id='strictBindCallApply' href='#strictBindCallApply' name='strictBindCallApply' aria-labelledby=\"strictBindCallApply-config\">#</a> Strict Bind Call Apply - <code>strictBindCallApply</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, TypeScript will check that the built-in methods of functions <code>call</code>, <code>bind</code>, and <code>apply</code> are invoked with correct argument for the underlying function:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// With strictBindCallApply on</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function fn(x: string): number'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function parseInt(s: string, radix?: number | undefined): number'>parseInt</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const n1: number'>n1</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): number'>fn</data-lsp>.<data-lsp lsp='(method) CallableFunction.call&amp;lt;undefined, [string], number>(this: (this: undefined, args_0: string) => number, thisArg: undefined, args_0: string): number'>call</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"10\"</span><span style=\"color: #333333\">);</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const n2: number'>n2</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): number'>fn</data-lsp>.<data-lsp lsp='(method) CallableFunction.call&amp;lt;undefined, [x: string], number>(this: (this: undefined, x: string) => number, thisArg: undefined, x: string): number'>call</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\"><data-err>false</data-err></span><span style=\"color: #333333\">);</span>\n<span class=\"error\"><span>Argument of type 'boolean' is not assignable to parameter of type 'string'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type 'boolean' is not assignable to parameter of type 'string'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcocArgKYBQIEDssA9rJDQEwBmACwBWJizAB1eNAAWoGAmRoseQqXIVQndEwBmddMng7Qe9AAoAHjUUYA5gEpQAbyahQsBtDqx0oElweBgBJdGhrRwBuJgBfcUQdGFB0AEZQAF4zdAA6RAJ8C0NMBj0MBkwAGlAAIlSABhrohKToFL5M7LyCoqxS8qqzAkgGaKA'>Try</a></div></pre>\n<p>Otherwise, these functions accept any arguments and will return <code>any</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// With strictBindCallApply off</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function fn(x: string): number'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function parseInt(s: string, radix?: number | undefined): number'>parseInt</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #008000\">// Note: No error; return type is &apos;any&apos;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const n: any'>n</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): number'>fn</data-lsp>.<data-lsp lsp='(method) Function.call(this: Function, thisArg: any, ...argArray: any[]): any'>call</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #0000FF\"><data-lsp lsp='var undefined'>undefined</data-lsp></span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">false</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcoAZgZAKYBQzIoA6vNABagwJkaLHkKlyFUAHtatZrQCu6ZPCno66ABQAPGgIwBzAJSgA3s1ChYjaAtjqSuWEwCS6aDqMBuZgF9W7AByUtCMNMGgjLCwUrBeVjZ26tAUJIyg8JCgAOS46BTZzIhqMKDqALwaAHSIBPiaSpiMtBiMmAA0dAyM3kA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.2\" href=\"/docs/handbook/release-notes/typescript-3-2.html\">3.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictFunctionTypes-config'><a aria-label=\"Link to the compiler option: strictFunctionTypes\" id='strictFunctionTypes' href='#strictFunctionTypes' name='strictFunctionTypes' aria-labelledby=\"strictFunctionTypes-config\">#</a> Strict Function Types - <code>strictFunctionTypes</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When enabled, this flag causes functions parameters to be checked more correctly.</p>\n<p>Here’s a basic example with <code>strictFunctionTypes</code> off:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function fn(x: string): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp>.<data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp></span><span style=\"color: #333333\">());</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) ns: string | number'>ns</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> void;</span>\n\n<span style=\"color: #008000\">// Unsafe assignment</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='let func: StringOrNumberFunc'>func</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #333333\">;</span>\n<span style=\"color: #008000\">// Unsafe call - will crash</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='let func: (ns: string | number) => void'>func</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">10</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BiBXAds+B7DAVATwAcBTSALlADMBDAG0lIChrNs8aMAKADypgIMAcwCUoAN7NQoRHkg56pAHT0cw7gCIAEqXpqANKE2gA1KF7LoOADI4A7qVgBhWk26jRAbmYBfZszQJKSgAMpw8CIA8rAAcmgAtgBGTuhYoAC8oNwYlKCCkcKgAD6gGIkpsOIZAHygAG448AAmPswgoACqubTUIW6Q8MIYCaQY0MxK0DTsVOFCwjHxyansmVw+Hd2QvSGIDPSgALSg9vD6srBuABas7NwAjAAM3kA'>Try</a></div></pre>\n<p>With <code>strictFunctionTypes</code> <em>on</em>, the error is correctly detected:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function fn(x: string): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp>.<data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp></span><span style=\"color: #333333\">());</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) ns: string | number'>ns</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> void;</span>\n\n<span style=\"color: #008000\">// Unsafe assignment is prevented</span>\n<span style=\"color: #0000FF\">let</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='let func: StringOrNumberFunc'>func</data-lsp></data-err></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type StringOrNumberFunc = (ns: string | number) => void'>StringOrNumberFunc</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #333333\">;</span>\n<span class=\"error\"><span>Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '(x: string) =&gt; void' is not assignable to type 'StringOrNumberFunc'.\n  Types of parameters 'x' and 'ns' are incompatible.\n    Type 'string | number' is not assignable to type 'string'.\n      Type 'number' is not assignable to type 'string'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNDyIAoAPVRM6CogcwEpQBvHKFAlqiOABtIAOnFxO9AEQAJSONkAaUAtABqUIylk4AGTgB3GAGEAhokj1u3ANw4AvjhxkAngAdIoAGU2Dk4AeWgAOQIAWwAjGAAxYhJQAF5QeiIUUFZ2LlAAH1AiGPjoXlSAPlAANzgKABMXHBBQAFUs6zx-W0QKTiJoyCIyUApEUB9oSBrhskgGnElRwlJUILywyNLE5LTaIicgA'>Try</a></div></pre>\n<p>During development of this feature, we discovered a large number of inherently unsafe class hierarchies, including some in the DOM.\nBecause of this, the setting only applies to functions written in <em>function</em> syntax, not to those in <em>method</em> syntax:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type Methodish = {&amp;#13;    func(x: string | number): void;&amp;#13;}'>Methodish</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string | number'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> number)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> void;</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function fn(x: string): void'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"Hello, \"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">+</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: string'>x</data-lsp>.<data-lsp lsp='(method) String.toLowerCase(): string'>toLowerCase</data-lsp></span><span style=\"color: #333333\">());</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #008000\">// Ultimately an unsafe assignment, but not detected</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const m: Methodish'>m</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type Methodish = {&amp;#13;    func(x: string | number): void;&amp;#13;}'>Methodish</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp>: </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function fn(x: string): void'>fn</data-lsp></span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const m: Methodish'>m</data-lsp>.<data-lsp lsp='(method) func(x: string | number): void'>func</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">10</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAshwAsD2ATAlgZwVAvFA3gFBRQBmArgHYDGAFAB4BcUGwATmpQOZQA+UlcgFsARhDYBKZgDckaFAG5CAXyWEKNYGiSUylBs1YduEgsSjUdGJABsIAOhtIutAEQAJCDacAaKK6gAaih6e2AkABkkAHdxAGEAQwwIWgkJJWVCQgB6bKgAVRstIQTgLxAoBN0qDATSaCSMNC5KIQhKYD8RcmABJF6UeAhqMpRCS0pWKCFmOERUTGw8IhINamZSSh8VJSF7NdoARgAGdKA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.6\" href=\"/docs/handbook/release-notes/typescript-2-6.html\">2.6</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictNullChecks-config'><a aria-label=\"Link to the compiler option: strictNullChecks\" id='strictNullChecks' href='#strictNullChecks' name='strictNullChecks' aria-labelledby=\"strictNullChecks-config\">#</a> Strict Null Checks - <code>strictNullChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When <code>strictNullChecks</code> is <code>false</code>, <code>null</code> and <code>undefined</code> are effectively ignored by the language.\nThis can lead to unexpected errors at runtime.</p>\n<p>When <code>strictNullChecks</code> is <code>true</code>, <code>null</code> and <code>undefined</code> have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.</p>\n<p>For example with this TypeScript code, <code>users.find</code> has no guarantee that it will actually find a user, but you can\nwrite code as though it will:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span>\n<span style=\"color: #333333\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #333333\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">12</span><span style=\"color: #333333\"> },</span>\n<span style=\"color: #333333\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #333333\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">32</span><span style=\"color: #333333\"> },</span>\n<span style=\"color: #333333\">];</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>loggedInUser</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp>.<data-lsp lsp='(method) Array&amp;lt;{ name: string; age: number; }>.find(predicate: (value: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}, index: number, obj: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]) => unknown, thisArg?: any): {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} (+1 overload)'>find</data-lsp></span><span style=\"color: #333333\">((</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) name: string'>name</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #333333\">);</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>loggedInUser</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) age: number'>age</data-lsp></span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0ByBXANhgwgCwKaIDWkAXKAGYCGGk+AUCBNFbAOb7TkCiAygEwAGAIwBWegBNCGVvlCIA9gDsYoDArYcJASSUBVOrCVUAtvnIwEStgG569RSuig0hyKAC8oANr1QoAG9QYzNyACIAeQAjAE8wgBpQKg5yYX5QAF94v0Dg03NQMIAJfHxYKgSklNAAZnSs+gBdOwdlVXVNfB19Q08XNwA6CnglCQAKMbQASk8APhcBkLkPFbUNLV0DMqWpu0dIBQx8AY6xjo2esoHk-F2gA'>Try</a></div></pre>\n<p>Setting <code>strictNullChecks</code> to <code>true</code> will raise an error that you have not made a guarantee that the <code>loggedInUser</code> exists before trying to use it.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span>\n<span style=\"color: #333333\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Oby\"</span><span style=\"color: #333333\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">12</span><span style=\"color: #333333\"> },</span>\n<span style=\"color: #333333\">  { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style=\"color: #A31515\">\"Heera\"</span><span style=\"color: #333333\">, <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">32</span><span style=\"color: #333333\"> },</span>\n<span style=\"color: #333333\">];</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined'>loggedInUser</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]'>users</data-lsp>.<data-lsp lsp='(method) Array&amp;lt;{ name: string; age: number; }>.find(predicate: (value: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}, index: number, obj: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}[]) => unknown, thisArg?: any): {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined (+1 overload)'>find</data-lsp></span><span style=\"color: #333333\">((</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>u</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) name: string'>name</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const loggedInUsername: string'>loggedInUsername</data-lsp></span><span style=\"color: #333333\">);</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='const loggedInUser: {&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;} | undefined'>loggedInUser</data-lsp></data-err></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) age: number'>age</data-lsp></span><span style=\"color: #333333\">);</span>\n<span class=\"error\"><span>Object is possibly 'undefined'.</span><span class=\"code\">2532</span></span><span class=\"error-behind\">Object is possibly 'undefined'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME50FYM0AoECAFwENoBzSM1AUQGU0AGNkscRM6ASwDGZAHIBXADbiAwgAtIAgNaIiAE3niqkUALgA7HqHFxqtFQEldAVUQxdFALaRUPfruoBuIkR36yoUTZIoAC8oADaRKCgAN6gdo6oAEQA8gBGAJ6JADSgFLSoAIxooAC+WZExcQ5OoIkAEpAwFNm5+aCEpeUAup7eegZGJpDmVoEh-oGIAHQAZny6KgAUi6IAlCEAfP5T8VrB+4bGphbWttWrnj6IcOKQU4OLg8ejMFN5kBdAA'>Try</a></div></pre>\n<p>The second example failed because the array’s <code>find</code> function looks a bit like this simplification:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// When strictNullChecks: true</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> Array </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  find(predicate</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> any, </span><span style=\"color: #1A1A1A\">index</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> boolean)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> S </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> undefined;</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #008000\">// When strictNullChecks: false the undefined is removed from the type system,</span>\n<span style=\"color: #008000\">// allowing you to write code which assumes it always found a result</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> Array </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  find(predicate</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> any, </span><span style=\"color: #1A1A1A\">index</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> boolean)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> S;</span>\n<span style=\"color: #333333\">};</span></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='strictPropertyInitialization-config'><a aria-label=\"Link to the compiler option: strictPropertyInitialization\" id='strictPropertyInitialization' href='#strictPropertyInitialization' name='strictPropertyInitialization' aria-labelledby=\"strictPropertyInitialization-config\">#</a> Strict Property Initialization - <code>strictPropertyInitialization</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">class</span><span style=\"color: #333333\"> <data-lsp lsp='class UserAccount'>UserAccount</data-lsp> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) UserAccount.name: string'>name</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string;</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) UserAccount.accountType: string'>accountType</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"user\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(property) UserAccount.email: string'>email</data-lsp></data-err></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string;</span>\n<span class=\"error\"><span>Property 'email' has no initializer and is not definitely assigned in the constructor.</span><span class=\"code\">2564</span></span><span class=\"error-behind\">Property 'email' has no initializer and is not definitely assigned in the constructor.</span><span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) UserAccount.address: string | undefined'>address</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> undefined;</span>\n\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">constructor</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) UserAccount.name: string'>name</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) name: string'>name</data-lsp></span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #008000\">// Note that this.email is not set</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYBsAWAUAMYA2AhooqAKqIwCCBBcArgHYAuoA3nqKCyQFtIqRG2gBLFgHMA3D1AkGzdgBUAngAdIoALygARExrR9c+ZAElxREWMmz5JACZPokcrYnTQAH1CsnSAAzSUgnM15GFlFoJgI2BAAKfiFPewBKLnleNgALcUQAOhTtPRK5Xl4QUAA5ODZtPJIOPILCiysiUAK+etAaNnkAXzwhoA'>Try</a></div></pre>\n<p>In the above case:</p>\n<ul>\n<li><code>this.name</code> is set specifically.</li>\n<li><code>this.accountType</code> is set by default.</li>\n<li><code>this.email</code> is not set and raises an error.</li>\n<li><code>this.address</code> is declared as potentially <code>undefined</code> which means it does not have to be set.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code>, unless <code>strict</code> is set</p>\n</li>\n<li><span>Related:</span><p><a href='#strict' aria-label=\"Jump to compiler option info for strict\" ><code>strict</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Module_Resolution_Options_6174' ><a href='#Module_Resolution_Options_6174' name='Module_Resolution_Options_6174' aria-label=\"Link to the section Module Resolution\" aria-labelledby='Module_Resolution_Options_6174'>#</a>Module Resolution</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='allowSyntheticDefaultImports-config'><a aria-label=\"Link to the compiler option: allowSyntheticDefaultImports\" id='allowSyntheticDefaultImports' href='#allowSyntheticDefaultImports' name='allowSyntheticDefaultImports' aria-labelledby=\"allowSyntheticDefaultImports-config\">#</a> Permetti Import Sintetici Predefiniti - <code>allowSyntheticDefaultImports</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando è impostato a true, <code>allowSyntheticDefaultImports</code> permette di scrivere un import così:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">React</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #333333\">;</span></code></div></pre>\n<p>Al posto di:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">React</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #333333\">;</span></code></div></pre>\n<p>Quando un modulo <strong>non</strong> specifica esplicitamente un export predefinito.</p>\n<p>Per esempio, senza <code>allowSyntheticDefaultImports</code> impostato a true:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\"><data-err>// @filename: utilFunctions.js</data-err></span>\n<span class=\"error\"><span>Module '\"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/utilFunctions\"' has no default export.</span><span class=\"code\">1192</span></span><span class=\"error-behind\">Module '\"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/utilFunctions\"' has no default export.</span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const getStringLength: (str: any) => any'>getStringLength</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) str: any'>str</data-lsp></span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) str: any'>str</data-lsp></span><span style=\"color: #333333\">.<data-lsp lsp='any'>length</data-lsp>;</span>\n\n<span style=\"color: #333333\"><data-lsp lsp='var module: {&amp;#13;    &amp;quot;\\&amp;quot;/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/utilFunctions\\&amp;quot;&amp;quot;: typeof import(&amp;quot;/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/utilFunctions&amp;quot;);&amp;#13;}'>module</data-lsp>.<data-lsp lsp='module &amp;quot;/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/utilFunctions&amp;quot;'>exports</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) const getStringLength: (str: any) => any&amp;#13;import getStringLength'>getStringLength</data-lsp></span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='import utils'>utils</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./utilFunctions\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const count: any'>count</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='import utils'>utils</data-lsp>.<data-lsp lsp='any'>getStringLength</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"Check JS\"</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwCYCsBOdacMAoECAYwAtIyBrAKURLHAEMAbNuAdwaYkkQBZOABMArm0gBJAHYAXGHAAOqAGbtEkPuFUBLSTJYBbSKjFz9AMTEyyFuDMQA6AFaNS4GXClGlbXWS6cgCCMgCeahpaZA6IcqAA5pByAMpy0LoyCQAykFlyFKAAvKAAFHHQAJTFAHygFU4GCQUA3ERERqISkE6QAB5KCHKIxaAA3kSgiclpGVm5+RQANEQAvm3aegbGpqCZIv1Ow0S6vkOg5vojqvBGoABETsCXbNa29o73GzGO8TE28RKL2cSVS6UyOTyzQopXuAGEqLRQHQUvdKi0gA'>Try</a></div></pre>\n<p>Questo codice segnala un errore perché un oggetto <code>default</code> che puoi importare non è presente.Anche se sembra che dovrebbe esserci. Per convenienza, se un oggetto <code>default</code> non è presente un transpiler come Babel automaticamente lo creerà.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #008000\">// @filename: utilFunctions.js</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">getStringLength </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">str</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">str</span><span style=\"color: #333333\">.length;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">allFunctions </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\">getStringLength</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #333333\">module.exports </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">allFunctions</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">module.exports.</span><span style=\"color: #1A1A1A\">default</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">allFunctions</span><span style=\"color: #333333\">;</span></code></div></pre>\n<p>Questo flag non apporta cambiamenti al JavaScript emesso da TypeScript, è solo per controllare il tipo. Questa opzione porta il comportamento di TypeScript in linea con Babel emettendo un codice extra in modo di rendere l’uso di un export predefinito più ergonomico.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>module === \"system\" or esModuleInterop</p>\n</li>\n<li><span>Related:</span><p><a href='#esModuleInterop' aria-label=\"Jump to compiler option info for esModuleInterop\" ><code>esModuleInterop</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUmdGlobalAccess-config'><a aria-label=\"Link to the compiler option: allowUmdGlobalAccess\" id='allowUmdGlobalAccess' href='#allowUmdGlobalAccess' name='allowUmdGlobalAccess' aria-labelledby=\"allowUmdGlobalAccess-config\">#</a> Permetti Accesso Globale UMD - <code>allowUmdGlobalAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando viene impostato a <code>true</code>, il flag <code>allowUmdGlobalAccess</code> ti permette ad accedere ai export UMD come globali dentro l’archivio dei moduli. Un file modulo è un file che ha dei imports e/o exports. Senza questo flag per usare un export di un modulo UMD è necessario dichiarare un import.</p>\n<p>Un esempio di utilizzo di questo flag è un progetto web dove si conoscono le librerie particolari (come jQuery o Lodash) che saranno sempre disponibili al runtime, ma non puoi accedervi con un’import.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.5\" href=\"/docs/handbook/release-notes/typescript-3-5.html\">3.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='baseUrl-config'><a aria-label=\"Link to the compiler option: baseUrl\" id='baseUrl' href='#baseUrl' name='baseUrl' aria-labelledby=\"baseUrl-config\">#</a> URL Di Base - <code>baseUrl</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Ti permette di definire una directory di base per risolvere i nomi dei moduli non assoluti.</p>\n<p>Puoi definire una cartella root dove puoi fare una risoluzione dei file assoluta. Per esempio.</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">URLBase\n├── ex.ts\n├── ciao\n│   └── mondo.ts\n└── tsconfig.json</span></code></div></pre>\n<p>Con <code>\"baseUrl\": \"./\"</code> dentro il progetto, TypeScript andrà a procurare i file iniziando dalla stessa cartella in cui si trova <code>tsconfig.json</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">ciaoMondo</span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"ciao/mondo\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">ciaoMondo</span><span style=\"color: #333333\">);</span></code></div></pre>\n<p>Se sei stanco di vedere sempre i import come <code>\"../\"</code> o <code>\"./\"</code>. O che devi sempre cambiargli quando sposti i file, questo è un ottimo modo per risolvere questo problema.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='esModuleInterop-config'><a aria-label=\"Link to the compiler option: esModuleInterop\" id='esModuleInterop' href='#esModuleInterop' name='esModuleInterop' aria-labelledby=\"esModuleInterop-config\">#</a> ES Module Interop - <code>esModuleInterop</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default (with <code>esModuleInterop</code> false or not set) TypeScript treats CommonJS/AMD/UMD modules similar to ES6 modules. In doing this, there are two parts in particular which turned out to be flawed assumptions:</p>\n<ul>\n<li>a namespace import like <code>import * as moment from \"moment\"</code> acts the same as <code>const moment = require(\"moment\")</code></li>\n<li>a default import like <code>import moment from \"moment\"</code> acts the same as <code>const moment = require(\"moment\").default</code></li>\n</ul>\n<p>This mis-match causes these two issues:</p>\n<ul>\n<li>the ES6 modules spec states that a namespace import (<code>import * as x</code>) can only be an object, by having TypeScript\ntreating it the same as <code>= require(\"x\")</code> then TypeScript allowed for the import to be treated as a function and be callable. This breaks the spec’s recommendations.</li>\n<li>while accurate to the ES6 modules spec, most libraries with CommonJS/AMD/UMD modules didn’t conform as strictly as TypeScript’s implementation.</li>\n</ul>\n<p>Turning on <code>esModuleInterop</code> will fix both of these problems in the code transpiled by TypeScript. The first changes the behavior in the compiler,the second is fixed by two new helper functions which provide a shim to ensure compatibility in the emitted JavaScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">fs</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"lodash\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #1A1A1A\">fs.readFileSync</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"file.txt\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"utf8\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #1A1A1A\">_.chunk</span><span style=\"color: #333333\">([</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #333333\">], </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">);</span></code></div></pre>\n<p>With <code>esModuleInterop</code> disabled:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\">Object.defineProperty</span><span style=\"color: #333333\">(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">fs </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">lodash_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"lodash\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #1A1A1A\">fs.readFileSync</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"file.txt\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"utf8\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #1A1A1A\">lodash_1.default.chunk</span><span style=\"color: #333333\">([</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #333333\">], </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAgigFtA7rALYCWALhmOAKYoCy0AJgK4A2VAkpKVUgA4BcoAGYBDFiioUIhRqyqCAxtEIzIAK3TFCvZKVAAqUCJTCTQpIVAAiISisBuNFp3w9AfWEXrLRsewO0NFsAOngqEQYAMWI2AGUAT0gFAAobGKpg0gAPUisAGmsmUiEADisASkc3YIVsJkgAa2SAbSsRfOsAIw6rBR6GKwBdAoAmSqA'>Try</a></div></pre>\n<p>With <code>esModuleInterop</code> set to <code>true</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__createBinding </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__createBinding</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> (Object.</span><span style=\"color: #1A1A1A\">create</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">k2</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">k2</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #333333\">) </span><span style=\"color: #1A1A1A\">k2</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">Object.defineProperty</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">k2</span><span style=\"color: #333333\">, { enumerable: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">, get: </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\">() { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #333333\">]; } });</span>\n<span style=\"color: #333333\">}) </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">k2</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">k2</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">undefined</span><span style=\"color: #333333\">) </span><span style=\"color: #1A1A1A\">k2</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">k2</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">m</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #333333\">];</span>\n<span style=\"color: #333333\">}));</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__setModuleDefault </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__setModuleDefault</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> (Object.</span><span style=\"color: #1A1A1A\">create</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">Object.defineProperty</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #333333\">, { enumerable: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">, value: </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #333333\">}) </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">o</span><span style=\"color: #333333\">[</span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">});</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__importStar </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__importStar</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__esModule</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">result </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {};</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">!=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">for</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">k </span><span style=\"color: #0000FF\">in</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">!==</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">Object.prototype.hasOwnProperty.call</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #333333\">)) </span><span style=\"color: #1A1A1A\">__createBinding</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">__setModuleDefault</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__importDefault </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__importDefault</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__esModule</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> { </span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #333333\">: </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\"> };</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #1A1A1A\">Object.defineProperty</span><span style=\"color: #333333\">(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">fs </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__importStar</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #333333\">));</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">lodash_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__importDefault</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"lodash\"</span><span style=\"color: #333333\">));</span>\n<span style=\"color: #1A1A1A\">fs.readFileSync</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"file.txt\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"utf8\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #1A1A1A\">lodash_1.default.chunk</span><span style=\"color: #333333\">([</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #333333\">], </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAgigFtA7rALYCWALhmOAKYoCy0AJgK4A2VAkpKVUgA4URCjVlQBcoAMbRCQyACt0xQr2SlQAKlABDFKABmuvUkKgARAdMBuNEpXw1AfX3GzLRjuxW0aAwDp4VFoMAGLEbADKAJ6QEgAU5mFUvqQAHqSmADRmTKR6ABymAJTWDr4S2EyQANaxANqmWplmAEZNphJtDKYAulkATMVAA'>Try</a></div></pre>\n<p><em>Note</em>: You can make JS emit terser by enabling <a href=\"#importHelpers\"><code>importHelpers</code></a>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\">Object.defineProperty</span><span style=\"color: #333333\">(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">tslib_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"tslib\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">fs </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">tslib_1.__importStar</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"fs\"</span><span style=\"color: #333333\">));</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">lodash_1 </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">tslib_1.__importDefault</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"lodash\"</span><span style=\"color: #333333\">));</span>\n<span style=\"color: #1A1A1A\">fs.readFileSync</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"file.txt\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"utf8\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #1A1A1A\">lodash_1.default.chunk</span><span style=\"color: #333333\">([</span><span style=\"color: #A31515\">\"a\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"b\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"c\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"d\"</span><span style=\"color: #333333\">], </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAgigFtA7rALYCWALhmOAKYoCy0AJgK4A2VAkpKVUgA4URihXslIAJKi1490mcIUasqALlABjaIQWQAVuiEj4pUACpQAQxSgAZletJCoAES2nAbjQHRoAPo2HziyMltjuaGi2AHTwVOYMAGLEbADKAJ6QagAULklUkaQAHqROADTOTKTWABxOAJQePpFq2EyQANaZANpO5qXOAEZ9TmpDDE4AumUATPVAA'>Try</a></div></pre>\n<p>Enabling <code>esModuleInterop</code> will also enable <a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#allowSyntheticDefaultImports' aria-label=\"Jump to compiler option info for allowSyntheticDefaultImports\" ><code>allowSyntheticDefaultImports</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.7\" href=\"/docs/handbook/release-notes/typescript-2-7.html\">2.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='moduleResolution-config'><a aria-label=\"Link to the compiler option: moduleResolution\" id='moduleResolution' href='#moduleResolution' name='moduleResolution' aria-labelledby=\"moduleResolution-config\">#</a> Module Resolution - <code>moduleResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the module resolution strategy: <code>'node'</code> (Node.js) or <code>'classic'</code> (used in TypeScript before the release of 1.6).\nYou probably won’t need to use <code>classic</code> in modern code.</p>\n<p>There is a handbook reference page on <a href=\"/docs/handbook/module-resolution.html\">Module Resolution</a></p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>module === <code>AMD</code> or <code>UMD</code> or <code>System</code> or <code>ES6</code>, then <code>Classic</code><br/><br/>Otherwise <code>Node</code></p>\n</li>\n<li><span>Related:</span><p><a href='#module' aria-label=\"Jump to compiler option info for module\" ><code>module</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='paths-config'><a aria-label=\"Link to the compiler option: paths\" id='paths' href='#paths' name='paths' aria-labelledby=\"paths-config\">#</a> Paths - <code>paths</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>A series of entries which re-map imports to lookup locations relative to the <code>baseUrl</code>, there is a larger coverage of <code>paths</code> in <a href=\"/docs/handbook/module-resolution.html#path-mapping\">the handbook</a>.</p>\n<p><code>paths</code> lets you declare how TypeScript should resolve an import in your <code>require</code>/<code>import</code>s.</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#baseUrl'><data-lsp lsp=\"Specify the base directory to resolve non-relative module names.\">baseUrl</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\".\"</span><span style=\"color: #333333\">, </span><span style=\"color: #008000\">// this must be specified if \"paths\" is specified.</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#paths'><data-lsp lsp=\"Specify a set of entries that re-map imports to additional lookup locations.\">paths</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">      </span><span style=\"color: #0451A5\">\"jquery\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"node_modules/jquery/dist/jquery\"</span><span style=\"color: #333333\">] </span><span style=\"color: #008000\">// this mapping is relative to \"baseUrl\"</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>This would allow you to be able to write <code>import \"jquery\"</code>, and get all of the correct typing locally.</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#baseUrl'><data-lsp lsp=\"Specify the base directory to resolve non-relative module names.\">baseUrl</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"src\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#paths'><data-lsp lsp=\"Specify a set of entries that re-map imports to additional lookup locations.\">paths</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0451A5\">\"app/*\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"app/*\"</span><span style=\"color: #333333\">],</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0451A5\">\"config/*\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"app/_config/*\"</span><span style=\"color: #333333\">],</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0451A5\">\"environment/*\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"environments/*\"</span><span style=\"color: #333333\">],</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0451A5\">\"shared/*\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"app/_shared/*\"</span><span style=\"color: #333333\">],</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0451A5\">\"helpers/*\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"helpers/*\"</span><span style=\"color: #333333\">],</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0451A5\">\"tests/*\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"tests/*\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">    },</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>In this case, you can tell the TypeScript file resolver to support a number of custom prefixes to find code.\nThis pattern can be used to avoid long relative paths within your codebase.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveSymlinks-config'><a aria-label=\"Link to the compiler option: preserveSymlinks\" id='preserveSymlinks' href='#preserveSymlinks' name='preserveSymlinks' aria-labelledby=\"preserveSymlinks-config\">#</a> Preserve Symlinks - <code>preserveSymlinks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This is to reflect the same flag in Node.js; which does not resolve the real path of symlinks.</p>\n<p>This flag also exhibits the opposite behavior to Webpack’s <code>resolve.symlinks</code> option (i.e. setting TypeScript’s <code>preserveSymlinks</code> to true parallels setting Webpack’s <code>resolve.symlinks</code> to false, and vice-versa).</p>\n<p>With this enabled, references to modules and packages (e.g. <code>import</code>s and <code>/// &#x3C;reference type=\"...\" /></code> directives) are all resolved relative to the location of the symbolic link file, rather than relative to the path that the symbolic link resolves to.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='rootDirs-config'><a aria-label=\"Link to the compiler option: rootDirs\" id='rootDirs' href='#rootDirs' name='rootDirs' aria-labelledby=\"rootDirs-config\">#</a> Root Dirs - <code>rootDirs</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Using <code>rootDirs</code>, you can inform the compiler that there are many “virtual” directories acting as a single root.\nThis allows the compiler to resolve relative module imports within these “virtual” directories, as if they were merged in to one directory.</p>\n<p>For example:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\"> src\n └── views\n     └── view1.ts (can import \"./template1\", \"./view2`)\n     └── view2.ts (can import \"./template1\", \"./view1`)\n\n generated\n └── templates\n         └── views\n             └── template1.ts (can import \"./view1\", \"./view2\")</span></code></div></pre>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#rootDirs'><data-lsp lsp=\"Allow multiple folders to be treated as one when resolving modules.\">rootDirs</data-lsp></a>\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"src/views\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"generated/templates/views\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>This does not affect how TypeScript emits JavaScript, it only emulates the assumption that they will be able to\nwork via those relative paths at runtime.</p>\n<p><code>rootDirs</code> can be used to provide a separate “type layer” to files that are not TypeScript or JavaScript by providing a home for generated <code>.d.ts</code> files in another folder. This is technique is useful for bundled applications where you use <code>import</code> of files that aren’t necessarily code:</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #333333\"> src</span>\n<span style=\"color: #333333\"> └── index.ts</span>\n<span style=\"color: #333333\"> └── css</span>\n<span style=\"color: #333333\">     └── main.css</span>\n<span style=\"color: #333333\">     └── navigation.css</span>\n\n<span style=\"color: #333333\"> generated</span>\n<span style=\"color: #333333\"> └── css</span>\n<span style=\"color: #333333\">     └── main.css.d.ts</span>\n<span style=\"color: #333333\">     └── navigation.css.d.ts</span></code></div></pre>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#rootDirs'><data-lsp lsp=\"Allow multiple folders to be treated as one when resolving modules.\">rootDirs</data-lsp></a>\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"src\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"generated\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>This technique lets you generate types ahead of time for the non-code source files. Imports then work naturally based off the source file’s location.\nFor example <code>./src/index.ts</code> can import the file <code>./src/css/main.css</code> and TypeScript will be aware of the bundler’s behavior for that filetype via the corresponding generated declaration file.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) const appClass: &amp;quot;mainClassF3EC2&amp;quot;&amp;#13;import appClass'>appClass</data-lsp></span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./main.css\"</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKVzqIHQDGAzsfgCb4AuxAUPAB4AOA9gE5WiEuLGfJMmAYVjJSoALygARDjwixxAGIBmAKJCATNIDctEKAC0xwgFcqxw-rBQ4SNJlB5yjanWipWHUAG9QA4VFxAF9QSDYWVBl8YDkCEmJdIA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='typeRoots-config'><a aria-label=\"Link to the compiler option: typeRoots\" id='typeRoots' href='#typeRoots' name='typeRoots' aria-labelledby=\"typeRoots-config\">#</a> Type Roots - <code>typeRoots</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default all <em>visible</em> ”<code>@types</code>” packages are included in your compilation.\nPackages in <code>node_modules/@types</code> of any enclosing folder are considered <em>visible</em>.\nFor example, that means packages within <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, and so on.</p>\n<p>If <code>typeRoots</code> is specified, <em>only</em> packages under <code>typeRoots</code> will be included. For example:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#typeRoots'><data-lsp lsp=\"Specify multiple folders that act like `./node_modules/@types`.\">typeRoots</data-lsp></a>\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"./typings\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"./vendor/types\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>This config file will include <em>all</em> packages under <code>./typings</code> and <code>./vendor/types</code>, and no packages from <code>./node_modules/@types</code>.\nAll paths are relative to the <code>tsconfig.json</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#types' aria-label=\"Jump to compiler option info for types\" ><code>types</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='types-config'><a aria-label=\"Link to the compiler option: types\" id='types' href='#types' name='types' aria-labelledby=\"types-config\">#</a> Types - <code>types</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default all <em>visible</em> ”<code>@types</code>” packages are included in your compilation.\nPackages in <code>node_modules/@types</code> of any enclosing folder are considered <em>visible</em>.\nFor example, that means packages within <code>./node_modules/@types/</code>, <code>../node_modules/@types/</code>, <code>../../node_modules/@types/</code>, and so on.</p>\n<p>If <code>types</code> is specified, only packages listed will be included in the global scope. For instance:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#types'><data-lsp lsp=\"Specify type package names to be included without being referenced in a source file.\">types</data-lsp></a>\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"node\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"jest\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"express\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>This <code>tsconfig.json</code> file will <em>only</em> include <code>./node_modules/@types/node</code>, <code>./node_modules/@types/jest</code> and <code>./node_modules/@types/express</code>.\nOther packages under <code>node_modules/@types/*</code> will not be included.</p>\n<h3 id=\"what-does-this-affect\" style=\"position:relative;\"><a href=\"#what-does-this-affect\" aria-label=\"what does this affect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What does this affect?</h3>\n<p>This option does not affect how <code>@types/*</code> are included in your application code, for example if you had the above <code>compilerOptions</code> example with code like:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">moment</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"moment\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #1A1A1A\">moment</span><span style=\"color: #333333\">()</span><span style=\"color: #1A1A1A\">.format</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"MMMM Do YYYY, h:mm:ss a\"</span><span style=\"color: #333333\">);</span></code></div></pre>\n<p>The <code>moment</code> import would be fully typed.</p>\n<p>When you have this option set, by not including a module in the <code>types</code> array it:</p>\n<ul>\n<li>Will not add globals to your project (e.g <code>process</code> in node, or <code>expect</code> in Jest)</li>\n<li>Will not have exports appear as auto-import recommendations</li>\n</ul>\n<p>This feature differs from <a href=\"#typeRoots\"><code>typeRoots</code></a> in that it is about specifying only the exact types you want included, whereas <a href=\"#typeRoots\"><code>typeRoots</code></a> supports saying you want particular folders.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#typeRoots' aria-label=\"Jump to compiler option info for typeRoots\" ><code>typeRoots</code></a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Source_Map_Options_6175' ><a href='#Source_Map_Options_6175' name='Source_Map_Options_6175' aria-label=\"Link to the section Source Maps\" aria-labelledby='Source_Map_Options_6175'>#</a>Source Maps</h2>\n<p>In order to provide rich debugging tools and crash reports which make sense to developers, TypeScript supports\nemitting additional files which conform to the JavaScript Source Map standards.</p>\n<p>These are emitted as <code>.map</code> files which live alongside the file they represent.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='inlineSourceMap-config'><a aria-label=\"Link to the compiler option: inlineSourceMap\" id='inlineSourceMap' href='#inlineSourceMap' name='inlineSourceMap' aria-labelledby=\"inlineSourceMap-config\">#</a> Inline Source Map - <code>inlineSourceMap</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, instead of writing out a <code>.js.map</code> file to provide source maps, TypeScript will embed the source map content in the <code>.js</code> files.\nAlthough this results in larger JS files, it can be convenient in some scenarios.\nFor example, you might want to debug JS files on a webserver that doesn’t allow <code>.map</code> files to be served.</p>\n<p>Mutually exclusive with <a href=\"#sourceMap\"><code>sourceMap</code></a>.</p>\n<p>For example, with this TypeScript:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #333333\">);</span></code></div></pre>\n<p>Converts to this JavaScript:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA'>Try</a></div></pre>\n<p>Then enable building it with <code>inlineSourceMap</code> enabled there is a comment at the bottom of the file which includes\na source-map for the file.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMifQ==</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQWQIYAOAUCBAM4AWKA7gKIC2kALsVitOc6JQrLCgDqKDLAAmoALygARJUgyA3Gw7kUsBADoBAcwAUvfkJHiAlIqA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='inlineSources-config'><a aria-label=\"Link to the compiler option: inlineSources\" id='inlineSources' href='#inlineSources' name='inlineSources' aria-labelledby=\"inlineSources-config\">#</a> Inline Sources - <code>inlineSources</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When set, TypeScript will include the original content of the <code>.ts</code> file as an embedded string in the source map.\nThis is often useful in the same cases as <code>inlineSourceMap</code>.</p>\n<p>Requires either <code>sourceMap</code> or <code>inlineSourceMap</code> to be set.</p>\n<p>For example, with this TypeScript:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const helloWorld: &amp;quot;hi&amp;quot;'>helloWorld</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const helloWorld: &amp;quot;hi&amp;quot;'>helloWorld</data-lsp></span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBAFgUwDZJAdRAJyQExgXhgCI4BLIgbgChRIQkEA6VAcwApEV0tcBKCoA'>Try</a></div></pre>\n<p>By default converts to this JavaScript:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA'>Try</a></div></pre>\n<p>Then enable building it with <code>inlineSources</code> and <code>inlineSourceMap</code> enabled there is a comment at the bottom of the file which includes\na source-map for the file.\nNote that the end is different from the example in <a href=\"#inlineSourceMap\"><code>inlineSourceMap</code></a> because the source-map now contains the original source code also.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">helloWorld </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"hi\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">helloWorld</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #008000\">//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoZWxsb1dvcmxkID0gXCJoaVwiO1xuY29uc29sZS5sb2coaGVsbG9Xb3JsZCk7Il19</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQZwFAgQzzTLrYICyAhgA6Fji4AWKA7gKIC2kALviwpouPqBYJYsFAHUUGWABNQAXlAAiFpHUBuQcNwpYCAHTSA5gAoJU2fKUBKHUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='mapRoot-config'><a aria-label=\"Link to the compiler option: mapRoot\" id='mapRoot' href='#mapRoot' name='mapRoot' aria-labelledby=\"mapRoot-config\">#</a> Map Root - <code>mapRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where debugger should locate map files instead of generated locations.\nThis string is treated verbatim inside the source-map, for example:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#sourceMap'><data-lsp lsp=\"Create source map files for emitted JavaScript files.\">sourceMap</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#mapRoot'><data-lsp lsp=\"Specify the location where debugger should locate map files instead of generated locations.\">mapRoot</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/sourcemaps/\"</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Would declare that <code>index.js</code> will have sourcemaps at <code>https://my-website.com/debug/sourcemaps/index.js.map</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='sourceRoot-config'><a aria-label=\"Link to the compiler option: sourceRoot\" id='sourceRoot' href='#sourceRoot' name='sourceRoot' aria-labelledby=\"sourceRoot-config\">#</a> Source Root - <code>sourceRoot</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the location where a debugger should locate TypeScript files instead of relative source locations.\nThis string is treated verbatim inside the source-map where you can use a path or a URL:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#sourceMap'><data-lsp lsp=\"Create source map files for emitted JavaScript files.\">sourceMap</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#sourceRoot'><data-lsp lsp=\"Specify the root path for debuggers to find the reference source code.\">sourceRoot</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"https://my-website.com/debug/source/\"</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Would declare that <code>index.js</code> will have a source file at <code>https://my-website.com/debug/source/index.ts</code>.</p>\n</div>\n<ul class='compiler-option-md'></ul>\n</div></section>\n<div class='category'>\n<h2 id='Additional_Checks_6176' ><a href='#Additional_Checks_6176' name='Additional_Checks_6176' aria-label=\"Link to the section Linter Checks\" aria-labelledby='Additional_Checks_6176'>#</a>Linter Checks</h2>\n<p>A collection of extra checks, which somewhat cross the boundaries of compiler vs linter. You may prefer to use a tool like <a href=\"https://github.com/typescript-eslint/typescript-eslint#typescript-eslint\">eslint</a> over these options if you are looking for more in-depth rules.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='noFallthroughCasesInSwitch-config'><a aria-label=\"Link to the compiler option: noFallthroughCasesInSwitch\" id='noFallthroughCasesInSwitch' href='#noFallthroughCasesInSwitch' name='noFallthroughCasesInSwitch' aria-labelledby=\"noFallthroughCasesInSwitch-config\">#</a> No Fallthrough Cases In Switch - <code>noFallthroughCasesInSwitch</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors for fallthrough cases in switch statements.\nEnsures that any non-empty case inside a switch statement includes either <code>break</code> or <code>return</code>.\nThis means you won’t accidentally ship a case fallthrough bug.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: number'>a</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> number </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">6</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">switch</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const a: number'>a</data-lsp></span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">case</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">:</span>\n<span class=\"error\"><span>Fallthrough case in switch.</span><span class=\"code\">7029</span></span><span class=\"error-behind\">Fallthrough case in switch.</span><span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"even\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">case</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">:</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"odd\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">break</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsDEEMA2iAuALATtArgczQMLwDOApsQJKQDKA7gJYoDGaAUCBKRlhsQFygA7AAYATAE5WTaJGIpQ8AZGwBbAEZdQAXlAA2ANytWxBszSgAFPACUoAN6tQoJiVKhhfR0+czi0RKQAdIjQuBYARKQAbqSQ4daGTi5koACMnt4+sv5BIWHh0AAmhfGJ3moYpPAA1oYAvkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitReturns-config'><a aria-label=\"Link to the compiler option: noImplicitReturns\" id='noImplicitReturns' href='#noImplicitReturns' name='noImplicitReturns' aria-labelledby=\"noImplicitReturns-config\">#</a> No Implicit Returns - <code>noImplicitReturns</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When enabled, TypeScript will check all code paths in a function to ensure they return a value.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function lookupHeadphonesManufacturer(color: &amp;quot;blue&amp;quot; | &amp;quot;black&amp;quot;): string'>lookupHeadphonesManufacturer</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) color: &amp;quot;blue&amp;quot; | &amp;quot;black&amp;quot;'>color</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"black\"</span><span style=\"color: #333333\">)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"><data-err> string {</data-err></span>\n<span class=\"error\"><span>Function lacks ending return statement and return type does not include 'undefined'.</span><span class=\"code\">2366</span></span><span class=\"error-behind\">Function lacks ending return statement and return type does not include 'undefined'.</span><span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) color: &amp;quot;blue&amp;quot; | &amp;quot;black&amp;quot;'>color</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"blue\"</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"beats\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"bose\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsX0bWgFABmArgHYDGALgJZzmgA2ccA1qQA4ASkAhgBNOACwaREAWT7lSxPjVLQYACkpwW0VACIARk1KQtoAD6hdTeWy0BKVImrRa5AOagA3oVChaxUKvUIoAC8IWZ6Bjbunl6gStSKjLr81IhaANzRAL6gkEyIkFExYXD56VmEmUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noPropertyAccessFromIndexSignature-config'><a aria-label=\"Link to the compiler option: noPropertyAccessFromIndexSignature\" id='noPropertyAccessFromIndexSignature' href='#noPropertyAccessFromIndexSignature' name='noPropertyAccessFromIndexSignature' aria-labelledby=\"noPropertyAccessFromIndexSignature-config\">#</a> noPropertyAccessFromIndexSignature - <code>noPropertyAccessFromIndexSignature</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This setting ensures consistency between accessing a field via the “dot” (<code>obj.key</code>) syntax, and “indexed” (<code>obj[\"key\"]</code>) and the way which the property is declared in the type.</p>\n<p>Without this flag, TypeScript will allow you to use the dot syntax to access fields which are not defined:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #333333\"> <data-lsp lsp='interface GameSettings'>GameSettings</data-lsp> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #008000\">// Known up-front properties</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) GameSettings.speed: &amp;quot;fast&amp;quot; | &amp;quot;medium&amp;quot; | &amp;quot;slow&amp;quot;'>speed</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"fast\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"medium\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"slow\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) GameSettings.quality: &amp;quot;high&amp;quot; | &amp;quot;low&amp;quot;'>quality</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"high\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"low\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #333333\">  </span><span style=\"color: #008000\">// Assume anything unknown to the interface</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #008000\">// is a string.</span>\n<span style=\"color: #333333\">  [</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) key: string'>key</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string]</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string;</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const settings: GameSettings'>settings</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function getSettings(): GameSettings'>getSettings</data-lsp></span><span style=\"color: #333333\">();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const settings: GameSettings'>settings</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) GameSettings.speed: &amp;quot;fast&amp;quot; | &amp;quot;medium&amp;quot; | &amp;quot;slow&amp;quot;'>speed</data-lsp></span><span style=\"color: #333333\">;</span>\n<span class='query'>//       ^ = (property) GameSettings.speed: \"fast\" | \"medium\" | \"slow\"</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const settings: GameSettings'>settings</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) GameSettings.quality: &amp;quot;high&amp;quot; | &amp;quot;low&amp;quot;'>quality</data-lsp></span><span style=\"color: #333333\">;</span>\n<span class='query'>//       ^ = (property) GameSettings.quality: \"high\" | \"low\"</span>\n\n<span style=\"color: #008000\">// Unknown key accessors are allowed on</span>\n<span style=\"color: #008000\">// this object, and are `string`</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const settings: GameSettings'>settings</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='string'>username</data-lsp></span><span style=\"color: #333333\">;</span>\n<span class='query'>//       ^ = string</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYsCgAmkBjAGwENpJQAzAVwDsCAXASzltAHNIGBlL529ogAUASlQBxEgFtIvBv0EBubCFABaDQWoMNa7E1oMYlEgQqSZchYlABvbKFCqA0rTgB3NtQAOayvENQb3hvGGZIRAdQRFDIXFQAIhNEBgTQAB9QBJlcJmopNMyExCIPBOVHAEdqEiImBgBPRIALJnZmwqzS93LsKNUAQUREfIoSWgaGVoFQOgBrN09QBjhl5ooDI2gTM36wJhsSaIZoA3YAOiiAbTnIJuPTgQBdVBTH9mUAXz6CVhTovhnGwAXg4XCsQNEykQgIEiHOMUgcWUqkcaNAAD0APzYGHyIHnaq1eoNFFgdGObF9VQAVVoCw8bFuDVApjMwwQh3IrKI3TioFYKjAUwOAoARgArQgMAA0rNouFZ3IABm8zsrcbDBOdqDDoLRpJAyRTKVigA'>Try</a></div></pre>\n<p>Turning the flag on will raise an error because the unknown field uses dot syntax instead of indexed syntax.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const settings: GameSettings'>settings</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function getSettings(): GameSettings'>getSettings</data-lsp></span><span style=\"color: #333333\">();</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const settings: GameSettings'>settings</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) GameSettings.speed: &amp;quot;fast&amp;quot; | &amp;quot;medium&amp;quot; | &amp;quot;slow&amp;quot;'>speed</data-lsp></span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const settings: GameSettings'>settings</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) GameSettings.quality: &amp;quot;high&amp;quot; | &amp;quot;low&amp;quot;'>quality</data-lsp></span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #008000\">// This would need to be settings[\"username\"];</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const settings: GameSettings'>settings</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='string'>username</data-lsp></data-err></span><span style=\"color: #333333\">;</span>\n<span class=\"error\"><span>Property 'username' comes from an index signature, so it must be accessed with ['username'].</span><span class=\"code\">4111</span></span><span class=\"error-behind\">Property 'username' comes from an index signature, so it must be accessed with ['username'].</span><span class='query'>//       ^ = string</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYsCgQQHZwAK8ADjAC4CeAggMZ2SKIBi8AtgJL4AmkAHgGUAlgHN8AQwoBXaJGx86AGwlzQAM2n46FYXHyhRkCoOO78oxAAoAlKgDiE9pFMVzlgNzZh+CjHUSjKCOzq7uiKAA3tigoIjkkDyoAEQBiBTJoAA+oMnOPMLS7Jk5yYhKcADuyV6xAI7SEkrC1CkAFmJtJbkV1bWgANoA1pBUqOnQPqIAuuMUkxZeAL64YAC0G3TSFBtr2HT66XFmUxEAvIbGYae2XognFogAdPGQiXcPlk8NTS1UXqtQAAVDoRSpwaRKHigfBvaEUOCgABGkGOblOA2S0nu0EkzmS0w+6MeT2xMDxkC8eFiNNAAD0APxAA'>Try</a></div></pre>\n<p>The goal of this flag is to signal intent in your calling syntax about how certain you are this property exists.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUncheckedIndexedAccess-config'><a aria-label=\"Link to the compiler option: noUncheckedIndexedAccess\" id='noUncheckedIndexedAccess' href='#noUncheckedIndexedAccess' name='noUncheckedIndexedAccess' aria-labelledby=\"noUncheckedIndexedAccess-config\">#</a> noUncheckedIndexedAccess - <code>noUncheckedIndexedAccess</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript has a way to describe objects which have unknown keys but known values on an object, via index signatures.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">interface</span><span style=\"color: #333333\"> <data-lsp lsp='interface EnvironmentVars'>EnvironmentVars</data-lsp> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) EnvironmentVars.NAME: string'>NAME</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string;</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) EnvironmentVars.OS: string'>OS</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string;</span>\n\n<span style=\"color: #333333\">  </span><span style=\"color: #008000\">// Unknown properties are covered by this index signature.</span>\n<span style=\"color: #333333\">  [</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) propName: string'>propName</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string]</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string;</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const env: EnvironmentVars'>env</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='interface EnvironmentVars'>EnvironmentVars</data-lsp></span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #008000\">// Declared as existing</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const sysName: string'>sysName</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const env: EnvironmentVars'>env</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) EnvironmentVars.NAME: string'>NAME</data-lsp></span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const os: string'>os</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const env: EnvironmentVars'>env</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) EnvironmentVars.OS: string'>OS</data-lsp></span><span style=\"color: #333333\">;</span>\n<span class='query'>//    ^ = const os: string</span>\n\n<span style=\"color: #008000\">// Not declared, but because of the index</span>\n<span style=\"color: #008000\">// signature, then it is considered a string</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const nodeEnv: string'>nodeEnv</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const env: EnvironmentVars'>env</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='string'>NODE_ENV</data-lsp></span><span style=\"color: #333333\">;</span>\n<span class='query'>//    ^ = const nodeEnv: string</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKIgG7CgexAWwnADU4oBnZAbwChlkA5AQQFlUAuZcsKUAcwDcdZAHkAyp268QgmsID085AFUQAaxA4A7iGQAHXHuhhgESmRQIcGaBAAmyAEYBPZGAAWwSqDsQAHlzAfCBwYACuUBAAdMIA2gY4egxwhJI8-AC6adKyAL5yvggANhbIViDcyEQYnOhYuAREYKQUQjSKyAAiEMUWDnCU-l4mMjTlleTO5MmEyAC8VZhRzGxC42DIOJQL1VHiQh30yAB6APxyHQw4G4UlkXYANE5hG449cGHkKDgwbu4oPn87SU5CCIXCkSeHiIyGAGy8ZTwoN892QcC46VG62Qml8dXmiwwyxEnVQAH1UAxiAclEczkA'>Try</a></div></pre>\n<p>Turning on <code>noUncheckedIndexedAccess</code> will add <code>undefined</code> to any un-declared field in the type.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const env: EnvironmentVars'>env</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='interface EnvironmentVars'>EnvironmentVars</data-lsp></span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #008000\">// Declared as existing</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const sysName: string'>sysName</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const env: EnvironmentVars'>env</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) EnvironmentVars.NAME: string'>NAME</data-lsp></span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const os: string'>os</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const env: EnvironmentVars'>env</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) EnvironmentVars.OS: string'>OS</data-lsp></span><span style=\"color: #333333\">;</span>\n<span class='query'>//    ^ = const os: string</span>\n\n<span style=\"color: #008000\">// Not declared, but because of the index</span>\n<span style=\"color: #008000\">// signature, then it is considered a string</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const nodeEnv: string | undefined'>nodeEnv</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const env: EnvironmentVars'>env</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='string | undefined'>NODE_ENV</data-lsp></span><span style=\"color: #333333\">;</span>\n<span class='query'>//    ^ = const nodeEnv: string | undefined</span></code><a href='https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKIgG7CgexAWwnADU4oBnZAbwChlkA5AQQFlUAuZcsKUAcwDcdZAHkAyp268QgmsID085AFUQAaxA4A7iGQAHXHuhhgESmRQIcGaBAAmyAEYBPZGAAWwSqDsQAHlzAfCBwYACuUBAAdMIA2gY4egxwhJI8-AC6adKyAL40isgAApqqCO4QCGr2AJIgvn72TAhI5OQFSgC03QhhYN2dNL4IADYWyFYg3MhEGJzoWLgERGCkFEIdyAAilWORDnCU-l4mMjST0+TO5MmEyAC8M5hRzGxCF2DIOJSPs1HiQkK9GQAD0APxyQoMHCfYZ7ewAGicfSclTgYXIKBwMDcFWQPn8m3IQRC4UiSI8RHxny8EzwxN8+2QcC46TOH2Qml8CweTwwLxEW1QAH1UAxiIClMDwUA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedLocals-config'><a aria-label=\"Link to the compiler option: noUnusedLocals\" id='noUnusedLocals' href='#noUnusedLocals' name='noUnusedLocals' aria-labelledby=\"noUnusedLocals-config\">#</a> No Unused Locals - <code>noUnusedLocals</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused local variables.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const createKeyboard: (modelID: number) => {&amp;#13;    type: string;&amp;#13;    modelID: number;&amp;#13;}'>createKeyboard</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) modelID: number'>modelID</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='const defaultModelID: 23'>defaultModelID</data-lsp> </data-err></span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">23</span><span style=\"color: #333333\">;</span>\n<span class=\"error\"><span>'defaultModelID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'defaultModelID' is declared but its value is never read.</span><span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> { <data-lsp lsp='(property) type: string'>type</data-lsp>: </span><span style=\"color: #A31515\">\"keyboard\"</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) modelID: number'>modelID</data-lsp></span><span style=\"color: #333333\"> };</span>\n<span style=\"color: #333333\">};</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATAMtAxgQwDZIBQIEKATudOUgFygBsAjAMwtHbSRIAuo25FLh4oA0igCeAI2i5yaUAF5QACgC20NCnwBJACL1EaqRQCUSgHygA3kVD8uvUFoBmuBPh4BZTdv1LQACYWAG47UEEeBHJIG1AeCQAHFHoAIgBrSRk5NFSAGlANLV09UABfMIqgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noUnusedParameters-config'><a aria-label=\"Link to the compiler option: noUnusedParameters\" id='noUnusedParameters' href='#noUnusedParameters' name='noUnusedParameters' aria-labelledby=\"noUnusedParameters-config\">#</a> No Unused Parameters - <code>noUnusedParameters</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Report errors on unused parameters in functions.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const createDefaultKeyboard: (modelID: number) => {&amp;#13;    type: string;&amp;#13;    modelID: number;&amp;#13;}'>createDefaultKeyboard</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(parameter) modelID: number'>modelID</data-lsp></data-err></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> {</span>\n<span class=\"error\"><span>'modelID' is declared but its value is never read.</span><span class=\"code\">6133</span></span><span class=\"error-behind\">'modelID' is declared but its value is never read.</span><span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const defaultModelID: 23'>defaultModelID</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">23</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> { <data-lsp lsp='(property) type: string'>type</data-lsp>: </span><span style=\"color: #A31515\">\"keyboard\"</span><span style=\"color: #333333\">, <data-lsp lsp='(property) modelID: number'>modelID</data-lsp>: </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const defaultModelID: 23'>defaultModelID</data-lsp></span><span style=\"color: #333333\"> };</span>\n<span style=\"color: #333333\">};</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATACgQwE5YLYoAuKOSAUCBKTtGQFygBsAjAMxvkDG0kSRoLjhRYSAERQAzLAgA2RANIoAngCNouNKAC8oABT5oaFLICSYxonyrSASh0A+UAG9yoQb36hj0uUQCyRibmOqAATGwA3G6gwkQIOJAuoETKAA4ojABEANYq6ppZADSghsZmFt5SMvKB5SEAvtFNQA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Experimental_Options_6177' ><a href='#Experimental_Options_6177' name='Experimental_Options_6177' aria-label=\"Link to the section Experimental\" aria-labelledby='Experimental_Options_6177'>#</a>Experimental</h2>\n<p>TypeScript strives to only include features which are confirmed to be added into the JavaScript language.</p>\n<p>There have been cases where a feature is compelling enough to be an exception to that rule, and these live as experimental compiler flags.\nIt is possible that a version of these features may be different when/if they are added to the JavaScript language, and thus are considered risky.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='emitDecoratorMetadata-config'><a aria-label=\"Link to the compiler option: emitDecoratorMetadata\" id='emitDecoratorMetadata' href='#emitDecoratorMetadata' name='emitDecoratorMetadata' aria-labelledby=\"emitDecoratorMetadata-config\">#</a> Emit Decorator Metadata - <code>emitDecoratorMetadata</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables experimental support for emitting type metadata for decorators which works with the module <a href=\"https://www.npmjs.com/package/reflect-metadata\"><code>reflect-metadata</code></a>.</p>\n<p>For example, here is the JavaScript</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor): void'>LogMethod</data-lsp>(</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) target: any'>target</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> any,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) propertyKey: string | symbol'>propertyKey</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> symbol,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) descriptor: PropertyDescriptor'>descriptor</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='interface PropertyDescriptor'>PropertyDescriptor</data-lsp></span>\n<span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) target: any'>target</data-lsp></span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) propertyKey: string | symbol'>propertyKey</data-lsp></span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) descriptor: PropertyDescriptor'>descriptor</data-lsp></span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">class</span><span style=\"color: #333333\"> <data-lsp lsp='class Demo'>Demo</data-lsp> {</span>\n<span style=\"color: #333333\">  @</span><span style=\"color: #1A1A1A\"><data-lsp lsp='function LogMethod(target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor): void'>LogMethod</data-lsp></span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">public</span><span style=\"color: #333333\"> <data-lsp lsp='(method) Demo.foo(bar: number): void'>foo</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) bar: number'>bar</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #008000\">// do nothing</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const demo: Demo'>demo</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='constructor Demo(): Demo'>Demo</data-lsp></span><span style=\"color: #333333\">();</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQAZgK7pGZInqgAyJA5gLKRMACxIATABQ1QoHAh6CAXKGzoAngBopoWAhLwEmVQGlIqpVUzJ0PUAB9QVVSgBGJXJumjIVIsliUEJQAFXX1DQh8-AJoASlAAby1SdCo3SAA6XF5xWXlMGIBuJPZU3AysnnEdPURDE1VC4pS0zOyvSKR-MkaAXxoaIlxsKipQQhQSBK1wbn5BEVEtWAZnXCQiUDoSEnFnbEDQdAYXRDjE6WkQUFFJ9BJhJGstPr6BksxryAnQAF5DyAA7mMvjtCkA'>Try</a></div></pre>\n<p>With <code>emitDecoratorMetadata</code> not set to true (default):</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__decorate </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__decorate</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">c </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #333333\">.length, </span><span style=\"color: #1A1A1A\">r </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&lt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">Object.getOwnPropertyDescriptor</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> Reflect </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> Reflect.</span><span style=\"color: #1A1A1A\">decorate</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #333333\">) </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">Reflect.decorate</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">else</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">for</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">i </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #333333\">.length </span><span style=\"color: #000000\">-</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">--</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #333333\">]) </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&lt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">)) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">Object.defineProperty</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">), </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> LogMethod(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #333333\"> Demo {</span>\n<span style=\"color: #333333\">    foo(</span><span style=\"color: #1A1A1A\">bar</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #008000\">// do nothing</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">}</span>\n<span style=\"color: #1A1A1A\">__decorate</span><span style=\"color: #333333\">([</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">LogMethod</span>\n<span style=\"color: #333333\">], Demo.prototype, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">demo </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">Demo</span><span style=\"color: #333333\">();</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmNAZgK7oimJCXSgAMiQDmAWUiZmAEwAUNUKBwIp8gFyhs6AJ4AaNaFgIS8BJkMBpSIb1VMydFNAAfUFUMoARiS4puqKkFREyLCUCHoACpbWtoQRUTE0AJSgAN5mpOhUQZAAdLjSypramBkA3HmihbglZVLKFlaItg6GtfUFRaXlYalI0WS9AL40NES42FRUoIQoJDlm4JKy8kpmsHz+uEhEoDwkJMr+2LGg6HwBiFm56ur0iqvoJApI7mZTUzMNTCgMIrUAAXhukBYS0gK2UtSAA'>Try</a></div></pre>\n<p>With <code>emitDecoratorMetadata</code> set to true:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__decorate </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__decorate</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">c </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">arguments</span><span style=\"color: #333333\">.length, </span><span style=\"color: #1A1A1A\">r </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&lt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">null</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">Object.getOwnPropertyDescriptor</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> Reflect </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> Reflect.</span><span style=\"color: #1A1A1A\">decorate</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #333333\">) </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">Reflect.decorate</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">desc</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">else</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">for</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">i </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #333333\">.length </span><span style=\"color: #000000\">-</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">; </span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #000000\">--</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">decorators</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">i</span><span style=\"color: #333333\">]) </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&lt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">d</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">)) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">c</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">Object.defineProperty</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">key</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">), </span><span style=\"color: #1A1A1A\">r</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__metadata </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__metadata</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> Reflect </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"object\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> Reflect.</span><span style=\"color: #1A1A1A\">metadata</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">Reflect.metadata</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">k</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> LogMethod(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">target</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">propertyKey</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">descriptor</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span>\n<span style=\"color: #0000FF\">class</span><span style=\"color: #333333\"> Demo {</span>\n<span style=\"color: #333333\">    foo(</span><span style=\"color: #1A1A1A\">bar</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #008000\">// do nothing</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">}</span>\n<span style=\"color: #1A1A1A\">__decorate</span><span style=\"color: #333333\">([</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">LogMethod</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">__metadata</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"design:type\"</span><span style=\"color: #333333\">, Function),</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">__metadata</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"design:paramtypes\"</span><span style=\"color: #333333\">, [Number]),</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">__metadata</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"design:returntype\"</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">)</span>\n<span style=\"color: #333333\">], Demo.prototype, </span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">demo </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">Demo</span><span style=\"color: #333333\">();</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmdYUnmhUuUoIAspBwATCthoAzAK7oimJCXSgAMiQDm4zM0kAKGqFA4EOiQC5Q2dAE8ANKdCwEJeAkwOA0pAdbKkxkdB1QAB9QKgcUACMSXBczSUgqImRYEVsABQ8vH0J0zJEaAEpQAG9XUnQqRMgAOlxdIwsrTDKAbhr1etwmlp0jd09EH38Hbt66hubW1OKkLLJpgF8aGiJcbCoqUEIUEirXcG09CUNXWAU43CQiUDkSEiM47ARbdAV4xArqsxmeiSY7oEgGJBhVwbDZbPqYUCpI6gAC8oHQkBYB0gRyM3SAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#experimentalDecorators' aria-label=\"Jump to compiler option info for experimentalDecorators\" ><code>experimentalDecorators</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='experimentalDecorators-config'><a aria-label=\"Link to the compiler option: experimentalDecorators\" id='experimentalDecorators' href='#experimentalDecorators' name='experimentalDecorators' aria-labelledby=\"experimentalDecorators-config\">#</a> Experimental Decorators - <code>experimentalDecorators</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Enables <a href=\"https://github.com/tc39/proposal-decorators\">experimental support for decorators</a>, which is in stage 2\nof the TC39 standardization process.</p>\n<p>Decorators are a language feature which hasn’t yet been fully ratified into the JavaScript specification.\nThis means that the implementation version in TypeScript may differ from the implementation in JavaScript when it it decided by TC39.</p>\n<p>You can find out more about decorator support in TypeScript in <a href=\"/docs/handbook/decorators.html\">the handbook</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#emitDecoratorMetadata' aria-label=\"Jump to compiler option info for emitDecoratorMetadata\" ><code>emitDecoratorMetadata</code></a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Advanced_Options_6178' ><a href='#Advanced_Options_6178' name='Advanced_Options_6178' aria-label=\"Link to the section Advanced\" aria-labelledby='Advanced_Options_6178'>#</a>Advanced</h2>\n<p>Flags which help with debugging</p>\n</div>\n<section class='compiler-option'>\n<h3 id='allowUnreachableCode-config'><a aria-label=\"Link to the compiler option: allowUnreachableCode\" id='allowUnreachableCode' href='#allowUnreachableCode' name='allowUnreachableCode' aria-labelledby=\"allowUnreachableCode-config\">#</a> Permetti Codice Irraggiungibile - <code>allowUnreachableCode</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando:</p>\n<ul>\n<li><code>undefined</code> (predefinito) fornire suggerimenti come avviso agli editor</li>\n<li><code>true</code> il codice irraggiungibile viene ignorato</li>\n<li><code>false</code> visualizza un errore di compilazione quando viene trovato del codice irraggiungibile</li>\n</ul>\n<p>Questi avvertimenti sono solo per codice che probabilmente è irraggiungibile a causa del uso di sintassi JavaScript, per esempio:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> fn(</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">5</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Con <code>\"allowUnreachableCode\": false</code>:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function fn(n: number): boolean'>fn</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) n: number'>n</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) n: number'>n</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">5</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">  } </span><span style=\"color: #0000FF\">else</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">false</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">;</span>\n<span class=\"error\"><span>Unreachable code detected.</span><span class=\"code\">7027</span></span><span class=\"error-behind\">Unreachable code detected.</span><span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMaBQIIBDAG2LgHcBVAO2kkIGMALQgI2MgGE4ATSVAGYlEkXAICu1BgBcAlnGqgB1ABTVU1cQFtWMAJSgA3rlChZA0GtAA+UAFYDx06brTx0RdOjjIAbhOgAL6gkMQiRgEukG4eSsJ+AYEBru6e3gmBQA'>Try</a></div></pre>\n<p>Ciò non influisce sugli errori sulla base del codice che <em>sembra</em> di essere irraggiungibile a causa dell analisi del tipo.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>undefined</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='allowUnusedLabels-config'><a aria-label=\"Link to the compiler option: allowUnusedLabels\" id='allowUnusedLabels' href='#allowUnusedLabels' name='allowUnusedLabels' aria-labelledby=\"allowUnusedLabels-config\">#</a> Permetti Label Non Utilizzati - <code>allowUnusedLabels</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Imposta a False per disattivare le avvertenze riguardo label non utilizzati.</p>\n<p>In JavaScript i label sono molto rari e tipicamente indicano un tentativo di scrivere un oggetto letterale:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function verificaEta(eta: number): void'>verificaEta</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) eta: number'>eta</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #008000\">// Il &apos;return&apos; non è presente</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) eta: number'>eta</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">18</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\"><data-err>    verificato: </data-err></span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">;</span>\n<span class=\"error\"><span>Unused label.</span><span class=\"code\">7028</span></span><span class=\"error-behind\">Unused label.</span><span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMAOAUCBAIYA2JcA7gKoB2AropACYAyRARpCSqAGamM8vOjQDGAFwCWcGqABuMSb0miiAUXFEAFJE2p6AW07QAlKADeeUKEIBJEqADk0XXWg1HoGjNAAL0AAOLow04pBWoEqgOpqgAHygAIw4ZpbW1grQSipE4nCo4tB0kADcEQC+eOVAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.8\" href=\"/docs/handbook/release-notes/typescript-1-8.html\">1.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='assumeChangesOnlyAffectDirectDependencies-config'><a aria-label=\"Link to the compiler option: assumeChangesOnlyAffectDirectDependencies\" id='assumeChangesOnlyAffectDirectDependencies' href='#assumeChangesOnlyAffectDirectDependencies' name='assumeChangesOnlyAffectDirectDependencies' aria-labelledby=\"assumeChangesOnlyAffectDirectDependencies-config\">#</a> Assicura Che I Cambiamenti Influiscano Soltanto Su Dipendenze Dirette - <code>assumeChangesOnlyAffectDirectDependencies</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Quando questa opzione viene abilitata, TypeScript eviterà la verifica/ricostruzione di assolutamente tutti i file, e verificherà/ricostruirà solo i file che sono stati modificati o che potrebbero essere stati interessati dalle modifiche.</p>\n<p>Questo può essere considerato come una implementazione rapida (fast &#x26; loose) del algoritmo watching che può drasticamente ridurre i tempi di ricostruzione a scapito di dover eseguire occasionalmente la compilazione completa per ottenere tutti i messaggi di errore del compilatore.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='charset-config'><a aria-label=\"Link to the compiler option: charset\" id='charset' href='#charset' name='charset' aria-labelledby=\"charset-config\">#</a> Charset - <code>charset</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Nelle versioni precedenti di TypeScript, questo controllava che tipo di codifica veniva usato quando si leggeva un file di testo dal disco. Oggi, TypeScript assume che la codifica UTF-8, pero correttamente rileverà anche UTF-16 (BE e LE) o UTF-8 <a href=\"https://it.wikipedia.org/wiki/Byte_Order_Mark\">BOMs</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>utf8</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='declarationDir-config'><a aria-label=\"Link to the compiler option: declarationDir\" id='declarationDir' href='#declarationDir' name='declarationDir' aria-labelledby=\"declarationDir-config\">#</a> Declaration Dir - <code>declarationDir</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Offers a way to configure the root directory for where declaration files are emitted.</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">example\n├── index.ts\n├── package.json\n└── tsconfig.json</span></code></div></pre>\n<p>with this <code>tsconfig.json</code>:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#declaration'><data-lsp lsp=\"Generate .d.ts files from TypeScript and JavaScript files in your project.\">declaration</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#declarationDir'><data-lsp lsp=\"Specify the output directory for generated declaration files.\">declarationDir</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"./types\"</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Would place the d.ts for the <code>index.ts</code> in a <code>types</code> folder:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">example\n├── index.js\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── types\n    └── index.d.ts</span></code></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> n/a</p>\n</li>\n<li><span>Related:</span><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='diagnostics-config'><a aria-label=\"Link to the compiler option: diagnostics\" id='diagnostics' href='#diagnostics' name='diagnostics' aria-labelledby=\"diagnostics-config\">#</a> Diagnostics - <code>diagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Used to output diagnostic information for debugging. This command is a subset of <a href=\"#extendedDiagnostics\"><code>extendedDiagnostics</code></a> which are more user-facing results, and easier to interpret.</p>\n<p>If you have been asked by a TypeScript compiler engineer to give the results using this flag in a compile, in which there is no harm in using <a href=\"#extendedDiagnostics\"><code>--extendedDiagnostics</code></a> instead.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#extendedDiagnostics' aria-label=\"Jump to compiler option info for extendedDiagnostics\" ><code>extendedDiagnostics</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableReferencedProjectLoad-config'><a aria-label=\"Link to the compiler option: disableReferencedProjectLoad\" id='disableReferencedProjectLoad' href='#disableReferencedProjectLoad' name='disableReferencedProjectLoad' aria-labelledby=\"disableReferencedProjectLoad-config\">#</a> disableReferencedProjectLoad - <code>disableReferencedProjectLoad</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>In multi-project TypeScript programs, TypeScript will load all of the available projects into memory in order to provide accurate results for editor responses which require a full knowledge graph like ‘Find All References’.</p>\n<p>If your project is large, you can use the flag <code>disableReferencedProjectLoad</code> to disable the automatic loading of all projects. Instead, projects are loaded dynamically as you open files through your editor.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSizeLimit-config'><a aria-label=\"Link to the compiler option: disableSizeLimit\" id='disableSizeLimit' href='#disableSizeLimit' name='disableSizeLimit' aria-labelledby=\"disableSizeLimit-config\">#</a> Disable Size Limit - <code>disableSizeLimit</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>To avoid a possible memory bloat issues when working with very large JavaScript projects, there is an upper limit to the amount of memory TypeScript will allocate. Turning this flag on will remove the limit.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSolutionSearching-config'><a aria-label=\"Link to the compiler option: disableSolutionSearching\" id='disableSolutionSearching' href='#disableSolutionSearching' name='disableSolutionSearching' aria-labelledby=\"disableSolutionSearching-config\">#</a> Disable Solution Searching - <code>disableSolutionSearching</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with <a href=\"/docs/handbook/project-references.html\">composite TypeScript projects</a>, this option provides a way to declare that you do not want a project to be included when using features like <em>find all references</em> or <em>jump to definition</em> in an editor.</p>\n<p>This flag is something you can use to increase responsiveness in large composite projects.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='disableSourceOfProjectReferenceRedirect-config'><a aria-label=\"Link to the compiler option: disableSourceOfProjectReferenceRedirect\" id='disableSourceOfProjectReferenceRedirect' href='#disableSourceOfProjectReferenceRedirect' name='disableSourceOfProjectReferenceRedirect' aria-labelledby=\"disableSourceOfProjectReferenceRedirect-config\">#</a> Disable Source Project Reference Redirect - <code>disableSourceOfProjectReferenceRedirect</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When working with <a href=\"/docs/handbook/project-references.html\">composite TypeScript projects</a>, this option provides a way to go <a href=\"/docs/handbook/release-notes/typescript-3-7.html#build-free-editing-with-project-references\">back to the pre-3.7</a> behavior where d.ts files were used to as the boundaries between modules.\nIn 3.7 the source of truth is now your TypeScript files.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitBOM-config'><a aria-label=\"Link to the compiler option: emitBOM\" id='emitBOM' href='#emitBOM' name='emitBOM' aria-labelledby=\"emitBOM-config\">#</a> Emit BOM - <code>emitBOM</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Controls whether TypeScript will emit a <a href=\"https://wikipedia.org/wiki/Byte_order_mark\">byte order mark (BOM)</a> when writing output files.\nSome runtime environments require a BOM to correctly interpret a JavaScript files; others require that it is not present.\nThe default value of <code>false</code> is generally best unless you have a reason to change it.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='emitDeclarationOnly-config'><a aria-label=\"Link to the compiler option: emitDeclarationOnly\" id='emitDeclarationOnly' href='#emitDeclarationOnly' name='emitDeclarationOnly' aria-labelledby=\"emitDeclarationOnly-config\">#</a> Emit Declaration Only - <code>emitDeclarationOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p><em>Only</em> emit <code>.d.ts</code> files; do not emit <code>.js</code> files.</p>\n<p>This setting is useful in two cases:</p>\n<ul>\n<li>You are using a transpiler other than TypeScript to generate your JavaScript.</li>\n<li>You are using TypeScript to only generate <code>d.ts</code> files for your consumers.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#declaration' aria-label=\"Jump to compiler option info for declaration\" ><code>declaration</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.8\" href=\"/docs/handbook/release-notes/typescript-2-8.html\">2.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='explainFiles-config'><a aria-label=\"Link to the compiler option: explainFiles\" id='explainFiles' href='#explainFiles' name='explainFiles' aria-labelledby=\"explainFiles-config\">#</a> explainFiles - <code>explainFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.</p>\n<p>For example, with this project of just a single <code>index.ts</code> file</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #333333\">example</span>\n<span style=\"color: #333333\">├── index.ts</span>\n<span style=\"color: #333333\">├── package.json</span>\n<span style=\"color: #333333\">└── tsconfig.json</span></code></div></pre>\n<p>Using a <code>tsconfig.json</code> which has <code>explainFiles</code> set to true:</p>\n<pre class=\"shiki\"><div class=\"language-id\">json</div><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"compilerOptions\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"target\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"es5\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"module\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"explainFiles\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Running TypeScript against this folder would have output like this:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">❯ tsc\nnode_modules/typescript/lib/lib.d.ts\n  Default library for target 'es5'\nnode_modules/typescript/lib/lib.es5.d.ts\n  Library referenced via 'es5' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.dom.d.ts\n  Library referenced via 'dom' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.webworker.importscripts.d.ts\n  Library referenced via 'webworker.importscripts' from file 'node_modules/typescript/lib/lib.d.ts'\nnode_modules/typescript/lib/lib.scripthost.d.ts\n  Library referenced via 'scripthost' from file 'node_modules/typescript/lib/lib.d.ts'\nindex.ts\n  Matched by include pattern '**/*' in 'tsconfig.json'</span></code></div></pre>\n<p>The output above show:</p>\n<ul>\n<li>The initial lib.d.ts lookup based on <a href=\"#include\"><code>target</code></a>, and the chain of <code>.d.ts</code> files which are referenced</li>\n<li>The <code>index.ts</code> file located via the default pattern of <a href=\"#include\"><code>include</code></a></li>\n</ul>\n<p>This option is intended for debugging how a file has become a part of your compile.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.2\" href=\"/docs/handbook/release-notes/typescript-4-2.html\">4.2</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='extendedDiagnostics-config'><a aria-label=\"Link to the compiler option: extendedDiagnostics\" id='extendedDiagnostics' href='#extendedDiagnostics' name='extendedDiagnostics' aria-labelledby=\"extendedDiagnostics-config\">#</a> Extended Diagnostics - <code>extendedDiagnostics</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You can use this flag to discover where TypeScript is spending it’s time when compiling.\nThis is a tool used for understanding the performance characteristics of your codebase overall.</p>\n<p>You can learn more about how to measure and understand the output in the performance <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">section of the wiki</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#diagnostics' aria-label=\"Jump to compiler option info for diagnostics\" ><code>diagnostics</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='forceConsistentCasingInFileNames-config'><a aria-label=\"Link to the compiler option: forceConsistentCasingInFileNames\" id='forceConsistentCasingInFileNames' href='#forceConsistentCasingInFileNames' name='forceConsistentCasingInFileNames' aria-labelledby=\"forceConsistentCasingInFileNames-config\">#</a> Force Consistent Casing In File Names - <code>forceConsistentCasingInFileNames</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript follows the case sensitivity rules of the file system it’s running on.\nThis can be problematic if some developers are working in a case-sensitive file system and others aren’t.\nIf a file attempts to import <code>fileManager.ts</code> by specifying <code>./FileManager.ts</code> the file will be found in a case-insensitive file system, but not on a case-sensitive file system.</p>\n<p>When this option is set, TypeScript will issue an error if a program tries to include a file by a casing different from the casing on disk.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='generateCpuProfile-config'><a aria-label=\"Link to the compiler option: generateCpuProfile\" id='generateCpuProfile' href='#generateCpuProfile' name='generateCpuProfile' aria-labelledby=\"generateCpuProfile-config\">#</a> Generate CPU Profile - <code>generateCpuProfile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This option gives you the chance to have TypeScript emit a v8 CPU profile during the compiler run. The CPU profile can provide insight into why your builds may be slow.</p>\n<p>This option can only be used from the CLI via: <code>--generateCpuProfile tsc-output.cpuprofile</code>.</p>\n<pre class=\"shiki\"><div class=\"language-id\">sh</div><div class='code-container'><code><span style=\"color: #333333\">npm run tsc --generateCpuProfile tsc-output.cpuprofile</span></code></div></pre>\n<p>This file can be opened in a chromium based browser like Chrome or Edge Developer in <a href=\"https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution\">the CPU profiler</a> section.\nYou can learn more about understanding the compilers performance in the <a href=\"https://github.com/microsoft/TypeScript/wiki/Performance\">TypeScript wiki section on performance</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p> profile.cpuprofile</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='importsNotUsedAsValues-config'><a aria-label=\"Link to the compiler option: importsNotUsedAsValues\" id='importsNotUsedAsValues' href='#importsNotUsedAsValues' name='importsNotUsedAsValues' aria-labelledby=\"importsNotUsedAsValues-config\">#</a> Imports Not Used As Values - <code>importsNotUsedAsValues</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag controls how <code>import</code> works, there are 3 different options:</p>\n<ul>\n<li><code>remove</code>: The default behavior of dropping <code>import</code> statements which only reference types.</li>\n<li><code>preserve</code>: Preserves all <code>import</code> statements whose values or types are never used. This can cause imports/side-effects to be preserved.</li>\n<li><code>error</code>: This preserves all imports (the same as the preserve option), but will error when a value import is only used as a type. This might be useful if you want to ensure no values are being accidentally imported, but still make side-effect imports explicit.</li>\n</ul>\n<p>This flag works because you can use <code>import type</code> to explicitly create an <code>import</code> statement which should never be emitted into JavaScript.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>remove,<br/>preserve,<br/>error</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFactory-config'><a aria-label=\"Link to the compiler option: jsxFactory\" id='jsxFactory' href='#jsxFactory' name='jsxFactory' aria-labelledby=\"jsxFactory-config\">#</a> JSX Factory - <code>jsxFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Changes the function called in <code>.js</code> files when compiling JSX Elements using the classic JSX runtime.\nThe most common change is to use <code>\"h\"</code> or <code>\"preact.h\"</code> instead of the default <code>\"React.createElement\"</code> if using <code>preact</code>.</p>\n<p>For example, this TSX file:</p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">h</span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">HelloWorld</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #333333\">Hello</span><span style=\"color: #800000\">&lt;/div&gt;</span><span style=\"color: #333333\">;</span></code></div></pre>\n<p>With <code>jsxFactory: \"h\"</code> looks like:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">Object.defineProperty(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> require(</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">HelloWorld</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #333333\">.h(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"Hello\"</span><span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgjBKN0BTAEwDFUAbIgLlFQDsSiAPAOgCtJsxwuWyAQwDG6WACcAnnWg8IDWInHiJ3HOHSDxAcyLo6RSA1ZZ1yWCQCu1OsNjJzDLpkypkABwnpQAb1DQAGlAycUFtZCIGbwBfUAAzFWRQACJ3cSIRdGSAbhc7BkhvAAkiSkpYAHUJShJQAF5QAAoASnqAPlAAHhJUADc2krLYTuAe-uygA'>Try</a></div></pre>\n<p>This option can be used on a per-file basis too similar to <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom\">Babel’s <code>/** @jsx h */</code> directive</a>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsx</span><span style=\"color: #008000\"> h */</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) function h(type: string, props: (JSXInternal.HTMLAttributes &amp;amp; JSXInternal.SVGAttributes &amp;amp; Record&amp;lt;string, any>) | null, ...children: ComponentChildren[]): VNode&amp;lt;any> (+1 overload)&amp;#13;(alias) namespace h&amp;#13;import h'>h</data-lsp></span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const HelloWorld: () => h.JSX.Element'>HelloWorld</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #800000\">&lt;<data-lsp lsp='(property) JSXInternal.IntrinsicElements.div: h.JSX.HTMLAttributes&amp;lt;HTMLDivElement>'>div</data-lsp>></span><span style=\"color: #333333\">Hello</span><span style=\"color: #800000\">&lt;/<data-lsp lsp='(property) JSXInternal.IntrinsicElements.div: h.JSX.HTMLAttributes&amp;lt;HTMLDivElement>'>div</data-lsp>></span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PQKhAIAECsGcA9wAtwmAKAJYFsAOB7AJwBdwBvZcAX3ADND9twAiXQgUwEMBjY5gbnTpu+AHaxSACXYAbGfgDqRGQBNwAXnAAKAJQaAfOAA8KzADd90ufiPBTF-kA'>Try</a></div></pre>\n<p>The factory chosen will also affect where the <code>JSX</code> namespace is looked up (for type checking information) before falling back to the global one.</p>\n<p>If the factory is defined as <code>React.createElement</code> (the default), the compiler will check for <code>React.JSX</code> before checking for a global <code>JSX</code>. If the factory is defined as <code>h</code>, it will check for <code>h.JSX</code> before a global <code>JSX</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>React.createElement</code></p>\n</li>\n<li><span>Allowed:</span><p>Any identifier or dotted identifier</p>\n</li>\n<li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFragmentFactory' aria-label=\"Jump to compiler option info for jsxFragmentFactory\" ><code>jsxFragmentFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxFragmentFactory-config'><a aria-label=\"Link to the compiler option: jsxFragmentFactory\" id='jsxFragmentFactory' href='#jsxFragmentFactory' name='jsxFragmentFactory' aria-labelledby=\"jsxFragmentFactory-config\">#</a> jsxFragmentFactory - <code>jsxFragmentFactory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the JSX fragment factory function to use when targeting react JSX emit with <code>jsxFactory</code> compiler option is specified, e.g. <code>Fragment</code>.</p>\n<p>For example with this TSConfig:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#jsxFactory'><data-lsp lsp=\"Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'\">jsxFactory</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"h\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#jsxFragmentFactory'><data-lsp lsp=\"Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.\">jsxFragmentFactory</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"Fragment\"</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>This TSX file:</p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">h</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">Fragment</span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">HelloWorld</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> (</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #800000\">&lt;&gt;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #800000\">&lt;div&gt;</span><span style=\"color: #333333\">Hello</span><span style=\"color: #800000\">&lt;/div&gt;</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #800000\">&lt;/&gt;</span>\n<span style=\"color: #333333\">);</span></code></div></pre>\n<p>Would look like:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">Object.defineProperty(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> require(</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">HelloWorld</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #333333\">.h(</span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">Fragment</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">preact_1</span><span style=\"color: #333333\">.h(</span><span style=\"color: #A31515\">\"div\"</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">null</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"Hello\"</span><span style=\"color: #333333\">)));</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgjBKN0BTAEwDFUAbIgLlFQDsSiAPAOgCtJsxwuWyAQwDG6WACcAnnWg8I-MuMEBzZEQbohoidNCKVajXPANYiceIncc4dIPHKi6OkUgNWWG8lgkArtTphWGRvBi5MTFRkAAcJdFAAb1BoABo9JVV1eIBfUAAzS2RQACJo8SIRdGKAbgighkh4gAkiSkpYAHUJShJQAF5QAAoASn6APiHMUFAAHjGp6dmSVAA3MZa22BngZbWF7fnh6qA'>Try</a></div></pre>\n<p>This option can be used on a per-file basis too similar to <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#fragments\">Babel’s <code>/* @jsxFrag h */</code> directive</a>.</p>\n<p>For example:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsx</span><span style=\"color: #008000\"> h */</span>\n<span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsxFrag</span><span style=\"color: #008000\"> Fragment */</span>\n\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) function h(type: string, props: (JSXInternal.HTMLAttributes &amp;amp; JSXInternal.SVGAttributes &amp;amp; Record&amp;lt;string, any>) | null, ...children: ComponentChildren[]): VNode&amp;lt;any> (+1 overload)&amp;#13;(alias) namespace h&amp;#13;import h'>h</data-lsp></span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(alias) const Fragment: ComponentClass&amp;lt;{}, {}>&amp;#13;import Fragment'>Fragment</data-lsp></span><span style=\"color: #333333\"> } </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const HelloWorld: () => h.JSX.Element'>HelloWorld</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> (</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #800000\">&lt;&gt;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #800000\">&lt;<data-lsp lsp='(property) JSXInternal.IntrinsicElements.div: h.JSX.HTMLAttributes&amp;lt;HTMLDivElement>'>div</data-lsp>></span><span style=\"color: #333333\">Hello</span><span style=\"color: #800000\">&lt;/<data-lsp lsp='(property) JSXInternal.IntrinsicElements.div: h.JSX.HTMLAttributes&amp;lt;HTMLDivElement>'>div</data-lsp>></span>\n<span style=\"color: #333333\">  </span><span style=\"color: #800000\">&lt;/&gt;</span>\n<span style=\"color: #333333\">);</span></code><a href='https://www.typescriptlang.org/play/#code/PQKhAIAECsGcA9wAtwmAKFBGCBiAnAQwHNwCSBbAUwDsAXVDdASwoAcB7fBgb2QBoyRYtXrgAvuABm+DhXAAiNviqEAxnQUBudOjUcasBgAkqAGzMcA6lzMATcAF5wACgCUTgHyv04cAB5PXz8Au2YAN09TCw5-YDDI4Ligty0gA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a>, <a href='#jsxImportSource' aria-label=\"Jump to compiler option info for jsxImportSource\" ><code>jsxImportSource</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.0\" href=\"/docs/handbook/release-notes/typescript-4-0.html\">4.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='jsxImportSource-config'><a aria-label=\"Link to the compiler option: jsxImportSource\" id='jsxImportSource' href='#jsxImportSource' name='jsxImportSource' aria-labelledby=\"jsxImportSource-config\">#</a> jsxImportSource - <code>jsxImportSource</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Declares the module specifier to be used for importing the <code>jsx</code> and <code>jsxs</code> factory functions when using <a href=\"#jsx\"><code>jsx</code></a> as <code>\"react-jsx\"</code> or <code>\"react-jsxdev\"</code> which were introduced in TypeScript 4.1.</p>\n<p>With <a href=\"https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\">React 17</a> the library supports a new form of JSX transformation via a separate import.</p>\n<p>For example with this code:</p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">React</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> App() {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #333333\">Hello World</span><span style=\"color: #800000\">&lt;/h1&gt;</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Using this TSConfig:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"react-jsx\"</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>The emitted JavaScript from TypeScript is:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__importDefault</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__importDefault</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__esModule</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> { </span><span style=\"color: #A31515\">\"default\"</span><span style=\"color: #333333\">: </span><span style=\"color: #1A1A1A\">mod</span><span style=\"color: #333333\"> };</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #333333\">Object.defineProperty(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">jsx_runtime_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> require(</span><span style=\"color: #A31515\">\"react/jsx-runtime\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">react_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> __importDefault(require(</span><span style=\"color: #A31515\">\"react\"</span><span style=\"color: #333333\">));</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> App() {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">jsx_runtime_1</span><span style=\"color: #333333\">.jsx(</span><span style=\"color: #A31515\">\"h1\"</span><span style=\"color: #333333\">, { children: </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #333333\"> }, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggO1ogE6GyGTZjgBWkAHgFyiECmAhgMboC0NtFEyWABMArgBtmjdrGSDcNfuHStCAc2bpGzSLma0sQ5uzErmoQaImgAUgGUAGqADemUKFS50zQgDMOZxAlkZk9nAF9Xd09vP3YzAElPQg9IVHZA5mDPSGdItwBtSEZIdGTcVQBdRlZcAE8AbkiIiNRkAAdSdFAAJTZOUB8SZFAAIhYOdBHGzB8RXE5UWFxQAEE2toAKAEpctxZ0EUJlgB5oAEYAPgAJZjExWFAAdVIxIWPgc4vGsKA'>Try</a></div></pre>\n<p>For example if you wanted to use <code>\"jsxImportSource\": \"preact\"</code>, you need a tsconfig like:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#target'><data-lsp lsp=\"Set the JavaScript language version for emitted JavaScript and include compatible library declarations.\">target</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"esnext\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#module'><data-lsp lsp=\"Specify what module code is generated.\">module</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"commonjs\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#jsx'><data-lsp lsp=\"Specify what JSX code is generated.\">jsx</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"react-jsx\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#jsxImportSource'><data-lsp lsp=\"Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.`\">jsxImportSource</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#types'><data-lsp lsp=\"Specify type package names to be included without being referenced in a source file.\">types</data-lsp></a>\"</span><span style=\"color: #333333\">: [</span><span style=\"color: #A31515\">\"preact\"</span><span style=\"color: #333333\">]</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Which generates code like:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">Object.defineProperty(exports, </span><span style=\"color: #A31515\">\"__esModule\"</span><span style=\"color: #333333\">, { value: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> });</span>\n<span style=\"color: #333333\">exports.</span><span style=\"color: #1A1A1A\">App</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">jsx_runtime_1</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> require(</span><span style=\"color: #A31515\">\"preact/jsx-runtime\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> App() {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">jsx_runtime_1</span><span style=\"color: #333333\">.jsx(</span><span style=\"color: #A31515\">\"h1\"</span><span style=\"color: #333333\">, { children: </span><span style=\"color: #A31515\">\"Hello World\"</span><span style=\"color: #333333\"> }, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span>\n<span style=\"color: #333333\">exports.</span><span style=\"color: #1A1A1A\">App</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">App</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggK0gB4CSyADrAE7oDKsArhQMYCmAXKKRcwIaNY7h0AT1LNI7Tjz7Yw4fAXZde6ALTyZEdNwoBzZunZiAdswL9ZyWABM6AGzahGsZJaP4N4I7EQUKlSJiYpuRUoABmdEZ8qLBGoACCpKQAFACUoADemKCgXOgMcQA80ACMAHwAEsy2trCgAOqUtlaFwKVlANyYAL5AA'>Try</a></div></pre>\n<p>Alternatively, you can use a per-file pragma to set this option, for example:</p>\n<pre class=\"shiki\"><div class=\"language-id\">tsx</div><div class='code-container'><code><span style=\"color: #008000\">/** </span><span style=\"color: #0000FF\">@jsxImportSource</span><span style=\"color: #008000\"> preact */</span>\n\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> App() {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #800000\">&lt;h1&gt;</span><span style=\"color: #333333\">Hello World</span><span style=\"color: #800000\">&lt;/h1&gt;</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Would add <code>preact/jsx-runtime</code> as an import for the <code>_jsx</code> factory.</p>\n<p><em>Note:</em> In order for this to work like you would expect, your <code>tsx</code> file must include an <code>export</code> or <code>import</code> so that it is considered a module.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>react</code></p>\n</li>\n<li><span>Related:</span><p><a href='#jsx' aria-label=\"Jump to compiler option info for jsx\" ><code>jsx</code></a>, <a href='#jsxFactory' aria-label=\"Jump to compiler option info for jsxFactory\" ><code>jsxFactory</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 4.1\" href=\"/docs/handbook/release-notes/typescript-4-1.html\">4.1</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='keyofStringsOnly-config'><a aria-label=\"Link to the compiler option: keyofStringsOnly\" id='keyofStringsOnly' href='#keyofStringsOnly' name='keyofStringsOnly' aria-labelledby=\"keyofStringsOnly-config\">#</a> Keyof Strings Only - <code>keyofStringsOnly</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag changes the <code>keyof</code> type operator to return <code>string</code> instead of <code>string | number</code> when applied to a type with a string index signature.</p>\n<p>This flag is used to help people keep this behavior from <a href=\"/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types\">before TypeScript 2.9’s release</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.9\" href=\"/docs/handbook/release-notes/typescript-2-9.html\">2.9</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listEmittedFiles-config'><a aria-label=\"Link to the compiler option: listEmittedFiles\" id='listEmittedFiles' href='#listEmittedFiles' name='listEmittedFiles' aria-labelledby=\"listEmittedFiles-config\">#</a> List Emitted Files - <code>listEmittedFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of generated files part of the compilation to the terminal.</p>\n<p>This flag is useful in two cases:</p>\n<ul>\n<li>You want to transpile TypeScript as a part of a build chain in the terminal where the filenames are processed in the next command.</li>\n<li>You are not sure that TypeScript has included a file you expected, as a part of debugging the <a href=\"#Project_Files_0\">file inclusion settings</a>.</li>\n</ul>\n<p>For example:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">example\n├── index.ts\n├── package.json\n└── tsconfig.json</span></code></div></pre>\n<p>With:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#declaration'><data-lsp lsp=\"Generate .d.ts files from TypeScript and JavaScript files in your project.\">declaration</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#listFiles'><data-lsp lsp=\"Print all of the files read during the compilation.\">listFiles</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Would echo paths like:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">$ npm run tsc\n\npath/to/example/index.js\npath/to/example/index.d.ts</span></code></div></pre>\n<p>Normally, TypeScript would return silently on success.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='listFiles-config'><a aria-label=\"Link to the compiler option: listFiles\" id='listFiles' href='#listFiles' name='listFiles' aria-labelledby=\"listFiles-config\">#</a> List Files - <code>listFiles</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Print names of files part of the compilation. This is useful when you are not sure that TypeScript has\nincluded a file you expected.</p>\n<p>For example:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">example\n├── index.ts\n├── package.json\n└── tsconfig.json</span></code></div></pre>\n<p>With:</p>\n<pre class=\"shiki tsconfig lsp\"><div class='code-container'><code><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#compilerOptions'><data-lsp lsp=\"The set of compiler options for your project\">compilerOptions</data-lsp></a>\"</span><span style=\"color: #333333\">: {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0451A5\">\"<a aria-hidden=true href='https://www.typescriptlang.org/tsconfig#listFiles'><data-lsp lsp=\"Print all of the files read during the compilation.\">listFiles</data-lsp></a>\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">true</span>\n<span style=\"color: #333333\">  }</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>Would echo paths like:</p>\n<pre class=\"shiki\"><div class='code-container'><code><span style=\"color: undefined\">$ npm run tsc\npath/to/example/node_modules/typescript/lib/lib.d.ts\npath/to/example/node_modules/typescript/lib/lib.es5.d.ts\npath/to/example/node_modules/typescript/lib/lib.dom.d.ts\npath/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts\npath/to/example/node_modules/typescript/lib/lib.scripthost.d.ts\npath/to/example/index.ts</span></code></div></pre>\n<p>Note if using TypeScript 4.2, prefer <a href=\"#explainFiles\"><code>explainFiles</code></a> which offers an explanation of why a file was added too.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#explainFiles' aria-label=\"Jump to compiler option info for explainFiles\" ><code>explainFiles</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='maxNodeModuleJsDepth-config'><a aria-label=\"Link to the compiler option: maxNodeModuleJsDepth\" id='maxNodeModuleJsDepth' href='#maxNodeModuleJsDepth' name='maxNodeModuleJsDepth' aria-labelledby=\"maxNodeModuleJsDepth-config\">#</a> Max Node Module JS Depth - <code>maxNodeModuleJsDepth</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The maximum dependency depth to search under <code>node_modules</code> and load JavaScript files.</p>\n<p>This flag is can only be used when <a href=\"#allowJs\"><code>allowJs</code></a> is enabled, and is used if you want to have TypeScript infer types for all of the JavaScript inside your <code>node_modules</code>.</p>\n<p>Ideally this should stay at 0 (the default), and <code>d.ts</code> files should be used to explicitly define the shape of modules.\nHowever, there are cases where you may want to turn this on at the expense of speed and potential accuracy.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>0</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='newLine-config'><a aria-label=\"Link to the compiler option: newLine\" id='newLine' href='#newLine' name='newLine' aria-labelledby=\"newLine-config\">#</a> New Line - <code>newLine</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Specify the end of line sequence to be used when emitting files: ‘CRLF’ (dos) or ‘LF’ (unix).</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p>Platform specific</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitHelpers-config'><a aria-label=\"Link to the compiler option: noEmitHelpers\" id='noEmitHelpers' href='#noEmitHelpers' name='noEmitHelpers' aria-labelledby=\"noEmitHelpers-config\">#</a> No Emit Helpers - <code>noEmitHelpers</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Instead of importing helpers with <a href=\"#importHelpers\"><code>importHelpers</code></a>, you can provide implementations in the global scope for the helpers you use and completely turn off emitting of helper functions.</p>\n<p>For example, using this <code>async</code> function in ES5 requires a <code>await</code>-like function and <code>generator</code>-like function to run:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const getAPI: (url: string) => Promise&amp;lt;{}>'>getAPI</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">async</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) url: string'>url</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #008000\">// Get API</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> {};</span>\n<span style=\"color: #333333\">};</span></code><a href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBA5gUygQQAoEkYF4YEMICeYwMAFAK4BOANgFwzSUCWYcAlNgHwwDeAUDBgB6ITADiSGGnQCYlJFTC8AvgG4+aoA'>Try</a></div></pre>\n<p>Which creates quite a lot of JavaScript:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__awaiter </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__awaiter</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">thisArg</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">_arguments</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">P</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">generator</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> adopt(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">) { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">instanceof</span><span style=\"color: #333333\"> P </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">P</span><span style=\"color: #333333\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">resolve</span><span style=\"color: #333333\">) { </span><span style=\"color: #1A1A1A\">resolve</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">); }); }</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">P</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">P</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> Promise))(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">resolve</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">reject</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> fulfilled(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">) { </span><span style=\"color: #0000FF\">try</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">step</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">generator.next</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">)); } </span><span style=\"color: #0000FF\">catch</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #333333\">) { </span><span style=\"color: #1A1A1A\">reject</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #333333\">); } }</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> rejected(</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">) { </span><span style=\"color: #0000FF\">try</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">step</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">generator</span><span style=\"color: #333333\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #333333\">](</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">)); } </span><span style=\"color: #0000FF\">catch</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #333333\">) { </span><span style=\"color: #1A1A1A\">reject</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #333333\">); } }</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> step(</span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #333333\">) { </span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">resolve</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">adopt</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">result</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">)</span><span style=\"color: #1A1A1A\">.then</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">fulfilled</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">rejected</span><span style=\"color: #333333\">); }</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #1A1A1A\">step</span><span style=\"color: #333333\">((</span><span style=\"color: #1A1A1A\">generator</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">generator.apply</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">thisArg</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">_arguments</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> []))</span><span style=\"color: #1A1A1A\">.next</span><span style=\"color: #333333\">());</span>\n<span style=\"color: #333333\">    });</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__generator </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> (</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">__generator</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">thisArg</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">body</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">_ </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> { label: </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, sent: </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\">() { </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">&</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">]; </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">]; }, trys: [], ops: [] }, </span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">g</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">g</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> { next: </span><span style=\"color: #1A1A1A\">verb</span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">), </span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #333333\">: </span><span style=\"color: #1A1A1A\">verb</span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">), </span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #333333\">: </span><span style=\"color: #1A1A1A\">verb</span><span style=\"color: #333333\">(</span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">) }, </span><span style=\"color: #0000FF\">typeof</span><span style=\"color: #333333\"> Symbol </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"function\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">g</span><span style=\"color: #333333\">[Symbol.</span><span style=\"color: #1A1A1A\">iterator</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\">() { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">; }), </span><span style=\"color: #1A1A1A\">g</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> verb(</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #333333\">) { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #333333\">) { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">step</span><span style=\"color: #333333\">([</span><span style=\"color: #1A1A1A\">n</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">v</span><span style=\"color: #333333\">]); }; }</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> step(</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">new</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">TypeError</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"Generator is already executing.\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">while</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">try</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">            </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">&</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #333333\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #333333\">[</span><span style=\"color: #A31515\">\"throw\"</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> ((</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #333333\">[</span><span style=\"color: #A31515\">\"return\"</span><span style=\"color: #333333\">]) </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t.call</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #333333\">), </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">next</span><span style=\"color: #333333\">) </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">!</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t.call</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">])).</span><span style=\"color: #1A1A1A\">done</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">            </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">) </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">&</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">value</span><span style=\"color: #333333\">];</span>\n<span style=\"color: #333333\">            </span><span style=\"color: #0000FF\">switch</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">]) {</span>\n<span style=\"color: #333333\">                </span><span style=\"color: #0000FF\">case</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">case</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">: </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">; </span><span style=\"color: #0000FF\">break</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">                </span><span style=\"color: #0000FF\">case</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">4</span><span style=\"color: #333333\">: </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">label</span><span style=\"color: #000000\">++</span><span style=\"color: #333333\">; </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> { value: </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">], done: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #333333\"> };</span>\n<span style=\"color: #333333\">                </span><span style=\"color: #0000FF\">case</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">5</span><span style=\"color: #333333\">: </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">label</span><span style=\"color: #000000\">++</span><span style=\"color: #333333\">; </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">]; </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">]; </span><span style=\"color: #0000FF\">continue</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">                </span><span style=\"color: #0000FF\">case</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">7</span><span style=\"color: #333333\">: </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">_.ops.pop</span><span style=\"color: #333333\">(); </span><span style=\"color: #1A1A1A\">_.trys.pop</span><span style=\"color: #333333\">(); </span><span style=\"color: #0000FF\">continue</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">                </span><span style=\"color: #0000FF\">default</span><span style=\"color: #333333\">:</span>\n<span style=\"color: #333333\">                    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #000000\">!</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">trys</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">.length </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">.length </span><span style=\"color: #000000\">-</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">]) </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">6</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">)) { </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">; </span><span style=\"color: #0000FF\">continue</span><span style=\"color: #333333\">; }</span>\n<span style=\"color: #333333\">                    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> (</span><span style=\"color: #000000\">!</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">&gt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">&lt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\">]))) { </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">label</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">]; </span><span style=\"color: #0000FF\">break</span><span style=\"color: #333333\">; }</span>\n<span style=\"color: #333333\">                    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">6</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">label</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&lt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">]) { </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">label</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">]; </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">; </span><span style=\"color: #0000FF\">break</span><span style=\"color: #333333\">; }</span>\n<span style=\"color: #333333\">                    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&&</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">label</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">&lt;</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">]) { </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\">label</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">]; </span><span style=\"color: #1A1A1A\">_.ops.push</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">); </span><span style=\"color: #0000FF\">break</span><span style=\"color: #333333\">; }</span>\n<span style=\"color: #333333\">                    </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">]) </span><span style=\"color: #1A1A1A\">_.ops.pop</span><span style=\"color: #333333\">();</span>\n<span style=\"color: #333333\">                    </span><span style=\"color: #1A1A1A\">_.trys.pop</span><span style=\"color: #333333\">(); </span><span style=\"color: #0000FF\">continue</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">            }</span>\n<span style=\"color: #333333\">            </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">body.call</span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\">thisArg</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">_</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">        } </span><span style=\"color: #0000FF\">catch</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #333333\">) { </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> [</span><span style=\"color: #09835A\">6</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">e</span><span style=\"color: #333333\">]; </span><span style=\"color: #1A1A1A\">y</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">; } </span><span style=\"color: #0000FF\">finally</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">f</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">t</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">; }</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">&</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">5</span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">throw</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">]; </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> { value: </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">op</span><span style=\"color: #333333\">[</span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, done: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\"> };</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">};</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">getAPI </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">url</span><span style=\"color: #333333\">) { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__awaiter</span><span style=\"color: #333333\">(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> () {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__generator</span><span style=\"color: #333333\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">_a</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #008000\">// Get API</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> [</span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #333333\">, {}];</span>\n<span style=\"color: #333333\">    });</span>\n<span style=\"color: #333333\">}); };</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArJgMawB2k6op6AggAoCSoALyg8kAJ7MGoABQBXAgBtKbAqmZEAlEIB8oAN6ZQoHAHEyoXn0OgCZec30BfANyYXQA'>Try</a></div></pre>\n<p>Which can be switched out with your own globals via this flag:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">getAPI </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">url</span><span style=\"color: #333333\">) { </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__awaiter</span><span style=\"color: #333333\">(</span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> () {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">__generator</span><span style=\"color: #333333\">(</span><span style=\"color: #0000FF\">this</span><span style=\"color: #333333\">, </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">_a</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #008000\">// Get API</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> [</span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\"> </span><span style=\"color: #008000\">/*return*/</span><span style=\"color: #333333\">, {}];</span>\n<span style=\"color: #333333\">    });</span>\n<span style=\"color: #333333\">}); };</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOAHawoYASJANgA4kGRMAY1hNI6UKXQBBAAoBJUAF5QeSAE8mQ0AAoArgS6VxBVEyIBKZQD5QAb0yhQOAOJlQc+Y9AEyBpvYAvgDcmCFAA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#importHelpers' aria-label=\"Jump to compiler option info for importHelpers\" ><code>importHelpers</code></a></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.5\" href=\"/docs/handbook/release-notes/typescript-1-5.html\">1.5</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noEmitOnError-config'><a aria-label=\"Link to the compiler option: noEmitOnError\" id='noEmitOnError' href='#noEmitOnError' name='noEmitOnError' aria-labelledby=\"noEmitOnError-config\">#</a> No Emit On Error - <code>noEmitOnError</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.</p>\n<p>This defaults to <code>false</code>, making it easier to work with TypeScript in a watch-like environment where you may want to see results of changes to your code in another environment before making sure all errors are resolved.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 1.4\" href=\"/docs/handbook/release-notes/typescript-1-4.html\">1.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noErrorTruncation-config'><a aria-label=\"Link to the compiler option: noErrorTruncation\" id='noErrorTruncation' href='#noErrorTruncation' name='noErrorTruncation' aria-labelledby=\"noErrorTruncation-config\">#</a> No Error Truncation - <code>noErrorTruncation</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not truncate error messages.</p>\n<p>With <code>false</code>, the default.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> {</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string'>propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string'>propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string'>propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string'>propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string'>propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">}</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #008000\">// String representation of type of &apos;x&apos; should be truncated in error message</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='var s: string'>s</data-lsp></data-err></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></data-err></span><span style=\"color: #333333\">;</span>\n<span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQIEAdnAKKwIAq0ArmQMYCGALgJZxmoBmrADaJIRAG6tooAB6oA3kVCgADvGUx2ATwDqndgAsAgmUrTmkSABNOZAOaDNAGR62AcqwC2kAIypE7aBtbAG5FFTUNHT0jEzMLazsHZzt3LzQ-AKDQpVU4dWgtXQNjU3MrIKSXVMgMDMC7bPC8yKKY0viKpyrPSFw6rLDc-MLokrjyxK6Unvx+hqIAX1CSMABlTLtQaEhVSBEydg5uMlA4PlAtdVPzgHJpG9BEfTgGQUtQACNIC8YWDitQDZQDB4FIvIhEKxbKIJFIUI8NrZQABeGTBIA'>Try</a></div></pre>\n<p>With <code>true</code></p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> {</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName1: string'>propertyWithAnExceedinglyLongName1</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName2: string'>propertyWithAnExceedinglyLongName2</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName3: string'>propertyWithAnExceedinglyLongName3</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName4: string'>propertyWithAnExceedinglyLongName4</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">  <data-lsp lsp='(property) propertyWithAnExceedinglyLongName5: string'>propertyWithAnExceedinglyLongName5</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string;</span>\n<span style=\"color: #1A1A1A\">}</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #008000\">// String representation of type of &apos;x&apos; should be truncated in error message</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='var s: string'>s</data-lsp></data-err></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> string </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='var x: {&amp;#13;    propertyWithAnExceedinglyLongName1: string;&amp;#13;    propertyWithAnExceedinglyLongName2: string;&amp;#13;    propertyWithAnExceedinglyLongName3: string;&amp;#13;    propertyWithAnExceedinglyLongName4: string;&amp;#13;    propertyWithAnExceedinglyLongName5: string;&amp;#13;}'>x</data-lsp></data-err></span><span style=\"color: #333333\">;</span>\n<span class=\"error\"><span>Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span><span class=\"code\">2322<br/>2454</span></span><span class=\"error-behind\">Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; }' is not assignable to type 'string'.</br>Variable 'x' is used before being assigned.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQIEAdnAKKwIAq0ArmQMYCGALgJZxmruOQiAN1bRQAD1QBvIqFAAHePJjsAngHVO7ABYBBMpXHNIkACacyAcwA2qgDI9LAOVYBbSAEZUifhcsBuWQUlFQ0tPQMjE3MrWwcrF3c0b18rQLlFOGVoNU0dfUNjMz84x0TIDBToP3TgrNC8iMLokvsyt0hcKpqgzOzc8IKo4ti2hI78brSiAF9AkjAAZVTLUGhIRUhESDJ2Dm4yUDgAM1A1ZSPTgHJxK9BEbTgGa1NQACNIM8YWDjNQC1AMHgYnciEQrEsghEYhQ9xWoAAvBJ-EA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noImplicitUseStrict-config'><a aria-label=\"Link to the compiler option: noImplicitUseStrict\" id='noImplicitUseStrict' href='#noImplicitUseStrict' name='noImplicitUseStrict' aria-labelledby=\"noImplicitUseStrict-config\">#</a> No Implicit Use Strict - <code>noImplicitUseStrict</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>You shouldn’t need this. By default, when emitting a module file to a non-ES6 target, TypeScript emits a <code>\"use strict\";</code> prologue at the top of the file.\nThis setting disables the prologue.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #1A1A1A\">define</span><span style=\"color: #333333\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #333333\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">exports</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    exports.</span><span style=\"color: #1A1A1A\">__esModule</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    exports.</span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> fn() { }</span>\n<span style=\"color: #333333\">    exports.</span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKAzNmOMrACYCuANiZQIICyAEQYQAdrACSyAA4dUAYwwBVSCWroC8rDnB4O8PAE9IajXIqgAZrpWYSADymwC6S2xFnUsEZZEAKAJSgAN4AvkA'>Try</a></div></pre>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #1A1A1A\">define</span><span style=\"color: #333333\">([</span><span style=\"color: #A31515\">\"require\"</span><span style=\"color: #333333\">, </span><span style=\"color: #A31515\">\"exports\"</span><span style=\"color: #333333\">], </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">require</span><span style=\"color: #333333\">, </span><span style=\"color: #1A1A1A\">exports</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    exports.</span><span style=\"color: #1A1A1A\">__esModule</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    exports.</span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">void</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">0</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> fn() { }</span>\n<span style=\"color: #333333\">    exports.</span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">fn</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKAzNmOMrACYCuANiZQIICyAEUwkAHgAdYBdKABmbAHYBjdKljzZ8gBQBKUAG8AvkA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noLib-config'><a aria-label=\"Link to the compiler option: noLib\" id='noLib' href='#noLib' name='noLib' aria-labelledby=\"noLib-config\">#</a> No Lib - <code>noLib</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Disables the automatic inclusion of any library files.\nIf this option is set, <code>lib</code> is ignored.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#lib' aria-label=\"Jump to compiler option info for lib\" ><code>lib</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noResolve-config'><a aria-label=\"Link to the compiler option: noResolve\" id='noResolve' href='#noResolve' name='noResolve' aria-labelledby=\"noResolve-config\">#</a> No Resolve - <code>noResolve</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>By default, TypeScript will examine the initial set of files for <code>import</code> and <code>&#x3C;reference</code> directives and add these resolved files to your program.</p>\n<p>If <code>noResolve</code> is set, this process doesn’t happen.\nHowever, <code>import</code> statements are still checked to see if they resolve to a valid module, so you’ll need to make sure this is satisfied by some other means.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='noStrictGenericChecks-config'><a aria-label=\"Link to the compiler option: noStrictGenericChecks\" id='noStrictGenericChecks' href='#noStrictGenericChecks' name='noStrictGenericChecks' aria-labelledby=\"noStrictGenericChecks-config\">#</a> No Strict Generic Checks - <code>noStrictGenericChecks</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>TypeScript will unify type parameters when comparing two generic functions.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type A = &amp;lt;T, U>(x: T, y: U) => [T, U]'>A</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> &lt;<data-lsp lsp='(type parameter) T in &amp;lt;T, U>(x: T, y: U): [T, U]'>T</data-lsp>, <data-lsp lsp='(type parameter) U in &amp;lt;T, U>(x: T, y: U): [T, U]'>U</data-lsp>>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: T'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) T in &amp;lt;T, U>(x: T, y: U): [T, U]'>T</data-lsp>, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) y: U'>y</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) U in &amp;lt;T, U>(x: T, y: U): [T, U]'>U</data-lsp>) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> [<data-lsp lsp='(type parameter) T in &amp;lt;T, U>(x: T, y: U): [T, U]'>T</data-lsp>, <data-lsp lsp='(type parameter) U in &amp;lt;T, U>(x: T, y: U): [T, U]'>U</data-lsp>];</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type B = &amp;lt;S>(x: S, y: S) => [S, S]'>B</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> &lt;<data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp>>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) x: S'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp>, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) y: S'>y</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp>) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> [<data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp>, <data-lsp lsp='(type parameter) S in &amp;lt;S>(x: S, y: S): [S, S]'>S</data-lsp>];</span>\n\n<span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function f(a: A, b: B): void'>f</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) a: A'>a</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='type A = &amp;lt;T, U>(x: T, y: U) => [T, U]'>A</data-lsp>, </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) b: B'>b</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='type B = &amp;lt;S>(x: S, y: S) => [S, S]'>B</data-lsp>) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) b: B'>b</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) a: A'>a</data-lsp></span><span style=\"color: #333333\">; </span><span style=\"color: #008000\">// Ok</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-err><data-lsp lsp='(parameter) a: A'>a</data-lsp></data-err></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) b: B'>b</data-lsp></span><span style=\"color: #333333\">; </span><span style=\"color: #008000\">// Error</span>\n<span class=\"error\"><span>Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type 'B' is not assignable to type 'A'.\n  Types of parameters 'y' and 'y' are incompatible.\n    Type 'U' is not assignable to type 'T'.\n      'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.</span><span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFA4C4CeADpKAIKgC8oAPACoA0oAqgHwAUAHqk6IahYBKam1ABtPiwC6AbgIkyAIWp0Aypx6g1zAdpFUx4ndrl4AZgFcAdgGN8ASzjXQ5jgENU5ZgCNUSkQBvHFBQH1V3WVAQUAB5AGsQ0HdVHyiYgFFYBBwAXyA'>Try</a></div></pre>\n<p>This flag can be used to remove that check.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.4\" href=\"/docs/handbook/release-notes/typescript-2-4.html\">2.4</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='out-config'><a aria-label=\"Link to the compiler option: out\" id='out' href='#out' name='out' aria-labelledby=\"out-config\">#</a> Out - <code>out</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#outFile\">outFile</a> instead.</p>\n<p>The <code>out</code> option computes the final file location in a way that is not predictable or consistent.\nThis option is retained for backward compatibility only and is deprecated.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>Deprecated</p>\n</li>\n<li><span>Default:</span><p><code>n/a</code></p>\n</li>\n<li><span>Related:</span><p><a href='#outDir' aria-label=\"Jump to compiler option info for outDir\" ><code>outDir</code></a>, <a href='#outFile' aria-label=\"Jump to compiler option info for outFile\" ><code>outFile</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='preserveConstEnums-config'><a aria-label=\"Link to the compiler option: preserveConstEnums\" id='preserveConstEnums' href='#preserveConstEnums' name='preserveConstEnums' aria-labelledby=\"preserveConstEnums-config\">#</a> Preserve Const Enums - <code>preserveConstEnums</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not erase <code>const enum</code> declarations in generated code. <code>const enum</code>s provide a way to reduce the overall memory footprint\nof your application at runtime by emitting the enum value instead of a reference.</p>\n<p>For example with this TypeScript:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">enum</span><span style=\"color: #333333\"> <data-lsp lsp='const enum Album'>Album</data-lsp> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1'>JimmyEatWorldFutures</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Album.TubRingZooHypothesis = 2'>TubRingZooHypothesis</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Album.DogFashionDiscoAdultery = 3'>DogFashionDiscoAdultery</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const selectedAlbum: Album.JimmyEatWorldFutures'>selectedAlbum</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const enum Album'>Album</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1'>JimmyEatWorldFutures</data-lsp></span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const selectedAlbum: Album.JimmyEatWorldFutures'>selectedAlbum</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const enum Album'>Album</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(enum member) Album.JimmyEatWorldFutures = 1'>JimmyEatWorldFutures</data-lsp></span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBApmArgWxgQQDYCMUwN4BQMMAUgJbLICeAogIZQDqIAThgCYBiiUiLcEGAF4YARgA0RGABVEWAEpkwAcwBaIEAAkqABxBQAFgLKCRAJknEAIiGWc6EA2XBWToNO0QYocFlWEwAMySAL4EBKCQsBBwGHDAPuyYOKgiySgAdOSUtAzMbFw8fAIA3ARkAGYwABQxcQlwSdi4Qq3ozchZFNT0TKwc3Lz8EACU+FKRECBxGRi21QBE0gYMMCYwdDDK-KvABiBkwHAZCyNlIUA'>Try</a></div></pre>\n<p>The default <code>const enum</code> behavior is to convert any <code>Album.Something</code> to the corresponding number literal, and to remove a reference\nto the enum from the JavaScript completely.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">selectedAlbum </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">selectedAlbum</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1QBTPAV2VAEEAbAIwtAG9NRQApVZZAT0QEN0AdVgAnGgBMAYmXRlRxSKAC8oAIwAaVqAAqZOgCVUeAOYAtWLAASPAA6x00RaiWqATFrYARWCan8YVHwvF1wqCTIadGJRHhVQAGYtAF9MHHxCUEhiGmJsaIlaBkpVIooAOk5uPkERcWlZeUUAbkxUADNQAAps3PziQvpGZRHqIeRKrl4BYTFJGTkFSABKZm1cAlhc8ppfLoAiHWhBUBdQflATBRPsOFRsYnL95dbkoA'>Try</a></div></pre>\n<p>With <code>preserveConstEnums</code> set to <code>true</code>, the <code>enum</code> exists at runtime and the numbers are still emitted.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #A31515\">\"use strict\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">var</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">(</span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #333333\">[</span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"JimmyEatWorldFutures\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #333333\">[</span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"TubRingZooHypothesis\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #333333\">[</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #333333\">[</span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\">] </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"DogFashionDiscoAdultery\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">})(</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">||</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">Album</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {}));</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">selectedAlbum </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">if</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\">selectedAlbum</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\"> </span><span style=\"color: #008000\">/* JimmyEatWorldFutures */</span><span style=\"color: #333333\">) {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\">console.log</span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"That is a great choice.\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEAcCcFMGdbQG6wMIHsB28AuBRLAVwFt4AuUXaI2AKBAngAsMB3fEgS1zoGNseULGIlQAQQA2AI1KgA3nVCgAUlxIkAnvgCGuAOoZokgCYAxIriJx4oALygAjABoloACpFpAJS5YA5gBaGBgAEpqQGLjMCFy2DgBMrsoAIhj+ZjosXNgpcQLiJkSSuEia9qAAzK4AvnT8grigiJKwfKUmUrJiDl2kAHRqGtp6hsbmltYIANx0XABmoAAULW0dfT12vTIDQ1q6BkamFlY2AJQKbgI4GK39kulLAETuzHqgcaA6oP5w73ysLh8WD9J5nWY1IA'>Try</a></div></pre>\n<p>This essentially makes such <code>const enums</code> a source-code feature only, with no runtime traces.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='reactNamespace-config'><a aria-label=\"Link to the compiler option: reactNamespace\" id='reactNamespace' href='#reactNamespace' name='reactNamespace' aria-labelledby=\"reactNamespace-config\">#</a> React Namespace - <code>reactNamespace</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#jsxFactory\"><code>--jsxFactory</code></a> instead. Specify the object invoked for <code>createElement</code> when targeting <code>react</code> for TSX files.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>\"React\"</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='resolveJsonModule-config'><a aria-label=\"Link to the compiler option: resolveJsonModule\" id='resolveJsonModule' href='#resolveJsonModule' name='resolveJsonModule' aria-labelledby=\"resolveJsonModule-config\">#</a> Resolve JSON Module - <code>resolveJsonModule</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes\ngenerating a type for the <code>import</code> based on the static JSON shape.</p>\n<p>TypeScript does not support resolving JSON files by default:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @filename: settings.json</span>\n<span class=\"error\"><span>Cannot find module './settings.json'. Consider using '--resolveJsonModule' to import module with '.json' extension.</span><span class=\"code\">2732</span></span><span class=\"error-behind\">Cannot find module './settings.json'. Consider using '--resolveJsonModule' to import module with '.json' extension.</span><span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #333333\">}</span>\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='import settings'>settings</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='import settings'>settings</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='any'>debug</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='import settings'>settings</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='any'>dry</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwHYDMaBQIIAzASwBtIA7AQwFtJVFIAXJ4igc0QDoArROCrgDeuUGNAAiaJAAOcCagkAVAJ4zIAZQDG0YjKYSANKPESAJtBULQhKqUbHxks5ABGAV3bXb9yLgC++GDgJOTUdKhsLgAeXEyIuMQ0ctBMoIwsbJw28DSSXMAZrBzcfAISANy4uEVZ3C4e7KAAvK2gTNDukFW1JVwWKi1taBVAA'>Try</a></div></pre>\n<p>Enabling the option allows importing JSON, and validating the types in that JSON file.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// @filename: settings.json</span>\n<span style=\"color: #333333\">{</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"repo\"</span><span style=\"color: #333333\">: </span><span style=\"color: #A31515\">\"TypeScript\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"dry\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #333333\">,</span>\n<span class=\"error\"><span>This condition will always return 'false' since the types 'boolean' and 'number' have no overlap.</span><span class=\"code\">2367</span></span><span class=\"error-behind\">This condition will always return 'false' since the types 'boolean' and 'number' have no overlap.</span><span style=\"color: #333333\">    </span><span style=\"color: #A31515\">\"debug\"</span><span style=\"color: #333333\">: </span><span style=\"color: #0000FF\">false</span>\n<span style=\"color: #333333\">}</span>\n<span style=\"color: #008000\">// @filename: index.ts</span>\n<span style=\"color: #0000FF\">import</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='import settings'>settings</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">from</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"./settings.json\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='import settings'>settings</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) &amp;quot;debug&amp;quot;: boolean'>debug</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='import settings'>settings</data-lsp></span><span style=\"color: #333333\">.</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) &amp;quot;dry&amp;quot;: boolean'>dry</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">===</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">2</span><span style=\"color: #333333\">;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AUCBNJInADYBukAUqQHYCycAJgK5mQFjgC2L7kVAGM4PPnQBWiLhD5sOAJRLlWAFwCWcOqjotOhcADN1HOgEMeg0IkiqNdAOaIAdFK14A3nlA-QAImIABzg-VD8AFQBPQMgAZSFodUDVPwAab18-ZmhI0NBDMzIbdN9-ZkgAI1YHPIKizgBfGSMTSHNLVHU6coAPZ1VpdR5g6FVrW3snfPgef2dgGzsup1d6PwBuPDxFyZdyqodQAF4T0FVoVkhNneW9nOPTtHWgA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipDefaultLibCheck-config'><a aria-label=\"Link to the compiler option: skipDefaultLibCheck\" id='skipDefaultLibCheck' href='#skipDefaultLibCheck' name='skipDefaultLibCheck' aria-labelledby=\"skipDefaultLibCheck-config\">#</a> Skip Default Lib Check - <code>skipDefaultLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Use <a href=\"#skipLibCheck\"><code>--skipLibCheck</code></a> instead. Skip type checking of default library declaration files.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='skipLibCheck-config'><a aria-label=\"Link to the compiler option: skipLibCheck\" id='skipLibCheck' href='#skipLibCheck' name='skipLibCheck' aria-labelledby=\"skipLibCheck-config\">#</a> Skip Lib Check - <code>skipLibCheck</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Skip type checking of declaration files.</p>\n<p>This can save time during compilation at the expense of type-system accuracy. For example, two libraries could\ndefine two copies of the same <code>type</code> in an inconsistent way. Rather than doing a full check of all <code>d.ts</code> files, TypeScript\nwill type check the code you specifically refer to in your app’s source code.</p>\n<p>A common case where you might think to use <code>skipLibCheck</code> is when there are two copies of a library’s types in\nyour <code>node_modules</code>. In these cases, you should consider using a feature like <a href=\"https://yarnpkg.com/lang/en/docs/selective-version-resolutions/\">yarn’s resolutions</a>\nto ensure there is only one copy of that dependency in your tree or investigate how to ensure there is\nonly one copy by understanding the dependency resolution to fix the issue without additional tooling.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Recommended:</span><p>True</p>\n</li>\n<li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='stripInternal-config'><a aria-label=\"Link to the compiler option: stripInternal\" id='stripInternal' href='#stripInternal' name='stripInternal' aria-labelledby=\"stripInternal-config\">#</a> Strip Internal - <code>stripInternal</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Do not emit declarations for code that has an <code>@internal</code> annotation in it’s JSDoc comment.\nThis is an internal compiler option; use at your own risk, because the compiler does not check that the result is valid.\nIf you are searching for a tool to handle additional levels of visibility within your <code>d.ts</code> files, look at <a href=\"https://api-extractor.com\">api-extractor</a>.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">/**</span>\n<span style=\"color: #008000\"> * Days available in a week</span>\n<span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@internal</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const daysInAWeek: 7'>daysInAWeek</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">7</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #008000\">/** Calculate how much someone earns in a week */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function weeklySalary(dayRate: number): number'>weeklySalary</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) dayRate: number'>dayRate</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number) {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">return</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const daysInAWeek: 7'>daysInAWeek</data-lsp></span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">*</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) dayRate: number'>dayRate</data-lsp></span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">}</span></code><a href='https://www.typescriptlang.org/play/#code/PQKhCgAIUgRBDAngZ0vAbvAlgG3gIxwFNIsA7NSAdyKIGsoYABcgFyICcz4dHhwiADwAOAew6tIAY1FlkkgCZJkASTIBBAOq06kALyQA7AG5w4UDADCPKQFc87SAAtRVSAFtbUp5GSj3RLIkRPBcqOSUNPTQ-EJiEpAAZrZkUqxYstQ6OIgAyjyhiAAUSogASvDsAFyQZLbu+JwAlJAA3lCQHESstlyQpaoa2tEwpRXspgC+QA'>Try</a></div></pre>\n<p>With the flag set to <code>false</code> (default):</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">/**</span>\n<span style=\"color: #008000\"> * Days available in a week</span>\n<span style=\"color: #008000\"> * </span><span style=\"color: #0000FF\">@internal</span>\n<span style=\"color: #008000\"> */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\">daysInAWeek </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">7</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #008000\">/** Calculate how much someone earns in a week */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> weeklySalary(</span><span style=\"color: #1A1A1A\">dayRate</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCmwBUslqFmgAIsICekUMIBuwosIBGxchW2h4WLAGtFy8JWyiKwwneAtaAB1ij0oAWlIfxwNSABJCgBBAHUra1AAXlAAdgBuFjllAGFXAQBXEWxQOHhQZHyBaFBIWGQsaSxQLDEKLUpzSxslD29ffwAzfIoBSWkLeMJ1AGVXMXUAClD1ACUJUlAKfORDLFEASlAAb0VQUSx0fOdQZYjouO7lZbXsDIBfIA'>Try</a></div></pre>\n<p>With <code>stripInternal</code> set to <code>true</code> the <code>d.ts</code> emitted will be redacted.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">/** Calculate how much someone earns in a week */</span>\n<span style=\"color: #0000FF\">export</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> weeklySalary(</span><span style=\"color: #1A1A1A\">dayRate</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number;</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsAO8B20CmsUEMA2AoECSACwHsB3AUQFt5oMATAMXl3QC5RVH0APAHSMB0SITBRy1OtHEReAY1zZY2aPDIpCAKm35Q20ABFsAT0ihsAN2xtsAI3bcUl0BXToA1vsPhUGLDwfYHx+RDJYaFAFTRhQRjNIAEkUAEEAdQ9PUABeUAB2AG58HUMAYTwFAFdlDFApUBoqhRJQSDIadE10UHQVFAtUV3cvAxCwiKiAMyqUBXVNNyzcUwBlPBVTAAoE0wAlNU5QFCqae0wASlAAb31QWHRoKqx4xJSMrINX-cPigF8gA'>Try</a></div></pre>\n<p>The JavaScript output is still the same.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Status:</span><p>internal</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressExcessPropertyErrors-config'><a aria-label=\"Link to the compiler option: suppressExcessPropertyErrors\" id='suppressExcessPropertyErrors' href='#suppressExcessPropertyErrors' name='suppressExcessPropertyErrors' aria-labelledby=\"suppressExcessPropertyErrors-config\">#</a> Suppress Excess Property Errors - <code>suppressExcessPropertyErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This disables reporting of excess property errors, such as the one shown in the following example:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type Point = {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}'>Point</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) x: number'>x</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number; </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) y: number'>y</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number };</span>\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const p: Point'>p</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type Point = {&amp;#13;    x: number;&amp;#13;    y: number;&amp;#13;}'>Point</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> { <data-lsp lsp='(property) x: number'>x</data-lsp>: </span><span style=\"color: #09835A\">1</span><span style=\"color: #333333\">, <data-lsp lsp='(property) y: number'>y</data-lsp>: </span><span style=\"color: #09835A\">3</span><span style=\"color: #333333\">, <data-lsp lsp='(property) m: number'>m</data-lsp>: </span><span style=\"color: #09835A\">10</span><span style=\"color: #333333\"> };</span>\n<span class=\"error\"><span>Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span><span class=\"code\">2322</span></span><span class=\"error-behind\">Type '{ x: number; y: number; m: number; }' is not assignable to type 'Point'.\n  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABcBPAB0lAAU4BLAOz1AF5QBvUAD1WoFcBbAIxgDcoAhx79ooAL4CcAYzjVEdIqgo06jFu1ABGADTDUGA91Q6ADFIFA'>Try</a></div></pre>\n<p>This flag was added to help people migrate to the stricter checking of new object literals in <a href=\"/docs/handbook/release-notes/typescript-1-6.html#stricter-object-literal-assignment-checks\">TypeScript 1.6</a>.</p>\n<p>We don’t recommend using this flag in a modern codebase, you can suppress one-off cases where you need it using <code>// @ts-ignore</code>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='suppressImplicitAnyIndexErrors-config'><a aria-label=\"Link to the compiler option: suppressImplicitAnyIndexErrors\" id='suppressImplicitAnyIndexErrors' href='#suppressImplicitAnyIndexErrors' name='suppressImplicitAnyIndexErrors' aria-labelledby=\"suppressImplicitAnyIndexErrors-config\">#</a> Suppress Implicit Any Index Errors - <code>suppressImplicitAnyIndexErrors</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Turning <code>suppressImplicitAnyIndexErrors</code> on suppresses reporting the error about implicit anys when indexing into objects, as shown in the following example:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> { <data-lsp lsp='(property) x: number'>x</data-lsp>: </span><span style=\"color: #09835A\">10</span><span style=\"color: #333333\"> };</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #333333\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #333333\">]);</span>\n<span class=\"error\"><span>Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span><span class=\"code\">7053</span></span><span class=\"error-behind\">Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.\n  Property 'foo' does not exist on type '{ x: number; }'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM7mKKmX30IobZ76yQATSgA8AoqVLRS9YgDMAhsno064emQxZiZKrTDhKEqTNAB2AAwBWAMzV00SOtDQARgCtQAXlABvUMOIARnNQAF8AbjsHemhkSgA6ZGgAcwAKVzcAbQAiWWhobIBdAEpwoA'>Try</a></div></pre>\n<p>Using <code>suppressImplicitAnyIndexErrors</code> is quite a drastic approach. It is recommended to use a <code>@ts-ignore</code> comment instead:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> { <data-lsp lsp='(property) x: number'>x</data-lsp>: </span><span style=\"color: #09835A\">10</span><span style=\"color: #333333\"> };</span>\n<span style=\"color: #008000\">// @ts-ignore</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='const obj: {&amp;#13;    x: number;&amp;#13;}'>obj</data-lsp></span><span style=\"color: #333333\">[</span><span style=\"color: #A31515\">\"foo\"</span><span style=\"color: #333333\">]);</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM5kZbFlXXrSSOjQBGAK1ABeUAG9QAD2IBGAAygAvgG5aYcFnoBaVAHMYpGp27RklAHTJougBT8BAbQBEAM2jQnAXQCUyoA'>Try</a></div></pre>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Related:</span><p><a href='#noImplicitAny' aria-label=\"Jump to compiler option info for noImplicitAny\" ><code>noImplicitAny</code></a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='traceResolution-config'><a aria-label=\"Link to the compiler option: traceResolution\" id='traceResolution' href='#traceResolution' name='traceResolution' aria-labelledby=\"traceResolution-config\">#</a> Trace Resolution - <code>traceResolution</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When you are trying to debug why a module isn’t being included.\nYou can set <code>traceResolutions</code> to <code>true</code> to have TypeScript print information about its resolution process for each processed file.</p>\n<p>You can read more about this in <a href=\"/docs/handbook/module-resolution.html#tracing-module-resolution\">the handbook</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 2.0\" href=\"/docs/handbook/release-notes/typescript-2-0.html\">2.0</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='useDefineForClassFields-config'><a aria-label=\"Link to the compiler option: useDefineForClassFields\" id='useDefineForClassFields' href='#useDefineForClassFields' name='useDefineForClassFields' aria-labelledby=\"useDefineForClassFields-config\">#</a> Use Define For Class Fields - <code>useDefineForClassFields</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>This flag is used as part of migrating to the upcoming standard version of class fields. TypeScript introduced class fields many years before it was ratified in TC39. The latest version of the upcoming specification has a different runtime behavior to TypeScript’s implementation but the same syntax.</p>\n<p>This flag switches to the upcoming ECMA runtime behavior.</p>\n<p>You can read more about the transition in <a href=\"/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier\">the 3.7 release notes</a>.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.7\" href=\"/docs/handbook/release-notes/typescript-3-7.html\">3.7</a></p>\n</li></ul>\n</div></section>\n<div class='category'>\n<h2 id='Command_line_Options_6171' ><a href='#Command_line_Options_6171' name='Command_line_Options_6171' aria-label=\"Link to the section Command Line\" aria-labelledby='Command_line_Options_6171'>#</a>Command Line</h2>\n</div>\n<section class='compiler-option'>\n<h3 id='preserveWatchOutput-config'><a aria-label=\"Link to the compiler option: preserveWatchOutput\" id='preserveWatchOutput' href='#preserveWatchOutput' name='preserveWatchOutput' aria-labelledby=\"preserveWatchOutput-config\">#</a> Preserve Watch Output - <code>preserveWatchOutput</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Whether to keep outdated console output in watch mode instead of clearing the screen every time a change happened.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>false</code></p>\n</li>\n<li><span>Status:</span><p>internal</p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='pretty-config'><a aria-label=\"Link to the compiler option: pretty\" id='pretty' href='#pretty' name='pretty' aria-labelledby=\"pretty-config\">#</a> Pretty - <code>pretty</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>Stylize errors and messages using color and context, this is on by default — offers you a chance to have less terse,\nsingle colored messages from the compiler.</p>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>true</code></p>\n</li></ul>\n</div></section>\n</div>\n</article>\n<article id='watchOptions'>\n<div class='indent'>\n<div class='category'>\n<h2 id='Watch_Options_999' ><a href='#Watch_Options_999' name='Watch_Options_999' aria-label=\"Link to the section Watch Options\" aria-labelledby='Watch_Options_999'>#</a>Watch Options</h2>\n<p>TypeScript 3.8 shipped a new strategy for watching directories, which is crucial for efficiently picking up changes to <code>node_modules</code>.</p>\n<p>On operating systems like Linux, TypeScript installs directory watchers (as opposed to file watchers) on <code>node_modules</code> and many of its subdirectories to detect changes in dependencies.\nThis is because the number of available file watchers is often eclipsed by the of files in <code>node_modules</code>, whereas there are way fewer directories to track.</p>\n<p>Because every project might work better under different strategies, and this new approach might not work well for your workflows, TypeScript 3.8 introduces a new <code>watchOptions</code> field which allows users to tell the compiler/language service which watching strategies should be used to keep track of files and directories.</p>\n</div>\n<section class='compiler-option'>\n<h3 id='fallbackPolling-config'><a aria-label=\"Link to the compiler option: fallbackPolling\" id='fallbackPolling' href='#fallbackPolling' name='fallbackPolling' aria-labelledby=\"fallbackPolling-config\">#</a> fallbackPolling - <code>fallbackPolling</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn’t support native file watchers.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every file for changes several times a second at a fixed interval.</li>\n<li><code>priorityPollingInterval</code>: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified files will be checked less often.</li>\n<li><code>synchronousWatchDirectory</code>: Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in <code>node_modules</code> from running <code>npm install</code>), but you might want to disable it with this flag for some less-common setups.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Allowed:</span><p>fixedPollingInterval,<br/>priorityPollingInterval,<br/>dynamicPriorityPolling</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watchDirectory-config'><a aria-label=\"Link to the compiler option: watchDirectory\" id='watchDirectory' href='#watchDirectory' name='watchDirectory' aria-labelledby=\"watchDirectory-config\">#</a> watchDirectory - <code>watchDirectory</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every directory for changes several times a second at a fixed interval.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified directories will be checked less often.</li>\n<li><code>useFsEvents</code> (the default): Attempt to use the operating system/file system’s native events for directory changes.</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>useFsEvents</code></p>\n</li>\n<li><span>Allowed:</span><p>fixedPollingInterval,<br/>dynamicPriorityPolling,<br/>useFsEvents</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n<section class='compiler-option'>\n<h3 id='watchFile-config'><a aria-label=\"Link to the compiler option: watchFile\" id='watchFile' href='#watchFile' name='watchFile' aria-labelledby=\"watchFile-config\">#</a> watchFile - <code>watchFile</code></h3>\n<div class='compiler-content'>\n<div class='markdown'>\n<p>The strategy for how individual files are watched.</p>\n<ul>\n<li><code>fixedPollingInterval</code>: Check every file for changes several times a second at a fixed interval.</li>\n<li><code>priorityPollingInterval</code>: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.</li>\n<li><code>dynamicPriorityPolling</code>: Use a dynamic queue where less-frequently modified files will be checked less often.</li>\n<li><code>useFsEvents</code> (the default): Attempt to use the operating system/file system’s native events for file changes.</li>\n<li><code>useFsEventsOnParentDirectory</code>: Attempt to use the operating system/file system’s native events to listen for changes on a file’s parent directory</li>\n</ul>\n</div>\n<ul class='compiler-option-md'><li><span>Default:</span><p><code>useFsEvents</code></p>\n</li>\n<li><span>Allowed:</span><p>fixedPollingInterval,<br/>priorityPollingInterval,<br/>dynamicPriorityPolling,<br/>useFsEvents,<br/>useFsEventsOnParentDirectory</p>\n</li>\n<li><span>Released:</span><p><a aria-label=\"Release notes for TypeScript 3.8\" href=\"/docs/handbook/release-notes/typescript-3-8.html\">3.8</a></p>\n</li></ul>\n</div></section>\n</div>\n</article>","frontmatter":{"permalink":null}}},"pageContext":{"locale":"it","tsconfigMDPath":"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/tsconfig-reference/output/it.md","categoriesPath":"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/tsconfig-reference/output/it.json"}},"staticQueryHashes":[]}