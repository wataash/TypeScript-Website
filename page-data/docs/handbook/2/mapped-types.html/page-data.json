{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/mapped-types.html","result":{"data":{"markdownRemark":{"id":"0f3e51de-f90f-5c7a-b4a5-414740608560","excerpt":"When you don’t want to repeat yourself, sometimes a type needs to be based on another type. Mapped types build on the syntax for index signatures, which are…","html":"<p>When you don’t want to repeat yourself, sometimes a type needs to be based on another type.</p>\n<p>Mapped types build on the syntax for index signatures, which are used to declare the types of properties which has not been declared ahead of time:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type OnlyBoolsAndHorses = {&amp;#13;    [key: string]: boolean | Horse;&amp;#13;}'>OnlyBoolsAndHorses</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  [</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) key: string'>key</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string]</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> boolean </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> <data-lsp lsp='type Horse = {}'>Horse</data-lsp>;</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const conforms: OnlyBoolsAndHorses'>conforms</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #1A1A1A\"> <data-lsp lsp='type OnlyBoolsAndHorses = {&amp;#13;    [key: string]: boolean | Horse;&amp;#13;}'>OnlyBoolsAndHorses</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(property) del: true'>del</data-lsp>: </span><span style=\"color: #0000FF\">true</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(property) rodney: false'>rodney</data-lsp>: </span><span style=\"color: #0000FF\">false</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">};</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAEg9gJwM7QLxQN4F8DcAoAegKgFoyBjAV2DJL1EigHkA7AGxACE442kBBFgBN4yCEijoMeKFADaAawggAXFCTAEASxYBzALpqARjzYQAhiygAfWIhT5cePOTgsNUVywBmiALZIaqwc3LwCwqIoElIyUEIQbGqalBAANLEIcEIsymre5nxpeLhAA'>Try</a></div></pre>\n<p>A mapped type is a generic type which uses a union created <a href=\"/docs/handbook/2/indexed-access-types.html\">via a <code>keyof</code></a> to iterate through the keys of one type to create another:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type OptionsFlags&amp;lt;Type> = { [Property in keyof Type]: boolean; }'>OptionsFlags</data-lsp>&lt;<data-lsp lsp='(type parameter) Type in type OptionsFlags&amp;lt;Type>'>Type</data-lsp>> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  [<data-lsp lsp='(type parameter) Property'>Property</data-lsp> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in type OptionsFlags&amp;lt;Type>'>Type</data-lsp>]</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> boolean;</span>\n<span style=\"color: #333333\">};</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA8mwEsD2A7AzgMQDYEMDmaAPACrgQB8UAvFAN4BQUUA2gAoBOSk7oUCKUANYQQSAGZRSkALoAuKACMkSLBBwoA3PQC+GoA'>Try</a></div></pre>\n<p>In this example, <code>OptionFlags</code> will take all the properties from the type <code>Type</code> and change their values to be a boolean.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type FeatureFlags = {&amp;#13;    darkMode: () => void;&amp;#13;    newUserProfile: () => void;&amp;#13;}'>FeatureFlags</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(property) darkMode: () => void'>darkMode</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> void;</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(property) newUserProfile: () => void'>newUserProfile</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> void;</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type FeatureOptions = {&amp;#13;    darkMode: boolean;&amp;#13;    newUserProfile: boolean;&amp;#13;}'>FeatureOptions</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> <data-lsp lsp='type OptionsFlags&amp;lt;Type> = { [Property in keyof Type]: boolean; }'>OptionsFlags</data-lsp>&lt;<data-lsp lsp='type FeatureFlags = {&amp;#13;    darkMode: () => void;&amp;#13;    newUserProfile: () => void;&amp;#13;}'>FeatureFlags</data-lsp>>;</span>\n<span class='query'>//   ^ = type FeatureOptions = {\n//       darkMode: boolean;\n//       newUserProfile: boolean;\n//   }</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA8mwEsD2A7AzgMQDYEMDmaAPACrgQB8UAvFAN4BQUUA2gAoBOSk7oUCKUANYQQSAGZRSkALoAuKACMkSLBBwoA3PQC+WgPR6oAWhMBjAK7ATR+qEhQMa4OfYRs+NNTqMoAExzsggCySL4Q8gAUAJTUlABuSAi+WkwoEADuAKpoEOwc4giqkTFU8YnJOlq2ZA5OLhBwiKieNI3I6O4EhI44zq6daOT6hkwAegD8QA'>Try</a></div></pre>\n<h3 id=\"mapping-modifiers\" style=\"position:relative;\"><a href=\"#mapping-modifiers\" aria-label=\"mapping modifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mapping Modifiers</h3>\n<p>There are two additional modifiers which can be applied during mapping: <code>readonly</code> and <code>?</code> which affect mutability and optionality respectively. Both of these modifiers support a prefix of <code>-</code> or <code>+</code> with <code>+</code> being the default.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type CreateMutable&amp;lt;Type> = { -readonly [Property in keyof Type]: Type[Property]; }'>CreateMutable</data-lsp>&lt;<data-lsp lsp='(type parameter) Type in type CreateMutable&amp;lt;Type>'>Type</data-lsp>> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #000000\">-</span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #333333\"> [<data-lsp lsp='(type parameter) Property'>Property</data-lsp> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in type CreateMutable&amp;lt;Type>'>Type</data-lsp>]</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in type CreateMutable&amp;lt;Type>'>Type</data-lsp>[<data-lsp lsp='(type parameter) Property'>Property</data-lsp>];</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type LockedAccount = {&amp;#13;    readonly id: string;&amp;#13;    readonly name: string;&amp;#13;}'>LockedAccount</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) id: string'>id</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string;</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #0000FF\">readonly</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) name: string'>name</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string;</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type UnlockedAccount = {&amp;#13;    id: string;&amp;#13;    name: string;&amp;#13;}'>UnlockedAccount</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> <data-lsp lsp='type CreateMutable&amp;lt;Type> = { -readonly [Property in keyof Type]: Type[Property]; }'>CreateMutable</data-lsp>&lt;<data-lsp lsp='type LockedAccount = {&amp;#13;    readonly id: string;&amp;#13;    readonly name: string;&amp;#13;}'>LockedAccount</data-lsp>>;</span>\n<span class='query'>//   ^ = type UnlockedAccount = {\n//       id: string;\n//       name: string;\n//   }</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAwgThAhsCBZArsRAjANhAHgBVwIA+KAXigG8AoKKAWgUQBMB7AO1xCgG0ACnA6Q4oKAEsuUANYQQHAGZQSkALoAuVaSEixodQG46AXxN1QkKABkOAY3lsAgvfsd0XYFVoMorTh4+STZtAGdgOGkAcxNGAO5eKC5EAFsIcMiYk3M6S1IoAFUeBydXd09vangkFAwsPEI7RwgXNw8vMhMAem7GKAA9AH4gA'>Try</a></div></pre>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type Concrete&amp;lt;Type> = { [Property in keyof Type]-?: Type[Property]; }'>Concrete</data-lsp>&lt;<data-lsp lsp='(type parameter) Type in type Concrete&amp;lt;Type>'>Type</data-lsp>> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  [<data-lsp lsp='(type parameter) Property'>Property</data-lsp> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in type Concrete&amp;lt;Type>'>Type</data-lsp>]</span><span style=\"color: #000000\">-?:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in type Concrete&amp;lt;Type>'>Type</data-lsp>[<data-lsp lsp='(type parameter) Property'>Property</data-lsp>];</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type MaybeUser = {&amp;#13;    id: string;&amp;#13;    name?: string | undefined;&amp;#13;    age?: number | undefined;&amp;#13;}'>MaybeUser</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) id: string'>id</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string;</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) name?: string | undefined'>name</data-lsp></span><span style=\"color: #000000\">?:</span><span style=\"color: #333333\"> string;</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) age?: number | undefined'>age</data-lsp></span><span style=\"color: #000000\">?:</span><span style=\"color: #333333\"> number;</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type User = {&amp;#13;    id: string;&amp;#13;    name: string;&amp;#13;    age: number;&amp;#13;}'>User</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> <data-lsp lsp='type Concrete&amp;lt;Type> = { [Property in keyof Type]-?: Type[Property]; }'>Concrete</data-lsp>&lt;<data-lsp lsp='type MaybeUser = {&amp;#13;    id: string;&amp;#13;    name?: string | undefined;&amp;#13;    age?: number | undefined;&amp;#13;}'>MaybeUser</data-lsp>>;</span>\n<span class='query'>//   ^ = type User = {\n//       id: string;\n//       name: string;\n//       age: number;\n//   }</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAwg9gOwMYCcLAgHgCrggPigF4oBvAKCigG0AFFOSFUKASwSgGsIQ4AzKLkgBdALQB+AFyC8dBk1DCA3OQC+K8qEhQAsgEMQAIwgBVAM4QUxMpTYATaWeAp2AcxVUEegLYQpUJxcEd1s9Vz9pBABXb2MUFXVyTTwoc0treGQ0DEx9I1MLFHwVAHoSqigAPXEgA'>Try</a></div></pre>\n<h2 id=\"key-remapping-via-as\" style=\"position:relative;\"><a href=\"#key-remapping-via-as\" aria-label=\"key remapping via as permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Remapping via <code>as</code></h2>\n<p>In TypeScript 4.1 and onwards, you can re-map keys in mapped types with an <code>as</code> clause in a mapped type:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> MappedTypeWithNewProperties&lt;Type&gt; </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    [Properties </span><span style=\"color: #0000FF\">in</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #333333\"> Type </span><span style=\"color: #0000FF\">as</span><span style=\"color: #333333\"> NewKeyType]</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> Type[Properties]</span>\n<span style=\"color: #333333\">}</span></code></div></pre>\n<p>You can leverage features like <a href=\"/docs/handbook/2/template-literal-types.html\">template literal types</a> to create new property names from prior ones:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type Getters&amp;lt;Type> = { [Property in keyof Type as `get${Capitalize&amp;lt;string &amp;amp; Property>}`]: () => Type[Property]; }'>Getters</data-lsp>&lt;<data-lsp lsp='(type parameter) Type in type Getters&amp;lt;Type>'>Type</data-lsp>> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    [<data-lsp lsp='(type parameter) Property'>Property</data-lsp> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in type Getters&amp;lt;Type>'>Type</data-lsp> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">`get</span><span style=\"color: #0000FF\">${</span><span style=\"color: #A31515\"><data-lsp lsp='type Capitalize&amp;lt;S extends string> = intrinsic'>Capitalize</data-lsp>&lt;string </span><span style=\"color: #000000\">&</span><span style=\"color: #A31515\"> <data-lsp lsp='(type parameter) Property'>Property</data-lsp>></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #333333\">]</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in type Getters&amp;lt;Type>'>Type</data-lsp>[<data-lsp lsp='(type parameter) Property'>Property</data-lsp>]</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #333333\"> <data-lsp lsp='interface Person'>Person</data-lsp> {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.name: string'>name</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.age: number'>age</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Person.location: string'>location</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string;</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type LazyPerson = {&amp;#13;    getName: () => string;&amp;#13;    getAge: () => number;&amp;#13;    getLocation: () => string;&amp;#13;}'>LazyPerson</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> <data-lsp lsp='type Getters&amp;lt;Type> = { [Property in keyof Type as `get${Capitalize&amp;lt;string &amp;amp; Property>}`]: () => Type[Property]; }'>Getters</data-lsp>&lt;<data-lsp lsp='interface Person'>Person</data-lsp>>;</span>\n<span class='query'>//   ^ = type LazyPerson = {\n//       getName: () => string;\n//       getAge: () => number;\n//       getLocation: () => string;\n//   }</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4hzAgJwM4B4Aq4ID4oF4oBvAKCnKgG0AFJAe0iVCgEsA7KAawhDoDMoWSFACGKKAAMA5vAAkRAMIiwLYCIA2LAF4Q0KYEnZSoAMii0GyUDgC+EgLoAuKAAoAlATxCINeo1D2JDYA3CQk7IhIfCIAxtDUyCh0HKQUUGwiALYQzvqGbFKhaSIyzmwArpkARshFFOp0MSLALMm5BkahNmGgwgAyIlogCajJBLDwkegjSWw4oQD0CxQAegD8QA'>Try</a></div></pre>\n<p>You can filter out keys by producing <code>never</code> via a conditional type:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #008000\">// Remove the &apos;kind&apos; property</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type RemoveKindField&amp;lt;T> = { [K in keyof T as Exclude&amp;lt;K, &amp;quot;kind&amp;quot;>]: T[K]; }'>RemoveKindField</data-lsp>&lt;<data-lsp lsp='(type parameter) T in type RemoveKindField&amp;lt;T>'>T</data-lsp>> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    [<data-lsp lsp='(type parameter) K'>K</data-lsp> </span><span style=\"color: #0000FF\">in</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) T in type RemoveKindField&amp;lt;T>'>T</data-lsp> </span><span style=\"color: #0000FF\">as</span><span style=\"color: #333333\"> <data-lsp lsp='type Exclude&amp;lt;T, U> = T extends U ? never : T'>Exclude</data-lsp>&lt;<data-lsp lsp='(type parameter) K'>K</data-lsp>, </span><span style=\"color: #A31515\">\"kind\"</span><span style=\"color: #333333\">&gt;]</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) T in type RemoveKindField&amp;lt;T>'>T</data-lsp>[<data-lsp lsp='(type parameter) K'>K</data-lsp>]</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">interface</span><span style=\"color: #333333\"> <data-lsp lsp='interface Circle'>Circle</data-lsp> {</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Circle.kind: &amp;quot;circle&amp;quot;'>kind</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"circle\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #333333\">    </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) Circle.radius: number'>radius</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> number;</span>\n<span style=\"color: #333333\">}</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type KindlessCircle = {&amp;#13;    radius: number;&amp;#13;}'>KindlessCircle</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> <data-lsp lsp='type RemoveKindField&amp;lt;T> = { [K in keyof T as Exclude&amp;lt;K, &amp;quot;kind&amp;quot;>]: T[K]; }'>RemoveKindField</data-lsp>&lt;<data-lsp lsp='interface Circle'>Circle</data-lsp>>;</span>\n<span class='query'>//   ^ = type KindlessCircle = {\n//       radius: number;\n//   }</span></code><a href='https://www.typescriptlang.org/play/#code/PTAECUFMFsHsDdKgC4AskHIDWBLAdgCYagAOATrCZGcgJ4BQdVEMCkA0vgQGI6QA2BADwAVAHygAvKADe9UAtABtdqHygskWrABmoEaACGAZ1ABRAB4BjfgFcCkIewA0oAES5CbsQF0AXPoqPvQAvgDc9PT4yNQ6hlZIAMI4ZDZIcooaXAFuVilpbhGZZIYEOLbGAXi20ABG1BEhkUxInIT8kMbGyakdUixwiG08fIJCPWliESCKAHoA-EA'>Try</a></div></pre>\n<h3 id=\"further-exploration\" style=\"position:relative;\"><a href=\"#further-exploration\" aria-label=\"further exploration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Further Exploration</h3>\n<p>Mapped types work well with other features in this type manipulation section, for example here is <a href=\"/docs/handbook/2/conditional-types.html\">a mapped type using a conditional type</a> which returns either a <code>true</code> or <code>false</code> depending on whether an object has the property <code>pii</code> set to the literal <code>true</code>:</p>\n<pre class=\"shiki\"><div class=\"language-id\">ts</div><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> ExtractPII&lt;Type&gt; </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  [Property </span><span style=\"color: #0000FF\">in</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #333333\"> Type]</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> Type[Property] </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">pii</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> true } </span><span style=\"color: #000000\">?</span><span style=\"color: #333333\"> true </span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> false;</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> DBFields </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\">id</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">format</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"incrementing\"</span><span style=\"color: #333333\"> };</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\">name</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> { </span><span style=\"color: #1A1A1A\">type</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> string; </span><span style=\"color: #1A1A1A\">pii</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> true };</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> ObjectsNeedingGDPRDeletion </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> CreateMutable&lt;DBFields&gt;;</span></code></div></pre>","headings":[{"value":"Mapping Modifiers","depth":3},{"value":"Key Remapping via as","depth":2},{"value":"Further Exploration","depth":3}],"frontmatter":{"permalink":"/docs/handbook/2/mapped-types.html","title":"Mapped Types","disable_toc":null,"handbook":null,"oneline":"Generating types by re-using an existing type.","beta":true}},"prev":null,"next":null},"pageContext":{"id":"8mapped-types","slug":"/docs/handbook/2/mapped-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Mapped Types.md","lang":"en","modifiedTime":"2021-02-08T12:20:41.274Z"}},"staticQueryHashes":[]}