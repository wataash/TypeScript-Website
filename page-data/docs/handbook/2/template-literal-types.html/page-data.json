{"componentChunkName":"component---src-templates-documentation-tsx","path":"/docs/handbook/2/template-literal-types.html","result":{"data":{"markdownRemark":{"id":"9037fcde-60fa-51f6-8c77-7306bfae1379","excerpt":"Template literal types build on string literal types, and have the ability to expand into many strings via unions. They have the same syntax as template literal…","html":"<p>Template literal types build on <a href=\"/docs/handbook/2/everyday-types.html#literal-types\">string literal types</a>, and have the ability to expand into many strings via unions.</p>\n<p>They have the same syntax as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">template literal strings in JavaScript</a>, but are used in type positions.\nWhen used with concrete literal types, a template literal produces a new string literal type by concatenating the contents.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type World = &amp;quot;world&amp;quot;'>World</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"world\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type Greeting = &amp;quot;hello world&amp;quot;'>Greeting</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">`hello </span><span style=\"color: #0000FF\">${</span><span style=\"color: #A31515\"><data-lsp lsp='type World = &amp;quot;world&amp;quot;'>World</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #333333\">;</span>\n<span class='query'>//   ^ = type Greeting = \"hello world\"</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA6g9gJwDYBMoF4oCIDujVYDcAUMaJFAOIIQTACWAdgOYZQAGAFhEknFABIA3vGQoAvuxIB6aVHkA9APxA'>Try</a></div></pre>\n<p>When a union is used in the interpolated position, the type is the set of every possible string literal that could be represented by each union member:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type EmailLocaleIDs = &amp;quot;welcome_email&amp;quot; | &amp;quot;email_heading&amp;quot;'>EmailLocaleIDs</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"welcome_email\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"email_heading\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type FooterLocaleIDs = &amp;quot;footer_title&amp;quot; | &amp;quot;footer_sendoff&amp;quot;'>FooterLocaleIDs</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"footer_title\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"footer_sendoff\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type AllLocaleIDs = &amp;quot;welcome_email_id&amp;quot; | &amp;quot;email_heading_id&amp;quot; | &amp;quot;footer_title_id&amp;quot; | &amp;quot;footer_sendoff_id&amp;quot;'>AllLocaleIDs</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #A31515\"><data-lsp lsp='type EmailLocaleIDs = &amp;quot;welcome_email&amp;quot; | &amp;quot;email_heading&amp;quot;'>EmailLocaleIDs</data-lsp> </span><span style=\"color: #000000\">|</span><span style=\"color: #A31515\"> <data-lsp lsp='type FooterLocaleIDs = &amp;quot;footer_title&amp;quot; | &amp;quot;footer_sendoff&amp;quot;'>FooterLocaleIDs</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">_id`</span><span style=\"color: #333333\">;</span>\n<span class='query'>//   ^ = type AllLocaleIDs = \"welcome_email_id\" | \"email_heading_id\" | \"footer_title_id\" | \"footer_sendoff_id\"</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAogtgQwJYBsAyB7AxglECSAIgM5QC8UARAO4QpYZwQD6EiqlUAPlW8iswAWEBABMkAOwDmlANwAoUJCgAxDBmAQATphx4ipCpQBm6zVubAkwPJx4mz25sQgTRGY8bnzF4aAEEUdGxcAhJyKAADABIAb3h+XVCDblVHHRD9EgBfZiRRSIUAeiKoMoA9AH4gA'>Try</a></div></pre>\n<p>For each interpolated position in the template literal, the unions are cross multiplied:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type AllLocaleIDs = &amp;quot;welcome_email_id&amp;quot; | &amp;quot;email_heading_id&amp;quot; | &amp;quot;footer_title_id&amp;quot; | &amp;quot;footer_sendoff_id&amp;quot;'>AllLocaleIDs</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #A31515\"><data-lsp lsp='type EmailLocaleIDs = &amp;quot;welcome_email&amp;quot; | &amp;quot;email_heading&amp;quot;'>EmailLocaleIDs</data-lsp> </span><span style=\"color: #000000\">|</span><span style=\"color: #A31515\"> <data-lsp lsp='type FooterLocaleIDs = &amp;quot;footer_title&amp;quot; | &amp;quot;footer_sendoff&amp;quot;'>FooterLocaleIDs</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">_id`</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type Lang = &amp;quot;en&amp;quot; | &amp;quot;ja&amp;quot; | &amp;quot;pt&amp;quot;'>Lang</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"en\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"ja\"</span><span style=\"color: #333333\"> </span><span style=\"color: #000000\">|</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"pt\"</span><span style=\"color: #333333\">;</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type LocaleMessageIDs = &amp;quot;en_welcome_email_id&amp;quot; | &amp;quot;en_email_heading_id&amp;quot; | &amp;quot;en_footer_title_id&amp;quot; | &amp;quot;en_footer_sendoff_id&amp;quot; | &amp;quot;ja_welcome_email_id&amp;quot; | &amp;quot;ja_email_heading_id&amp;quot; | &amp;quot;ja_footer_title_id&amp;quot; | &amp;quot;ja_footer_sendoff_id&amp;quot; | &amp;quot;pt_welcome_email_id&amp;quot; | &amp;quot;pt_email_heading_id&amp;quot; | &amp;quot;pt_footer_title_id&amp;quot; | &amp;quot;pt_footer_sendoff_id&amp;quot;'>LocaleMessageIDs</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #A31515\"><data-lsp lsp='type Lang = &amp;quot;en&amp;quot; | &amp;quot;ja&amp;quot; | &amp;quot;pt&amp;quot;'>Lang</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">_</span><span style=\"color: #0000FF\">${</span><span style=\"color: #A31515\"><data-lsp lsp='type AllLocaleIDs = &amp;quot;welcome_email_id&amp;quot; | &amp;quot;email_heading_id&amp;quot; | &amp;quot;footer_title_id&amp;quot; | &amp;quot;footer_sendoff_id&amp;quot;'>AllLocaleIDs</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #333333\">;</span>\n<span class='query'>//   ^ = type LocaleMessageIDs = \"en_welcome_email_id\" | \"en_email_heading_id\" | \"en_footer_title_id\" | \"en_footer_sendoff_id\" | \"ja_welcome_email_id\" | \"ja_email_heading_id\" | \"ja_footer_title_id\" | \"ja_footer_sendoff_id\" | \"pt_welcome_email_id\" | \"pt_email_heading_id\" | \"pt_footer_title_id\" | \"pt_footer_sendoff_id\"</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAogtgQwJYBsAyB7AxglECSAIgM5QC8UARAO4QpYZwQD6EiqlUAPlW8iswAWEBABMkAOwDmlANwAoUJCgAxDBmAQATphx4ipCpQBm6zVubAkwPJx4mz25sQgTRGY8bnyA9D6gAtEFYAK7AQQGK4NAAgijo2LgEJORQAAYAJADe8Py6SQbcqo46ifokAL7MSKJpCkrQaAjSqZSudlQAVggdlGDA3lHK+XgAshDExAhSyYbp2U3SVdlxCXqzFXW+-lBQAHoA-EA'>Try</a></div></pre>\n<p>We generally recommend that people use ahead-of-time generation for large string unions, but this is useful in smaller cases.</p>\n<h3 id=\"string-unions-in-types\" style=\"position:relative;\"><a href=\"#string-unions-in-types\" aria-label=\"string unions in types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Unions in Types</h3>\n<p>The power in template literals comes when defining a new string based off an existing string inside a type.</p>\n<p>For example, a common pattern in JavaScript is to extend an object based on the fields that it currently has. We’ll provide a type definition for a function which adds support for an <code>on</code> function which lets you know when a value has changed:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const person: any'>person</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function makeWatchedObject(obj: any): any'>makeWatchedObject</data-lsp></span><span style=\"color: #333333\">({</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(property) firstName: string'>firstName</data-lsp>: </span><span style=\"color: #A31515\">\"Saoirse\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(property) lastName: string'>lastName</data-lsp>: </span><span style=\"color: #A31515\">\"Ronan\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">26</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">});</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const person: any'>person</data-lsp>.<data-lsp lsp='any'>on</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"firstNameChanged\"</span><span style=\"color: #333333\">, (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) newValue: any'>newValue</data-lsp></span><span style=\"color: #333333\">) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">`firstName was changed to </span><span style=\"color: #0000FF\">${</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) newValue: any'>newValue</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">!`</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">});</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFABMCmBjANgIbxagBmArpDgC4CW0koAtgQNZYDqB1OAFlhgDyAIwBWuagApoYgFygCkAJ4BKeYqUBuNCFABaAznLUDetDgYpqoAA5ZUDUAF5mbTtz4CR4mpIDeaKBktKjUAHIETFjyAEQAygTQIShYMQA0gaCEVhFRsQBKDIrpmQQA5tGgAEwAbBkAviraaHYOkAB0DJIxpMnhkVgAwryKFRjpoJKQWADuAGoEeORYKs4AfKABQRaQKNB4WO140GWSAAa9obkkMwQooHyjAqDU0KAAJH7T84vL9QCEZyaaEamiAA'>Try</a></div></pre>\n<p>Notice that <code>on</code> listens on the event <code>\"firstNameChanged\"</code>, not just <code>\"firstName\"</code>, template literals provide a way to handle this sort of string manipulation inside the type system:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type PropEventSource&amp;lt;Type> = {&amp;#13;    on(eventName: `${string &amp;amp; keyof Type}Changed`, callback: (newValue: any) => void): void;&amp;#13;}'>PropEventSource</data-lsp>&lt;<data-lsp lsp='(type parameter) Type in type PropEventSource&amp;lt;Type>'>Type</data-lsp>> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    <data-lsp lsp='(method) on(eventName: `${string &amp;amp; keyof Type}Changed`, callback: (newValue: any) => void): void'>on</data-lsp>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) eventName: `${string &amp;amp; keyof Type}Changed`'>eventName</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #A31515\">string </span><span style=\"color: #000000\">&</span><span style=\"color: #A31515\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #A31515\"> <data-lsp lsp='(type parameter) Type in type PropEventSource&amp;lt;Type>'>Type</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">Changed`</span><span style=\"color: #333333\">, <data-lsp lsp='(parameter) callback: (newValue: any) => void'>callback</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) newValue: any'>newValue</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> any) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> void)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> void;</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #008000\">/// Create a \"watched object\" with an &apos;on&apos; method</span>\n<span style=\"color: #008000\">/// so that you can watch for changes to properties.</span>\n<span style=\"color: #0000FF\">declare</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">function</span><span style=\"color: #333333\"> <data-lsp lsp='function makeWatchedObject&amp;lt;Type>(obj: Type): Type &amp;amp; PropEventSource&amp;lt;Type>'>makeWatchedObject</data-lsp>&lt;<data-lsp lsp='(type parameter) Type in makeWatchedObject&amp;lt;Type>(obj: Type): Type &amp;amp; PropEventSource&amp;lt;Type>'>Type</data-lsp>>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) obj: Type'>obj</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in makeWatchedObject&amp;lt;Type>(obj: Type): Type &amp;amp; PropEventSource&amp;lt;Type>'>Type</data-lsp>)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in makeWatchedObject&amp;lt;Type>(obj: Type): Type &amp;amp; PropEventSource&amp;lt;Type>'>Type</data-lsp> </span><span style=\"color: #000000\">&</span><span style=\"color: #333333\"> <data-lsp lsp='type PropEventSource&amp;lt;Type> = {&amp;#13;    on(eventName: `${string &amp;amp; keyof Type}Changed`, callback: (newValue: any) => void): void;&amp;#13;}'>PropEventSource</data-lsp>&lt;<data-lsp lsp='(type parameter) Type in makeWatchedObject&amp;lt;Type>(obj: Type): Type &amp;amp; PropEventSource&amp;lt;Type>'>Type</data-lsp>>;</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACgTgezAUQG4QHbAMoIK5wDGEAPACrgQB8UAvFAN4BQUrUCGAFBOlgHIBDALYQAXFAAGAEgYBnYHACWGAOZQAZFADWEEAgBmUCpAC+AYQAWA1RAAmEgDRRCAgDauARgMJbxnDBAA7gBqbnhiUNYgAJR0NKgIirbR4glJANxMJplMAPT5UGZwEALA0AJQAESBpYQWduweAFYQhMCVUIGKwBaRGFAA5BwDUCI9CLZ5BbIIUD2lUHp4ztadtb36CHDOVjayc7NgiJBwwIoQsgB0TLatrgLFUPp4GG2KHKMCOgDq63YA8s1WsByJQqJwEM1xMYICkjJQNLBjmhMDh8ERSDCqOkgA'>Try</a></div></pre>\n<p>With this, we can build something that errors when given the wrong property:</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">const</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='const person: {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;} &amp;amp; PropEventSource&amp;lt;{&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}>'>person</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #1A1A1A\"><data-lsp lsp='function makeWatchedObject&amp;lt;{&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}>(obj: {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}): {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;} &amp;amp; PropEventSource&amp;lt;{&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}>'>makeWatchedObject</data-lsp></span><span style=\"color: #333333\">({</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(property) firstName: string'>firstName</data-lsp>: </span><span style=\"color: #A31515\">\"Saoirse\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(property) lastName: string'>lastName</data-lsp>: </span><span style=\"color: #A31515\">\"Ronan\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  <data-lsp lsp='(property) age: number'>age</data-lsp>: </span><span style=\"color: #09835A\">26</span>\n<span style=\"color: #333333\">});</span>\n\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const person: {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;} &amp;amp; PropEventSource&amp;lt;{&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}>'>person</data-lsp>.<data-lsp lsp='(method) on(eventName: &amp;quot;firstNameChanged&amp;quot; | &amp;quot;lastNameChanged&amp;quot; | &amp;quot;ageChanged&amp;quot;, callback: (newValue: any) => void): void'>on</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"firstNameChanged\"</span><span style=\"color: #333333\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> {});</span>\n\n<span style=\"color: #008000\">// It&apos;s typo-resistent</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const person: {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;} &amp;amp; PropEventSource&amp;lt;{&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}>'>person</data-lsp>.<data-lsp lsp='(method) on(eventName: &amp;quot;firstNameChanged&amp;quot; | &amp;quot;lastNameChanged&amp;quot; | &amp;quot;ageChanged&amp;quot;, callback: (newValue: any) => void): void'>on</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\"><data-err>&quot;firstName&quot;</data-err></span><span style=\"color: #333333\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> {});</span>\n<span class=\"error\"><span>Argument of type '\"firstName\"' is not assignable to parameter of type '\"firstNameChanged\" | \"lastNameChanged\" | \"ageChanged\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"firstName\"' is not assignable to parameter of type '\"firstNameChanged\" | \"lastNameChanged\" | \"ageChanged\"'.</span>\n<span style=\"color: #1A1A1A\"><data-lsp lsp='const person: {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;} &amp;amp; PropEventSource&amp;lt;{&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}>'>person</data-lsp>.<data-lsp lsp='(method) on(eventName: &amp;quot;firstNameChanged&amp;quot; | &amp;quot;lastNameChanged&amp;quot; | &amp;quot;ageChanged&amp;quot;, callback: (newValue: any) => void): void'>on</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\"><data-err>&quot;frstNameChanged&quot;</data-err></span><span style=\"color: #333333\">, () </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> {});</span>\n<span class=\"error\"><span>Argument of type '\"frstNameChanged\"' is not assignable to parameter of type '\"firstNameChanged\" | \"lastNameChanged\" | \"ageChanged\"'.</span><span class=\"code\">2345</span></span><span class=\"error-behind\">Argument of type '\"frstNameChanged\"' is not assignable to parameter of type '\"firstNameChanged\" | \"lastNameChanged\" | \"ageChanged\"'.</span></code><a href='https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUAC4CeADpKAArwkCiAbpAHYEDKcArtAMaQA8AKqUgA+UAF5QAbzyhZoOIwAUkBswByAQwC2kVAAMAJJMQFoAS0YBzUADJQAa0hE4AM1CCyAXwDCACw1WkAAmegA0oFwaADZRAEYaXPaoioyQAO4AatHsuqABRACU4qJ0cGZBBail5QDceJ51eEGQXFEa0OQu7IxcBGYKoFoajgDqGgRcvsEA8rEAVi0EAsKKcPOo-JXutpTU9EysHNx8-MJ1IKAAtNdc7ATXl3hcCiagZEgDEkOj45Mz84tFNJZC4zEgCJodKgAEQsDRlJCQaGhGSgNomSG5aEAJQUAWRqI0llyaAAbPUCo13ogFAA6BSKaGg8GYvwBYlBZGgRRFMSiSSeSl4PAXACSBAA5IhQMQSHBLh1EGYTAc8NS6QymWCMdokeEecUpIKqTAaYx6UomSzdWzApz9bz+cagA'>Try</a></div></pre>\n<h3 id=\"inference-with-template-literals\" style=\"position:relative;\"><a href=\"#inference-with-template-literals\" aria-label=\"inference with template literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inference with Template Literals</h3>\n<p>Note how the last examples did not re-use the type of the original value. The callback used an <code>any</code>. Template literal types can infer from substitution positions.</p>\n<p>We can make our last example generic to infer from parts of the <code>eventName</code> string to figure out the associated property.</p>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type PropEventSource&amp;lt;Type> = {&amp;#13;    on&amp;lt;Key extends string &amp;amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void;&amp;#13;}'>PropEventSource</data-lsp>&lt;<data-lsp lsp='(type parameter) Type in type PropEventSource&amp;lt;Type>'>Type</data-lsp>> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> {</span>\n<span style=\"color: #333333\">    <data-lsp lsp='(method) on&amp;lt;Key extends string &amp;amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void'>on</data-lsp>&lt;<data-lsp lsp='(type parameter) Key in on&amp;lt;Key extends string &amp;amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void'>Key</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #333333\"> string </span><span style=\"color: #000000\">&</span><span style=\"color: #333333\"> </span><span style=\"color: #0000FF\">keyof</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in type PropEventSource&amp;lt;Type>'>Type</data-lsp>></span>\n<span style=\"color: #333333\">        (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) eventName: `${Key}Changed`'>eventName</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">`</span><span style=\"color: #0000FF\">${</span><span style=\"color: #A31515\"><data-lsp lsp='(type parameter) Key in on&amp;lt;Key extends string &amp;amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void'>Key</data-lsp></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">Changed`</span><span style=\"color: #333333\">, <data-lsp lsp='(parameter) callback: (newValue: Type[Key]) => void'>callback</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) newValue: Type[Key]'>newValue</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in type PropEventSource&amp;lt;Type>'>Type</data-lsp>[<data-lsp lsp='(type parameter) Key in on&amp;lt;Key extends string &amp;amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void'>Key</data-lsp>]) </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> void )</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> void;</span>\n<span style=\"color: #333333\">};</span>\n\n<span style=\"color: #333333\">declare function <data-lsp lsp='function makeWatchedObject&amp;lt;Type>(obj: Type): Type &amp;amp; PropEventSource&amp;lt;Type>'>makeWatchedObject</data-lsp>&lt;<data-lsp lsp='(type parameter) Type in makeWatchedObject&amp;lt;Type>(obj: Type): Type &amp;amp; PropEventSource&amp;lt;Type>'>Type</data-lsp>>(</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) obj: Type'>obj</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in makeWatchedObject&amp;lt;Type>(obj: Type): Type &amp;amp; PropEventSource&amp;lt;Type>'>Type</data-lsp>)</span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> <data-lsp lsp='(type parameter) Type in makeWatchedObject&amp;lt;Type>(obj: Type): Type &amp;amp; PropEventSource&amp;lt;Type>'>Type</data-lsp> </span><span style=\"color: #000000\">&</span><span style=\"color: #333333\"> <data-lsp lsp='type PropEventSource&amp;lt;Type> = {&amp;#13;    on&amp;lt;Key extends string &amp;amp; keyof Type>(eventName: `${Key}Changed`, callback: (newValue: Type[Key]) => void): void;&amp;#13;}'>PropEventSource</data-lsp>&lt;<data-lsp lsp='(type parameter) Type in makeWatchedObject&amp;lt;Type>(obj: Type): Type &amp;amp; PropEventSource&amp;lt;Type>'>Type</data-lsp>>;</span>\n\n<span style=\"color: #333333\">const <data-lsp lsp='const person: {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;} &amp;amp; PropEventSource&amp;lt;{&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}>'>person</data-lsp> = <data-lsp lsp='function makeWatchedObject&amp;lt;{&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}>(obj: {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}): {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;} &amp;amp; PropEventSource&amp;lt;{&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}>'>makeWatchedObject</data-lsp>({</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) firstName: string'>firstName</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Saoirse\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) lastName: string'>lastName</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Ronan\"</span><span style=\"color: #333333\">,</span>\n<span style=\"color: #333333\">  </span><span style=\"color: #1A1A1A\"><data-lsp lsp='(property) age: number'>age</data-lsp></span><span style=\"color: #000000\">:</span><span style=\"color: #333333\"> </span><span style=\"color: #09835A\">26</span>\n<span style=\"color: #333333\">});</span>\n\n<span style=\"color: #333333\"><data-lsp lsp='const person: {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;} &amp;amp; PropEventSource&amp;lt;{&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}>'>person</data-lsp>.<data-lsp lsp='(method) on&amp;lt;&amp;quot;firstName&amp;quot;>(eventName: &amp;quot;firstNameChanged&amp;quot;, callback: (newValue: string) => void): void'>on</data-lsp>(</span><span style=\"color: #A31515\">\"firstNameChanged\"</span><span style=\"color: #333333\">, <data-lsp lsp='(parameter) newName: string'>newName</data-lsp> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> {</span>\n<span class='query'>//                            ^ = (parameter) newName: string</span>\n<span style=\"color: #333333\">    <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(</span><span style=\"color: #A31515\">`new name is </span><span style=\"color: #0000FF\">${</span><span style=\"color: #A31515\"><data-lsp lsp='(parameter) newName: string'>newName</data-lsp>.<data-lsp lsp='(method) String.toUpperCase(): string'>toUpperCase</data-lsp>()</span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">});</span>\n\n<span style=\"color: #333333\"><data-lsp lsp='const person: {&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;} &amp;amp; PropEventSource&amp;lt;{&amp;#13;    firstName: string;&amp;#13;    lastName: string;&amp;#13;    age: number;&amp;#13;}>'>person</data-lsp>.<data-lsp lsp='(method) on&amp;lt;&amp;quot;age&amp;quot;>(eventName: &amp;quot;ageChanged&amp;quot;, callback: (newValue: number) => void): void'>on</data-lsp>(</span><span style=\"color: #A31515\">\"ageChanged\"</span><span style=\"color: #333333\">, <data-lsp lsp='(parameter) newAge: number'>newAge</data-lsp> </span><span style=\"color: #0000FF\">=&gt;</span><span style=\"color: #333333\"> {</span>\n<span class='query'>//                      ^ = (parameter) newAge: number</span>\n<span style=\"color: #333333\">    if (</span><span style=\"color: #1A1A1A\"><data-lsp lsp='(parameter) newAge: number'>newAge</data-lsp></span><span style=\"color: #333333\"> &lt; 0) {</span>\n<span style=\"color: #333333\">        </span><span style=\"color: #1A1A1A\"><data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.warn(...data: any[]): void'>warn</data-lsp></span><span style=\"color: #333333\">(</span><span style=\"color: #A31515\">\"warning! negative age\"</span><span style=\"color: #333333\">);</span>\n<span style=\"color: #333333\">    }</span>\n<span style=\"color: #333333\">})</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBACgTgezAUQG4QHbAMoIK5wDGEAPACrgQB8UAvFAN4BQUrUCGJA0hCFBAA9gmACYBnKGOBwAlhgDmUAGRQA1rwQAzKBUhUWbQwAoI6LADkAhgFsIALigADACQMeIAL4BhABaWFECKOADRQhJYANhEARpaEqg5GGBAA7gBqkXj2OpQA2u4AugCUdDSoCDIiUEUO5ZUA3EwejUwiEIQRlnDQmngYhMAyHFDWluoA6pbAhD6BAPLRAFbtwOSUVEYISw66EDU5kMqwiChmOPhEpLtULYQcUlCQcGLD9KMTUzPzSytGzKyaGTPYBWWwOABE2EsFWeEHBwQMnSkoOy4IAShx-PCDJZ5NkAEwANiaRRaTxeGAAdBwjODAcCUb5-HiRPCoMkUijSowDKwAPR8wxC4Ui1gAPQA-LywvcEBEIJSIgh5EZHBz2TZoDIJK4OSjKcAEABVMBPLyWMQQIxFDyOUkkskQZ4cakYWm4iBMgKs0IcgCCeO5-zYAtFYagkulMm0SVSAegJCgAAYSsHhXcMC95ZSUl03eDc3AMHJ5ABCdkQeRTGToKAe8H2wweElAA'>Try</a></div></pre>\n<p>Here we made <code>on</code> into a generic method.</p>\n<p>When a user calls with the string <code>\"firstNameChanged'</code>, TypeScript will try to infer the right type for <code>K</code>.\nTo do that, it will match <code>K</code> against the content prior to <code>\"Changed\"</code> and infer the string <code>\"firstName\"</code>.\nOnce TypeScript figures that out, the <code>on</code> method can fetch the type of <code>firstName</code> on the original object, which is <code>string</code> in this case.\nSimilarly, when called with <code>\"ageChanged\"</code>, TypeScript finds the type for the property <code>age</code> which is <code>number</code>.</p>\n<p>Inference can be combined in different ways, often to deconstruct strings, and reconstruct them in different ways.</p>\n<h2 id=\"intrinsic-string-manipulation-types\" style=\"position:relative;\"><a href=\"#intrinsic-string-manipulation-types\" aria-label=\"intrinsic string manipulation types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intrinsic String Manipulation Types</h2>\n<p>To help with string manipulation, TypeScript includes a set of types which can be used in string manipulation. These types come built-in to the compiler for performance and can’t be found in the <code>.d.ts</code> files included with TypeScript.</p>\n<h3 id=\"uppercasestringtype\" style=\"position:relative;\"><a href=\"#uppercasestringtype\" aria-label=\"uppercasestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Uppercase&#x3C;StringType></code></h3>\n<p>Converts each character in the string to the uppercase version.</p>\n<h5 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type Greeting = &amp;quot;Hello, world&amp;quot;'>Greeting</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Hello, world\"</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type ShoutyGreeting = &amp;quot;HELLO, WORLD&amp;quot;'>ShoutyGreeting</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> <data-lsp lsp='type Uppercase&amp;lt;S extends string> = intrinsic'>Uppercase</data-lsp>&lt;<data-lsp lsp='type Greeting = &amp;quot;Hello, world&amp;quot;'>Greeting</data-lsp>></span>\n<span class='query'>//   ^ = type ShoutyGreeting = \"HELLO, WORLD\"</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type ASCIICacheKey&amp;lt;Str extends string> = `ID-${Uppercase&amp;lt;Str>}`'>ASCIICacheKey</data-lsp>&lt;<data-lsp lsp='(type parameter) Str in type ASCIICacheKey&amp;lt;Str extends string>'>Str</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #333333\"> string&gt; </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">`ID-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #A31515\"><data-lsp lsp='type Uppercase&amp;lt;S extends string> = intrinsic'>Uppercase</data-lsp>&lt;<data-lsp lsp='(type parameter) Str in type ASCIICacheKey&amp;lt;Str extends string>'>Str</data-lsp>></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type MainID = &amp;quot;ID-MY_APP&amp;quot;'>MainID</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> <data-lsp lsp='type ASCIICacheKey&amp;lt;Str extends string> = `ID-${Uppercase&amp;lt;Str>}`'>ASCIICacheKey</data-lsp>&lt;</span><span style=\"color: #A31515\">\"my_app\"</span><span style=\"color: #333333\">&gt;</span>\n<span class='query'>//   ^ = type MainID = \"ID-MY_APP\"</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4gThCwCWA7A5lAvFARACQgBsiB7AGigHdS4iATXAKFEigGUALUgV1HkQoM2KAFUwkOAGMAhgGcIAHgFI06AHxMA9Fqh6AegH4mLcNACC7AMIBJG1ZlTOEANIQQi9sDhQIAD2AIVHo5KDlvNXURAAMbABEAWgASAG9xSVkFT291AF9o0zYAWRk0eJFLW3tHZzcPXABbEAB9GQlcTR09KCMgA'>Try</a></div></pre>\n<h3 id=\"lowercasestringtype\" style=\"position:relative;\"><a href=\"#lowercasestringtype\" aria-label=\"lowercasestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Lowercase&#x3C;StringType></code></h3>\n<p>Converts each character in the string to the lowercase equivalent.</p>\n<h5 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type Greeting = &amp;quot;Hello, world&amp;quot;'>Greeting</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"Hello, world\"</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type QuietGreeting = &amp;quot;hello, world&amp;quot;'>QuietGreeting</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> <data-lsp lsp='type Lowercase&amp;lt;S extends string> = intrinsic'>Lowercase</data-lsp>&lt;<data-lsp lsp='type Greeting = &amp;quot;Hello, world&amp;quot;'>Greeting</data-lsp>></span>\n<span class='query'>//   ^ = type QuietGreeting = \"hello, world\"</span>\n\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type ASCIICacheKey&amp;lt;Str extends string> = `id-${Lowercase&amp;lt;Str>}`'>ASCIICacheKey</data-lsp>&lt;<data-lsp lsp='(type parameter) Str in type ASCIICacheKey&amp;lt;Str extends string>'>Str</data-lsp> </span><span style=\"color: #0000FF\">extends</span><span style=\"color: #333333\"> string&gt; </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">`id-</span><span style=\"color: #0000FF\">${</span><span style=\"color: #A31515\"><data-lsp lsp='type Lowercase&amp;lt;S extends string> = intrinsic'>Lowercase</data-lsp>&lt;<data-lsp lsp='(type parameter) Str in type ASCIICacheKey&amp;lt;Str extends string>'>Str</data-lsp>></span><span style=\"color: #0000FF\">}</span><span style=\"color: #A31515\">`</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type MainID = &amp;quot;id-my_app&amp;quot;'>MainID</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> <data-lsp lsp='type ASCIICacheKey&amp;lt;Str extends string> = `id-${Lowercase&amp;lt;Str>}`'>ASCIICacheKey</data-lsp>&lt;</span><span style=\"color: #A31515\">\"MY_APP\"</span><span style=\"color: #333333\">&gt;</span>\n<span class='query'>//   ^ = type MainID = \"id-my_app\"</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBA4gThCwCWA7A5lAvFARACQgBsiB7AGigHdS4iATXAKFEigEUBXZJeRFDNigAZUlQhwAxgEMAzhAA8fJGnQA+JgHpNUXQD0A-ExbhoAQQDKAYQCSNq9MkALCAGkIIBReBwoEAB7AEKj0slCyPqpqQgAGyPQAtAAkAN6i4lJyit5wagC+MSZsALLSaDYAIkKWtvaOLu6euMUAmgD6ZgAKnbga2rpQhkA'>Try</a></div></pre>\n<h3 id=\"capitalizestringtype\" style=\"position:relative;\"><a href=\"#capitalizestringtype\" aria-label=\"capitalizestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Capitalize&#x3C;StringType></code></h3>\n<p>Converts the first character in the string to an uppercase equivalent.</p>\n<h5 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type LowercaseGreeting = &amp;quot;hello, world&amp;quot;'>LowercaseGreeting</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"hello, world\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type Greeting = &amp;quot;Hello, world&amp;quot;'>Greeting</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> <data-lsp lsp='type Capitalize&amp;lt;S extends string> = intrinsic'>Capitalize</data-lsp>&lt;<data-lsp lsp='type LowercaseGreeting = &amp;quot;hello, world&amp;quot;'>LowercaseGreeting</data-lsp>>;</span>\n<span class='query'>//   ^ = type Greeting = \"Hello, world\"</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAMg9gdwgJwMYEMDOEDiyITACWAdgOZQC8UARABYQA2jcANFAnMowCY0DcAKFCQoeAsXJUoAYXRgiwdIyIAvCAB54SNFlz5CpMgD4hAejNQrAPQD8QA'>Try</a></div></pre>\n<h3 id=\"uncapitalizestringtype\" style=\"position:relative;\"><a href=\"#uncapitalizestringtype\" aria-label=\"uncapitalizestringtype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code>Uncapitalize&#x3C;StringType></code></h3>\n<p>Converts the first character in the string to a lowercase equivalent.</p>\n<h5 id=\"example-3\" style=\"position:relative;\"><a href=\"#example-3\" aria-label=\"example 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example</h5>\n<pre class=\"shiki twoslash lsp\"><div class='code-container'><code><span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type LowercaseGreeting = &amp;quot;HELLO WORLD&amp;quot;'>LowercaseGreeting</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> </span><span style=\"color: #A31515\">\"HELLO WORLD\"</span><span style=\"color: #333333\">;</span>\n<span style=\"color: #0000FF\">type</span><span style=\"color: #333333\"> <data-lsp lsp='type UncomfortableGreeting = &amp;quot;hELLO WORLD&amp;quot;'>UncomfortableGreeting</data-lsp> </span><span style=\"color: #000000\">=</span><span style=\"color: #333333\"> <data-lsp lsp='type Uncapitalize&amp;lt;S extends string> = intrinsic'>Uncapitalize</data-lsp>&lt;<data-lsp lsp='type LowercaseGreeting = &amp;quot;HELLO WORLD&amp;quot;'>LowercaseGreeting</data-lsp>>;</span>\n<span class='query'>//   ^ = type UncomfortableGreeting = \"hELLO WORLD\"</span></code><a href='https://www.typescriptlang.org/play/#code/C4TwDgpgBAMg9gdwgJwMYEMDOEDiyITACWAdgOZQC8UARABICiMMA8lAOosBKMAIjQG4AUKEhQAqiVRwAtgDM4yYOgBGAG1z5CpCtUkYwRZWqIAvCAB54SNFk0Fi5AHzCA9K6ieAegH4gA'>Try</a></div></pre>\n<details>\n    <summary>Technical details on the intrinsic string manipulation types</summary>\n    <p>The code, as of TypeScript 4.1, for these intrinsic functions uses the JavaScript string runtime functions directly for manipulation and are not locale aware.</p>\n    <code><pre>\nfunction applyStringMapping(symbol: Symbol, str: string) {\n    switch (intrinsicTypeKinds.get(symbol.escapedName as string)) {\n        case IntrinsicTypeKind.Uppercase: return str.toUpperCase();\n        case IntrinsicTypeKind.Lowercase: return str.toLowerCase();\n        case IntrinsicTypeKind.Capitalize: return str.charAt(0).toUpperCase() + str.slice(1);\n        case IntrinsicTypeKind.Uncapitalize: return str.charAt(0).toLowerCase() + str.slice(1);\n    }\n    return str;\n}</pre></code>\n</details>","headings":[{"value":"String Unions in Types","depth":3},{"value":"Inference with Template Literals","depth":3},{"value":"Intrinsic String Manipulation Types","depth":2},{"value":"Uppercase<StringType>","depth":3},{"value":"Example","depth":5},{"value":"Lowercase<StringType>","depth":3},{"value":"Example","depth":5},{"value":"Capitalize<StringType>","depth":3},{"value":"Example","depth":5},{"value":"Uncapitalize<StringType>","depth":3},{"value":"Example","depth":5}],"frontmatter":{"permalink":"/docs/handbook/2/template-literal-types.html","title":"Template Literal Types","disable_toc":null,"handbook":null,"oneline":"Generating mapping types which change properties via template literal strings.","beta":true}},"prev":null,"next":null},"pageContext":{"id":"8template-literal-types","slug":"/docs/handbook/2/template-literal-types.html","repoPath":"/packages/documentation/copy/en/handbook-v2/Type Manipulation/Template Literal Types.md","lang":"en","modifiedTime":"2021-02-08T12:20:41.274Z"}},"staticQueryHashes":[]}