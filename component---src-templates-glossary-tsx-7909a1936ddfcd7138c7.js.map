{"version":3,"sources":["webpack:///../shiki-twoslash/dist/dom.js","webpack:///./src/templates/glossary.tsx"],"names":["exports","__esModule","setupTwoslashHovers","resetHover","globalPopover","document","getElementById","style","display","hover","event","hovered","target","nodeName","element","bodyRect","elemRect","message","getAttribute","position","body","getBoundingClientRect","top","left","tooltip","createElement","id","appendChild","txt","innerHTML","textContent","value","rootRect","getRootRect","toLowerCase","parentElement","relativeLeft","x","maxWidth","width","blocks","querySelectorAll","forEach","code","addEventListener","removeEventListener","GlossaryTemplateComponent","props","i","createInternational","useIntl","post","data","markdownRemark","console","log","JSON","stringify","useEffect","meta","pageContext","languageMeta","title","description","lang","locale","className","padding","textAlign","terms","map","t","key","href","dangerouslySetInnerHTML","__html","html","pageQuery"],"mappings":"8FACAA,EAAQC,YAAa,EACrBD,EAAQE,yBAAsB,EAE9B,IAWIC,EAAa,WACb,IAAIC,EAAgBC,SAASC,eAAe,6BACxCF,IACAA,EAAcG,MAAMC,QAAU,SAoBlCC,EAAQ,SAAUC,GAClB,IAAIC,EAAUD,EAAME,OACpB,GAAyB,aAArBD,EAAQE,SACR,OAAOV,IACX,IAtCkCW,EAC9BC,EACAC,EAgBAZ,EAoBAa,EAAUN,EAAQO,aAAa,OAC/BC,GAvC8BL,EAuCGH,EAtCjCI,EAAWV,SAASe,KAAKC,wBAItB,CACHC,KAJAN,EAAWF,EAAQO,yBACJC,IAAMP,EAASO,IAI9BC,KAHOP,EAASO,KAAOR,EAASQ,OAqChCC,IAvBApB,EAAgBC,SAASC,eAAe,iCAExCF,EAAgBC,SAASoB,cAAc,QACzBlB,MAAMY,SAAW,WAC/Bf,EAAcsB,GAAK,4BACnBrB,SAASe,KAAKO,YAAYvB,IAEvBA,GAkBHwB,EAAMvB,SAASoB,cAAc,YACjCG,EAAIC,UAAYZ,EAChBO,EAAQM,YAAcF,EAAIG,MAG1BP,EAAQjB,MAAMC,QAAU,QACxBgB,EAAQjB,MAAMe,IAAMH,EAASG,IAFf,GAE+B,KAC7CE,EAAQjB,MAAMgB,KAAOJ,EAASI,KAAO,KAErC,IAAIS,EAzBU,SAAdC,EAAwBnB,GACxB,MAAuC,QAAnCA,EAAQD,SAASqB,cACVpB,EAAQO,wBAEZY,EAAYnB,EAAQqB,eAqBZF,CAAYtB,GACvByB,EAAejB,EAASI,KAAOS,EAASK,EAC5Cb,EAAQjB,MAAM+B,SAAWN,EAASO,MAAQH,EAAe,MAiC7DpC,EAAQE,oBAbkB,WACtB,IAAIsC,EAASnC,SAASoC,iBAAiB,mCAKvC,OAJAD,EAAOE,SAAQ,SAAUC,GACrBA,EAAKC,iBAAiB,YAAanC,GACnCkC,EAAKC,iBAAiB,WAAYzC,MAE/B,WACHqC,EAAOE,SAAQ,SAAUC,GACrBA,EAAKE,oBAAoB,YAAapC,GACtCkC,EAAKE,oBAAoB,WAAY1C,S,2DCvFjD,4JAiBM2C,EAA4B,SAACC,GACjC,IAAMC,EAAIC,YAAqCC,eAEzCC,EAAOJ,EAAMK,KAAKC,eACxB,IAAKF,EAEH,OADAG,QAAQC,IAAI,oBAAqBC,KAAKC,UAAUV,IACzC,8BAGTW,qBAAU,WACRxD,kCACC,IAEH,IAAMyD,EAAOZ,EAAMa,YAAYC,aAC/B,OACE,kBAAC,IAAD,CAAQC,MAAOd,EAAE,kBAAmBe,YAAaf,EAAE,wBAAyBgB,KAAMjB,EAAMa,YAAYK,QAClG,yBAAKvC,GAAG,YACN,yBAAKwC,UAAU,2DAA2D3D,MAAO,CAAE4D,QAAS,OAAQC,UAAW,WAA/G,4DAEA,wBAAIF,UAAU,4CAEVP,EAAKU,MAAMC,KAAI,SAAAC,GAAC,OAAI,wBAAIC,IAAKD,EAAE7C,IAAI,uBAAG+C,KAAM,IAAMF,EAAE7C,IAAK6C,EAAE/D,cAG/D,yBAAKkE,wBAAyB,CAAEC,OAAQxB,EAAKyB,WAMxCC,EAAY,aAYV,mBAAC9B,GAAD,OAAkB,kBAAC,IAAD,CAAMkB,OAAQlB,EAAMa,YAAYK,QAAQ,kBAACnB,EAA8BC,M","file":"component---src-templates-glossary-tsx-7909a1936ddfcd7138c7.js","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.setupTwoslashHovers = void 0;\n// Gets the position of an element relative to the whole page\nvar getAbsoluteElementPos = function (element) {\n    var bodyRect = document.body.getBoundingClientRect();\n    var elemRect = element.getBoundingClientRect();\n    var top = elemRect.top - bodyRect.top;\n    var left = elemRect.left - bodyRect.left;\n    return {\n        top: top,\n        left: left\n    };\n};\n// Hide it\nvar resetHover = function () {\n    var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n    if (globalPopover)\n        globalPopover.style.display = \"none\";\n};\n// Get it\nvar findOrCreateTooltip = function () {\n    var globalPopover = document.getElementById(\"twoslash-mouse-hover-info\");\n    if (!globalPopover) {\n        globalPopover = document.createElement(\"div\");\n        globalPopover.style.position = \"absolute\";\n        globalPopover.id = \"twoslash-mouse-hover-info\";\n        document.body.appendChild(globalPopover);\n    }\n    return globalPopover;\n};\nvar getRootRect = function (element) {\n    if (element.nodeName.toLowerCase() === \"pre\") {\n        return element.getBoundingClientRect();\n    }\n    return getRootRect(element.parentElement);\n};\n// Gets triggered on the spans inside the codeblocks\nvar hover = function (event) {\n    var hovered = event.target;\n    if (hovered.nodeName !== \"DATA-LSP\")\n        return resetHover();\n    var message = hovered.getAttribute(\"lsp\");\n    var position = getAbsoluteElementPos(hovered);\n    // Create or re-use the current hover div\n    var tooltip = findOrCreateTooltip();\n    // Use a textarea to un-htmlencode for presenting to the user\n    var txt = document.createElement(\"textarea\");\n    txt.innerHTML = message;\n    tooltip.textContent = txt.value;\n    // Offset it a bit from the mouse and present it at an absolute position\n    var yOffset = 20;\n    tooltip.style.display = \"block\";\n    tooltip.style.top = position.top + yOffset + \"px\";\n    tooltip.style.left = position.left + \"px\";\n    // limit the width of the tooltip to the outer container (pre)\n    var rootRect = getRootRect(hovered);\n    var relativeLeft = position.left - rootRect.x;\n    tooltip.style.maxWidth = rootRect.width - relativeLeft + \"px\";\n};\n/**\n * Creates the main mouse over popup for LSP info using the DOM API.\n * It is expected to be run inside a `useEffect` block inside your main\n * exported component in Gatsby.\n *\n * @example\n * import React, { useEffect } from \"react\"\n * import { setupTwoslashHovers } from \"shiki-twoslash/dom\";\n *\n * export default () => {\n *   // Add a the hovers\n *   useEffect(setupTwoslashHovers)\n *\n *   // Normal JSX\n *   return </>\n * }\n *\n */\nvar setupTwoslashHovers = function () {\n    var blocks = document.querySelectorAll(\".shiki.lsp .code-container code\");\n    blocks.forEach(function (code) {\n        code.addEventListener(\"mouseover\", hover);\n        code.addEventListener(\"mouseout\", resetHover);\n    });\n    return function () {\n        blocks.forEach(function (code) {\n            code.removeEventListener(\"mouseover\", hover);\n            code.removeEventListener(\"mouseout\", resetHover);\n        });\n    };\n};\nexports.setupTwoslashHovers = setupTwoslashHovers;\n","import React, { useEffect } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport { Layout } from \"../components/layout\"\n\nimport { useIntl } from \"react-intl\";\nimport { createInternational } from \"../lib/createInternational\"\nimport { Intl } from \"../components/Intl\"\nimport { headCopy } from \"../copy/en/head-seo\"\n\nimport \"./markdown.scss\"\nimport \"./glossary.scss\"\n\nimport { setupTwoslashHovers } from \"shiki-twoslash/dist/dom\"\n\ntype Props = { pageContext: any, data: GatsbyTypes.TSConfigReferenceTemplateQuery, path: string }\n\nconst GlossaryTemplateComponent = (props) => {\n  const i = createInternational<typeof headCopy>(useIntl())\n\n  const post = props.data.markdownRemark\n  if (!post) {\n    console.log(\"Could not render:\", JSON.stringify(props))\n    return <div></div>\n  }\n\n  useEffect(() => {\n    setupTwoslashHovers()\n  }, [])\n\n  const meta = props.pageContext.languageMeta as typeof import(\"../../../glossary/output/en.json\")\n  return (\n    <Layout title={i(\"tsconfig_title\")} description={i(\"tsconfig_description\")} lang={props.pageContext.locale}>\n      <div id=\"glossary\">\n        <div className=\"whitespace raised content main-content-block subheadline\" style={{ padding: \"1rem\", textAlign: \"center\" }}>This page is a work in progress, congrats on finding it!</div>\n\n        <ul className=\"filterable-quicklinks main-content-block\">\n          {\n            meta.terms.map(t => <li key={t.id}><a href={\"#\" + t.id}>{t.display}</a></li>)\n          }\n        </ul>\n        <div dangerouslySetInnerHTML={{ __html: post.html! }} />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query GlossaryTemplate($glossaryPath: String!) {\n    markdownRemark(fileAbsolutePath: {eq: $glossaryPath} ) {\n      id\n      html\n      frontmatter {\n        permalink\n      }\n    }\n  }\n`\n\nexport default (props: Props) => <Intl locale={props.pageContext.locale}><GlossaryTemplateComponent {...props} /></Intl>\n"],"sourceRoot":""}